<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>目标跟踪</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E7%9B%AE%E6%A0%87%E8%B7%9F%E8%B8%AA/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E7%9B%AE%E6%A0%87%E8%B7%9F%E8%B8%AA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ppt</p><ol><li>介绍算法：<br> hog算法<br> kcf算法：岭回归-&gt;岭回归简化计算-&gt;核技巧（高斯核）</li><li>代码<br> hog  update  main</li><li>展示结果</li></ol>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>计算机视觉</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>词袋模型+SVM图像分类</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E8%AF%8D%E8%A2%8B%E6%A8%A1%E5%9E%8B+SVM%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E8%AF%8D%E8%A2%8B%E6%A8%A1%E5%9E%8B+SVM%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h3 id="算法流程描述"><a href="#算法流程描述" class="headerlink" title="算法流程描述"></a>算法流程描述</h3><p>首先，对数据集进行预处理。本实验使用scene_categories数据集，该数据集包括15个类别（文件夹名就是类别名），每个类中编号前150号的样本作为训练样本，15个类一共2250张训练样本；剩下的样本构成测试集合。对数据进行SIFT特征提取，得到每张图片的描述符，作为训练数据。<br>然后，使用KMeans算法对SIFT特征进行聚类，得到视觉词汇，然后计算图像的词袋模型，将图像的词汇表示和标签作为SVM的训练数据，得到训练好的SVM分类器。<br>对测试数据集中的每张图像，同样根据构建的视觉词汇，计算图像的词袋表示。使用训练好的SVM分类器对测试数据集进行分类预测，并计算分类准确率。<br>使用分类预测结果和真实标签计算混淆矩阵，然后用matplotlib绘制其热力图。</p><h3 id="函数功能说明"><a href="#函数功能说明" class="headerlink" title="函数功能说明"></a>函数功能说明</h3><p><code>extract_sift_features</code> 将输入的彩色图像转换为灰度图像，然后使用SIFT算法检测图像中的关键点，并计算这些关键点的SIFT特征描述符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_sift_features</span>(<span class="hljs-params">image</span>):<br>    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)<br>    sift = cv2.SIFT_create()<br>    keypoints, descriptors = sift.detectAndCompute(gray, <span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">return</span> descriptors<br></code></pre></td></tr></table></figure><p><code>preprocess_data</code> 对输入的图像路径列表进行预处理，提取每张图像的SIFT特征描述符，并将所有特征描述符拼接成一个特征矩阵返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess_data</span>(<span class="hljs-params">img_paths</span>):<br>    features = []<br>    <span class="hljs-keyword">for</span> img_path <span class="hljs-keyword">in</span> img_paths:<br>        image = cv2.imread(img_path)<br>        <span class="hljs-keyword">if</span> image <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            sift_features = extract_sift_features(image)<br>            <span class="hljs-keyword">if</span> sift_features <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                features.append(sift_features)<br>    <span class="hljs-keyword">return</span> np.concatenate(features, axis=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p><code>build_vocabulary</code> 使用K均值聚类算法对给定的特征集进行聚类，并构建一个视觉词汇，返回聚类中心。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_vocabulary</span>(<span class="hljs-params">features, vocab_size</span>):<br>    kmeans = KMeans(n_clusters=vocab_size)<br>    kmeans.fit(features)<br>    <span class="hljs-keyword">return</span> kmeans.cluster_centers_<br></code></pre></td></tr></table></figure><p><code>compute_bovw</code> 根据给定的特征和视觉词汇计算图像的词袋表示，并返回词袋表示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_bovw</span>(<span class="hljs-params">features, vocabulary</span>):<br>    kmeans = KMeans(n_clusters=vocabulary.shape[<span class="hljs-number">0</span>], init=vocabulary, n_init=<span class="hljs-number">1</span>, max_iter=<span class="hljs-number">1</span>)<br>    kmeans.fit(vocabulary)<br>    bovw_representation = np.zeros((<span class="hljs-number">1</span>, vocabulary.shape[<span class="hljs-number">0</span>]))<br>    <span class="hljs-keyword">if</span> features <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        assignments = kmeans.predict(features)<br>        <span class="hljs-keyword">for</span> assignment <span class="hljs-keyword">in</span> assignments:<br>            bovw_representation[<span class="hljs-number">0</span>, assignment] += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> bovw_representation<br></code></pre></td></tr></table></figure><p>在主函数中，首先按每个类别前150个数据为训练数据的原创对原始数据进行训练集和测试集的划分，然后调用上面的函数进行SIFT特征提取、计算词汇表、计算词袋模型，然后训练svm分类器，对测试数据的词袋表示进行预测，计算预测结果与真实结果的准确率与混淆矩阵，并将混淆矩阵可视化。</p><p>数据划分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 加载和预处理训练数据</span><br>train_labels = []<br>test_labels = []<br>train_img_paths = []<br>test_img_paths  = []<br><span class="hljs-keyword">for</span> path, dirs, files <span class="hljs-keyword">in</span> os.walk(img_path):<br>    <span class="hljs-keyword">for</span> i, file <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(files):<br>        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">150</span>):<br>            train_img_paths.append(os.path.join(path, file))<br>        <span class="hljs-keyword">else</span>:<br>            test_img_paths.append(os.path.join(path, file))<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(files) &gt; <span class="hljs-number">0</span>):<br>        train_labels.extend([path.split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]] * <span class="hljs-number">150</span>)<br>        test_labels.extend([path.split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]] * (<span class="hljs-built_in">len</span>(files) - <span class="hljs-number">150</span>))<br></code></pre></td></tr></table></figure><p>训练和测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 训练SVM分类器</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在训练SVM分类器...&quot;</span>)<br>clf = SVC(kernel=<span class="hljs-string">&#x27;linear&#x27;</span>)<br>clf.fit(train_bovw, train_labels)<br><br><span class="hljs-comment"># 测试词袋</span><br>test_bovw = []<br><span class="hljs-keyword">for</span> img_path <span class="hljs-keyword">in</span> tqdm(test_img_paths, desc=<span class="hljs-string">&quot;正在测试分类器&quot;</span>):<br>    image_features = preprocess_data([img_path])<br>    bovw_representation = compute_bovw(image_features, vocabulary)<br>    test_bovw.append(bovw_representation)<br>test_bovw = np.concatenate(test_bovw, axis=<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># 预测并评估分类器</span><br>predictions = clf.predict(test_bovw)<br>accuracy = accuracy_score(test_labels, predictions)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;准确率:&#123;:.3f&#125;%&quot;</span>.<span class="hljs-built_in">format</span>(accuracy*<span class="hljs-number">100</span>))<br></code></pre></td></tr></table></figure><p>计算并可视化混淆矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 计算混淆矩阵</span><br>conf_mat = confusion_matrix(test_labels, predictions)<br>normalized_conf_mat = conf_mat.astype(<span class="hljs-string">&#x27;float&#x27;</span>) / conf_mat.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">1</span>)[:, np.newaxis]<br><br>categories = [<span class="hljs-string">&#x27;00&#x27;</span>, <span class="hljs-string">&#x27;01&#x27;</span>, <span class="hljs-string">&#x27;02&#x27;</span>, <span class="hljs-string">&#x27;03&#x27;</span>, <span class="hljs-string">&#x27;04&#x27;</span>, <span class="hljs-string">&#x27;05&#x27;</span>, <span class="hljs-string">&#x27;06&#x27;</span>, <span class="hljs-string">&#x27;07&#x27;</span>, <span class="hljs-string">&#x27;08&#x27;</span>, <span class="hljs-string">&#x27;09&#x27;</span>, <span class="hljs-string">&#x27;10&#x27;</span>, <span class="hljs-string">&#x27;11&#x27;</span>, <span class="hljs-string">&#x27;12&#x27;</span>, <span class="hljs-string">&#x27;13&#x27;</span>, <span class="hljs-string">&#x27;14&#x27;</span>]<br><br><span class="hljs-comment"># 绘制混淆矩阵</span><br>plt.figure(figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">8</span>))<br>heatmap = sns.heatmap(normalized_conf_mat, annot=<span class="hljs-literal">True</span>, fmt=<span class="hljs-string">&#x27;.2f&#x27;</span>, cmap=<span class="hljs-string">&#x27;Blues&#x27;</span>, cbar=<span class="hljs-literal">False</span>)<br><br>heatmap.set_xticks(np.arange(<span class="hljs-built_in">len</span>(categories))+<span class="hljs-number">0.5</span>)<br><span class="hljs-comment"># 设置横坐标刻度标签为类别名称</span><br>heatmap.set_xticklabels(categories, rotation=<span class="hljs-number">45</span>, ha=<span class="hljs-string">&#x27;right&#x27;</span>)<br><br><span class="hljs-comment"># 设置纵坐标刻度在类别中心</span><br>heatmap.set_yticks(np.arange(<span class="hljs-built_in">len</span>(categories))+<span class="hljs-number">0.5</span>)<br><span class="hljs-comment"># 设置纵坐标刻度标签为类别名称</span><br>heatmap.set_yticklabels(categories, rotation=<span class="hljs-number">0</span>)<br><br>plt.xlabel(<span class="hljs-string">&#x27;预测类别&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;真实类别&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;预测结果的混淆矩阵&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h3 id="函数参数说明"><a href="#函数参数说明" class="headerlink" title="函数参数说明"></a>函数参数说明</h3><p><code>extract_sift_features</code>:<br>    - <code>image</code>: 输入的图像，是一个三维的NumPy数组，表示为(height, width, channels)。<br><code>preprocess_data</code>:<br>    - <code>img_paths</code>: 包含图像文件路径的列表，用于指定要预处理的图像数据集。<br><code>build_vocabulary</code>:<br>    - <code>features</code>: 特征矩阵，是一个二维NumPy数组，每行代表一个特征向量。<br>    - <code>vocab_size</code>: 视觉词汇的大小，即要构建的聚类中心数量。<br><code>compute_bovw</code>:<br>    - <code>features</code>: 特征矩阵，是一个二维NumPy数组，每行代表一个特征向量。<br>    - <code>vocabulary</code>: 视觉词汇，是一个二维NumPy数组，每行代表一个聚类中心。</p><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>在实验中发现，适当增大<code>vocab_size</code>可以带来更高的准确率，但考虑设备性能，最终选择的值为3000。<br>最终准确率如下：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240429000700.png" alt="image.png"></p><p>预测结果的混淆矩阵如下，其中每行之和为1，每个元素为预测类别在帧数类别中所占比例：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/Figure_1.png" alt="Figure_1.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>计算机视觉</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>课程介绍</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/7e2290ae61e2a3415915799e05c65da.jpg" alt="7e2290ae61e2a3415915799e05c65da.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>计算机视觉</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>钱币定位系统</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E9%92%B1%E5%B8%81%E5%AE%9A%E4%BD%8D%E7%B3%BB%E7%BB%9F/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E9%92%B1%E5%B8%81%E5%AE%9A%E4%BD%8D%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="算法整体流程"><a href="#算法整体流程" class="headerlink" title="算法整体流程"></a>算法整体流程</h3><p>为了实现钱币定位的功能，实验设计了Canny边缘检测和Hough圆变换两个主要的功能，最终实现了检测出输入图像中各个钱币的边缘并给出各个钱币的圆心坐标与半径的效果。</p><p><strong>Canny边缘检测：</strong><br>该算法以原始图像的灰度图为输入，先对图像进行高斯滤波，使图像更加平滑，然后计算梯度，得到图像的梯度图。接下来，进行非极大化抑制，去除所有非边缘的点。最后，用滞后阈值法将比高阈值大、比低阈值小的像素保留为强边缘，形成完整的边缘线。将处理好的图像保存在指定路径。</p><p><strong>Hough圆变换：</strong><br>将经过Canny边缘检测处理的图像作为霍夫变换的初始图象，对图中的像素点进行霍夫变换的投票，形成投票矩阵。之后，对投票矩阵中超过设定阈值的解码为圆，并将圆心和半径储存并打印。<br>经过上述变换后，可以在指定路径下得到最终结果图，并会得到输出的圆心坐标与半径。</p><h3 id="函数功能说明"><a href="#函数功能说明" class="headerlink" title="函数功能说明"></a>函数功能说明</h3><p>在类<code>CannyEdgeDetector</code>中实现了下列函数：</p><ul><li><p><code>caculate_gradients()</code><br>根据灰度图计算图像的梯度图和梯度方向矩阵，对每个像素点，用Sobel算子计算水平和垂直方向上的梯度。根据计算出的水平和垂直梯度，使用 <code>cv2.cartToPolar()</code> 函数计算每个像素点的梯度幅值和梯度方向。</p></li><li><p><code>non_maximum_suppression()</code><br>对图像梯度图进行非极大化抑制处理，对每个像素点，根据预设的阈值考虑是否将某些点的梯度置零，去除这些非边缘的点。</p></li><li><p><code>hysteresis_thresholding()</code><br>实现了边缘检测中的双阈值滞后阈值化，把梯度大于高阈值的像素标记为边缘点，把与其相邻的梯度高于低阈值的点的梯度设为高阈值。</p></li></ul><p>在类<code>HoughCircleTransform()</code>中实现了下列函数：</p><ul><li><p><code>Hough_transform_algorithm()</code><br>该函数基于Canny边缘检测得到的梯度图，对梯度大于零的点进行投票，形成投票矩阵。</p></li><li><p><code>Select_Circle()</code><br>对得到的投票矩阵进行遍历，找到投票数超过阈值的候选圆，选出合适的圆储存在列表中。</p></li></ul><h3 id="函数输入参数说明"><a href="#函数输入参数说明" class="headerlink" title="函数输入参数说明"></a>函数输入参数说明</h3><ul><li>Guassian_kernal_size：高斯滤波器核大小</li><li>high_threshold：双阈值法的高阈值</li><li>low_threshold：双阈值法的低阈值</li><li>Hough_transform_step： 图像控件转参数空间的变化比例</li><li>Hough_transform_threshold： hough变换的门限值</li></ul><h3 id="最终结果拟合图"><a href="#最终结果拟合图" class="headerlink" title="最终结果拟合图"></a>最终结果拟合图</h3><p>原始图像：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240402114130.png" alt="image.png"><br>经过Canny边缘检测得到的图像：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240402114026.png" alt="image.png"><br>经过Hough圆变换得到的图像：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240402114103.png" alt="image.png"><br>输出结果：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240402114249.png" alt="image.png"></p><h3 id="参数对结果的影响"><a href="#参数对结果的影响" class="headerlink" title="参数对结果的影响"></a>参数对结果的影响</h3><p>在实验中调参时发现，预设参数对目标检测的效果有影响：</p><ul><li>减小<code>high_threshold</code>和<code>low_threshold</code>，可以使Canny处理后的图像边缘更加明显</li><li>减小hough变换的门限值<code>Hough_transform_threshold</code>可增加检测出的圆数量</li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>计算机视觉</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第一次实验</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%AF%AD%E9%9F%B3%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%AF%AD%E9%9F%B3%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240319133528.png" alt="image.png"></p><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240319133545.png" alt="image.png"></p><p>分帧<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240319133800.png" alt="image.png"></p><p>语音信号具有短时平稳性</p><h3 id="短时分析技术"><a href="#短时分析技术" class="headerlink" title="短时分析技术"></a>短时分析技术</h3><ul><li>时域分析</li><li>频域分析</li><li>倒谱域分析<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240319134104.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240319134207.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240319134307.png" alt="image.png"></li></ul><h3 id="语音特征提取"><a href="#语音特征提取" class="headerlink" title="语音特征提取"></a>语音特征提取</h3><h4 id="端点检测"><a href="#端点检测" class="headerlink" title="端点检测"></a>端点检测</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240319134633.png" alt="image.png"></p><h4 id="基音周期估计"><a href="#基音周期估计" class="headerlink" title="基音周期估计"></a>基音周期估计</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240319134817.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240319135114.png" alt="image.png"></p><h4 id="共振峰估计"><a href="#共振峰估计" class="headerlink" title="共振峰估计"></a>共振峰估计</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240319135328.png" alt="image.png"></p><h4 id="MFCC特征提取"><a href="#MFCC特征提取" class="headerlink" title="MFCC特征提取"></a>MFCC特征提取</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240319135436.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240319135525.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240319135713.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>语音信息处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第二次实验</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%AF%AD%E9%9F%B3%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%AE%9E%E9%AA%8C/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%AF%AD%E9%9F%B3%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="声纹识别实验"><a href="#声纹识别实验" class="headerlink" title="声纹识别实验"></a>声纹识别实验</h3><p>模型：GMM（高斯混合模型）<br>数据集：TIMIT</p><h4 id="GMM高斯混合模型（Gaussian-mixture-model）"><a href="#GMM高斯混合模型（Gaussian-mixture-model）" class="headerlink" title="GMM高斯混合模型（Gaussian mixture model）"></a>GMM高斯混合模型（Gaussian mixture model）</h4><p>对于说话人识别，一组$N$个说话人集合，用一系列$GMM$ 示，即每个说话人$\mathrm{s}<em>{\mathrm{k}}$ 对应一个$\mathrm{GMM}$  参数  $\lambda</em>{\mathrm{k}}, \mathrm{k}&#x3D;1,2, \ldots, \mathrm{N}$ 。说话人识别的目标是寻找一个说话人模型，使得给定说话人观测序列  $\mathrm{X}&#x3D;x_{1}, x_{2}, \ldots, x_{t}, \ldots, x_{T}, x_{t}$  是下标为 $\mathrm{t}$ 的特征向量（时间维度下标，表示帧，frame），在某个模型参数下的后验概率最大（the maximum a posterior probability），该模型即为给定说话人观测序列，得到的说话人模型。假设帧间是相互独立的，预测模型（说话人模型）  $s_{\text {predicted }}$ 表示为:<br>$$<br>\mathrm{S}<em>{\text {predicted }}&#x3D;\underset{\mathrm{k} \in \mathcal{S}}{\arg \max } \sum</em>{\mathrm{t}&#x3D;1}^{\mathrm{T}} \log \left[\mathrm{p}\left(\boldsymbol{x}<em>{\boldsymbol{t}} \mid \lambda</em>{\mathrm{k}}\right)\right]$$</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>训练GMM模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_gmm</span>(<span class="hljs-params">train_features, train_labels, num_components=<span class="hljs-number">16</span></span>):<br>    gmm_models = &#123;&#125;<br>    unique_labels = <span class="hljs-built_in">set</span>(train_labels)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;training...&#x27;</span>)<br>    <span class="hljs-keyword">for</span> label <span class="hljs-keyword">in</span> tqdm(unique_labels):<br>        <span class="hljs-comment"># 为每个说话人训练一个 GMM 模型</span><br>        features = train_features[train_labels == label]  <span class="hljs-comment"># 把这个说话人的所有数据作为训练数据 (n, 2000, 13)</span><br>        gmm = GaussianMixture(n_components=num_components, covariance_type=<span class="hljs-string">&#x27;diag&#x27;</span>)  <span class="hljs-comment"># n_components:混合高斯模型数量, covariance_type:协方差类型</span><br>        <span class="hljs-comment"># TODO：修改fit时传入的数据，把帧数作为sample_num</span><br>        gmm.fit(features.reshape(features.shape[<span class="hljs-number">1</span>], features.shape[<span class="hljs-number">0</span>]*features.shape[<span class="hljs-number">2</span>]))  <span class="hljs-comment"># 降到2维作为输入</span><br>        gmm_models[label] = gmm  <span class="hljs-comment"># N个人的GMM模型组成列表</span><br>    <span class="hljs-comment"># 保存模型</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;gmm_models.pkl&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        pickle.dump(gmm_models, f)<br>    <span class="hljs-keyword">return</span> gmm_models<br></code></pre></td></tr></table></figure><p>对每个测试数据，找与之对应的最相似的说话人模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict_speaker</span>(<span class="hljs-params">gmm_models, test_features</span>):<br>    predictions = []<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;testing...&#x27;</span>)<br>    <span class="hljs-keyword">for</span> features <span class="hljs-keyword">in</span> tqdm(test_features):  <span class="hljs-comment"># (400, 13)</span><br>        scores = &#123;&#125;<br>        <span class="hljs-keyword">for</span> label, gmm <span class="hljs-keyword">in</span> gmm_models.items():  <span class="hljs-comment"># 遍历每个说话人模型</span><br>            <span class="hljs-comment"># TODO：对一个语音段的每帧进行预测，把每帧的得分求和，得到该gmm的得分，再对所有gmm取最高分</span><br>            score = gmm.score(features)<br>            scores[label] = score<br>        predicted_speaker = <span class="hljs-built_in">max</span>(scores, key=scores.get)  <span class="hljs-comment"># 选择得分最高的说话人</span><br>        predictions.append(predicted_speaker)<br>    <span class="hljs-keyword">return</span> predictions<br></code></pre></td></tr></table></figure><p>训练并预测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取数据</span><br>train_features = np.load(<span class="hljs-string">&quot;mfcc/train_features.npy&quot;</span>)<br>test_features = np.load(<span class="hljs-string">&quot;mfcc/test_features.npy&quot;</span>)<br>train_labels = np.load(<span class="hljs-string">&quot;mfcc/train_labels.npy&quot;</span>)<br>test_labels = np.load(<span class="hljs-string">&quot;mfcc/test_labels.npy&quot;</span>)<br><br><span class="hljs-comment"># 训练并预测</span><br><span class="hljs-keyword">if</span> load_model == <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;gmm_models.pkl&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        gmm_models = pickle.load(f)<br><span class="hljs-keyword">else</span>: <br>    gmm_models = train_gmm(train_features, train_labels)<br><br>predictions = predict_speaker(gmm_models, test_features)<br><br>accuracy = accuracy_score(test_labels, predictions)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;GMM预测准确率: &#123;:.3f&#125;%&quot;</span>.<span class="hljs-built_in">format</span>(accuracy * <span class="hljs-number">100</span>))<br></code></pre></td></tr></table></figure><h4 id="预测结果"><a href="#预测结果" class="headerlink" title="预测结果"></a>预测结果</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240429142154.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>语音信息处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>课程介绍</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%AF%AD%E9%9F%B3%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86/%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%AF%AD%E9%9F%B3%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86/%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/f63de4a518d28cf3bd2bb2f21af8ac0.jpg" alt="f63de4a518d28cf3bd2bb2f21af8ac0.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/6892a941f82cbfb0445a3420c32af33.jpg" alt="6892a941f82cbfb0445a3420c32af33.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>语音信息处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>课程介绍</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B8%8E%E7%BB%8F%E6%B5%8E%E5%86%B3%E7%AD%96/%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B8%8E%E7%BB%8F%E6%B5%8E%E5%86%B3%E7%AD%96/%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/a8c8015a481d6a60fb0adbb75b0d40c.jpg" alt="a8c8015a481d6a60fb0adbb75b0d40c.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>项目管理与经济决策</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>课程介绍</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BA%94%E7%94%A8/%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BA%94%E7%94%A8/%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/af9fb09bb63d946586e6171cc9c2dba.jpg" alt="af9fb09bb63d946586e6171cc9c2dba.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>嵌入式系统设计与应用</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>课程介绍</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E6%99%BA%E8%83%BD%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C/%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E6%99%BA%E8%83%BD%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C/%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/" alt="Uploading file...odxue"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240302130123.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>智能信息网络实验</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>课程介绍</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%84%91%E4%B8%8E%E8%AE%A4%E7%9F%A5%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%84%91%E4%B8%8E%E8%AE%A4%E7%9F%A5%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/3f64ec18d69c257aa7341a7253ff659.jpg" alt="3f64ec18d69c257aa7341a7253ff659.jpg"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/3481a40ba72303cfc653daeb1c42a45.jpg" alt="3481a40ba72303cfc653daeb1c42a45.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>脑与认知科学基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基于 Transformer 的命名实体识别</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E5%9F%BA%E4%BA%8E%20Transformer%20%E7%9A%84%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E5%9F%BA%E4%BA%8E%20Transformer%20%E7%9A%84%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="数据介绍"><a href="#数据介绍" class="headerlink" title="数据介绍"></a>数据介绍</h3><p>根据<code>train_TAG.txt</code>统计得到的标签集如下：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240519165851.png" alt="image.png"><br>标签集大小为9。</p><h3 id="模型框架"><a href="#模型框架" class="headerlink" title="模型框架"></a>模型框架</h3><h4 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h4><p>模型使用hugging face的<code>bert-base-chinese</code>作为预训练模型。模型接受预处理后的字符序列作为输入，输出字符对应的标签。</p><h4 id="模型参数"><a href="#模型参数" class="headerlink" title="模型参数"></a>模型参数</h4><p>BERT模型包含12层Transformer encoder，每层Transformer encoder包含的多头自注意头数为12，隐藏层大小为768。<br>在构建数据集时，设定单条文本最大长度为128，对数据集进行阶段或填充。使用库函数<code>BertTokenizer</code>对数据进行向量化操作。<br>训练时的参数包括：</p><ul><li>优化器：AdamW</li><li>学习率：5e-5</li><li>批次大小：32</li><li>训练轮数：5</li></ul><h4 id="训练算法"><a href="#训练算法" class="headerlink" title="训练算法"></a>训练算法</h4><p>训练过程中，模型的输入为编码后的字符序列，输出为每个字符对应的标签。损失函数采用交叉熵损失，优化器为AdamW。训练循环中每个epoch包括以下步骤：</p><ol><li>前向传播计算损失。</li><li>反向传播更新模型参数。</li><li>每个epoch结束后输出损失值。</li></ol><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><h4 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h4><p>每个epoch结束后在扩展集上进行验证，记录扩展集上的损失和准确率。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240519165610.png" alt="image.png"><br>Epoch 1 - Training Loss: 0.0131668053176951, Validation Loss: 0.010239653369493392, Validation Accuracy: 0.9971221633572501<br>Epoch 2 - Training Loss: 0.00557029220667432, Validation Loss: 0.009271262560837594, Validation Accuracy: 0.9975453132821626<br>Epoch 3 - Training Loss: 0.003971861287672002, Validation Loss: 0.010250022615927534, Validation Accuracy: 0.9975541777907558<br>Epoch 4 - Training Loss: 0.0030227819530087912, Validation Loss: 0.01101609307826279, Validation Accuracy: 0.9976459515267813<br>Epoch 5 - Training Loss: 0.002555301935822686, Validation Loss: 0.01072908611020737, Validation Accuracy: 0.9976827131653596</p><h4 id="训练损失和验证集性能曲线"><a href="#训练损失和验证集性能曲线" class="headerlink" title="训练损失和验证集性能曲线"></a>训练损失和验证集性能曲线</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240519165639.png" alt="image.png"></p><h4 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h4><p>实验共进行了5个epoch，从折线图中可以看出，训练数据的损失值一直在下降，但在验证集上的损失值有所波动。验证集上准确率有所提升，提升幅度逐渐放缓。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol><li>Devlin, J., Chang, M. W., Lee, K., &amp; Toutanova, K. (2018). BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding. arXiv preprint arXiv:1810.04805.</li><li>Hugging Face Transformers库：<a href="https://github.com/huggingface/transformers">https://github.com/huggingface/transformers</a></li><li>PyTorch官方文档：<a href="https://pytorch.org/docs/stable/index.html">https://pytorch.org/docs/stable/index.html</a></li><li>ChatGPT，辅助完成少量代码和文档。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>自然语言处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>构建汉语词向量</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E6%9E%84%E5%BB%BA%E6%B1%89%E8%AF%AD%E8%AF%8D%E5%90%91%E9%87%8F/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E6%9E%84%E5%BB%BA%E6%B1%89%E8%AF%AD%E8%AF%8D%E5%90%91%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h3><p>首先对训练数据和测试数据进行处理，按词进行分割然后储存起来，然后通过SVG和SGNS方法计算出训练数据的词向量，再在测试数据上进行测试。<br>为此，在代码中定义了<code>load_data()</code>, <code>caculate_sim()</code>, <code>svd_embedding()</code>和<code>sgns_embedding()</code>四个方法，分别进行数据处理、计算测试集上向量相关性、通过svd和sgns得到训练集上向量的操作。<br>最后将输出结果按要求写入文本文件中。</p><h3 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">svd_embedding</span>(<span class="hljs-params">train_data, test_data, dim</span>):<br>    model = Word2Vec(train_data, vector_size=dim, window=<span class="hljs-number">2</span>, sg=<span class="hljs-number">0</span>)<br>    vectors = model.wv.vectors<br>    svd = TruncatedSVD(n_components=<span class="hljs-number">5</span>)  <span class="hljs-comment"># K=5</span><br>    vec_svd = svd.fit_transform(vectors)  <span class="hljs-comment"># 将词向量降维</span><br>    word_index = model.wv.key_to_index<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;总奇异值个数：&#x27;</span>, <span class="hljs-built_in">len</span>(word_index))<br><br>    selected_singular_values_sum = np.<span class="hljs-built_in">sum</span>(svd.explained_variance_ratio_)<br>    all_singular_values_sum = np.<span class="hljs-built_in">sum</span>(svd.explained_variance_)<br>    ratio = selected_singular_values_sum / all_singular_values_sum<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;选取的奇异值之和:&quot;</span>, selected_singular_values_sum)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;全部奇异值之和:&quot;</span>, all_singular_values_sum)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;选取的奇异值之和与全部奇异值之和的比例:&quot;</span>, ratio)<br><br>    svd_result = caculate_sim(test_data, vec_svd, word_index) <br><br>    <span class="hljs-keyword">return</span> vec_svd, svd_result<br></code></pre></td></tr></table></figure><p>SVD分解算法的主要思想是将一个矩阵分解为三个矩阵的乘积，即$A &#x3D; UΣV^T$，其中$A$是待分解的矩阵，$U$是左奇异矩阵，$Σ$是奇异值矩阵，$V^T$是右奇异矩阵。在代码中，保留的主成分数量为$K$，然后将原始矩阵$A$分解为$U_kΣ_kV_k^T$，其中$U_k$、$Σ_k$和$V_k^T$分别是前$K个$左奇异矩阵、奇异值矩阵和右奇异矩阵。<br>在SVD中，非零奇异值的数量即为原始矩阵的秩，等于词汇表的大小，代码中<code>word_index</code>的长度即为非零奇异值的个数，在本实验数据中为24843。<br>在代码中使用了TruncatedSVD方法，选取了K&#x3D;5个奇异值进行模型分析。<br>选取的奇异值之和: 0.47254738<br>全部奇异值之和: 1.6644406<br>选取的奇异值之和与全部奇异值之和的比例: 0.28390762</p><h3 id="SGNS"><a href="#SGNS" class="headerlink" title="SGNS"></a>SGNS</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sgns_embedding</span>(<span class="hljs-params">train_data, test_data, dim</span>):<br>    model = Word2Vec(train_data, vector_size=dim, window=<span class="hljs-number">2</span>, sg=<span class="hljs-number">1</span>, negative=<span class="hljs-number">8</span>)  <span class="hljs-comment"># 采用sgns算法</span><br>    vec_sgns = model.wv.vectors<br>    word_index = model.wv.key_to_index<br>    sgns_result = caculate_sim(test_data, vec_sgns, word_index)<br>  <br>    <span class="hljs-keyword">return</span> vec_sgns, sgns_result<br></code></pre></td></tr></table></figure><p>初始词向量是由Word2Vec模型随机初始化的，是随机的小数值。<br>在代码中，词向量的维数通过 <code>vector_size</code> 参数指定，在此选择了维数为128。<br>在Word2Vec模型中，学习率、训练算法的学习率、训练批次大小和训练轮数等由模型的默认值控制，对使用者透明。</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>自然语言处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>课程介绍</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/f4e86555239c68c915a76e6294f7366.jpg" alt="f4e86555239c68c915a76e6294f7366.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>自然语言处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>实验 用numpy搭建全连接神经网络用于手写数字识别</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E9%AA%8C%20%E7%94%A8numpy%E6%90%AD%E5%BB%BA%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%94%A8%E4%BA%8E%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E9%AA%8C%20%E7%94%A8numpy%E6%90%AD%E5%BB%BA%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%94%A8%E4%BA%8E%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://zhuanlan.zhihu.com/p/377634925">【代码+原理讲解】使用Numpy实现一个简单的四层全连接神经网络（手写数字识别，mnist数据集，正确率98.58%） - 知乎</a><br><a href="https://blog.csdn.net/weixin_44023658/article/details/105694079">入门讲解：使用numpy实现简单的神经网络（BP算法）-CSDN博客</a><br>结合代码和公式对全连接神经网络的实现进行分析</p><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs prolog"># 标准化处理  <br>if normalize:  <br>    for <span class="hljs-symbol">_</span> in (<span class="hljs-string">&#x27;train_img&#x27;</span>, <span class="hljs-string">&#x27;test_img&#x27;</span>):  <br>        dataset[<span class="hljs-symbol">_</span>] = dataset[<span class="hljs-symbol">_</span>].astype(np.float32) / <span class="hljs-number">255.0</span>  <br># one_hot_label处理  <br>if one_hot_label:  <br>    for <span class="hljs-symbol">_</span> in (<span class="hljs-string">&#x27;train_label&#x27;</span>, <span class="hljs-string">&#x27;test_label&#x27;</span>):  <br>        t = np.zeros((dataset[<span class="hljs-symbol">_</span>].size, <span class="hljs-number">10</span>))  <br>        for idx, row in enumerate(t):  <br>            row[dataset[<span class="hljs-symbol">_</span>][idx]] = <span class="hljs-number">1</span>  <br>        dataset[<span class="hljs-symbol">_</span>] = t  <br># 展平处理  <br>if flatten:  <br>    for <span class="hljs-symbol">_</span> in (<span class="hljs-string">&#x27;train_img&#x27;</span>, <span class="hljs-string">&#x27;test_img&#x27;</span>):  <br>        dataset[<span class="hljs-symbol">_</span>] = dataset[<span class="hljs-symbol">_</span>].reshape(<span class="hljs-number">-1</span>, <span class="hljs-number">784</span>)  <br># 划分验证集  <br>if val_data:  <br>    x_val_data, x_test_data = np.split(dataset[<span class="hljs-string">&#x27;test_img&#x27;</span>], <span class="hljs-number">2</span>)  <br>    y_val_data, y_test_data = np.split(dataset[<span class="hljs-string">&#x27;test_label&#x27;</span>], <span class="hljs-number">2</span>)  <br>    return dataset[<span class="hljs-string">&#x27;train_img&#x27;</span>], dataset[<span class="hljs-string">&#x27;train_label&#x27;</span>], x_val_data, y_val_data, x_test_data, y_test_data<br></code></pre></td></tr></table></figure><ul><li><p>标准化处理：将数据归一化</p></li><li><p>one hot处理：将数据处理成one hot形式，即维度扩充为与数据类别相同，数据为哪个类别，其相应维度上的值为1，否则为0</p></li><li><p>展平处理：将28*28的图像转换成一个维度上784的大小</p></li><li><p>划分验证集：原数据集为训练集：测试集60000：10000，把测试集中的5000条作为验证集</p></li></ul><h3 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(<span class="hljs-title class_ inherited__">object</span>):  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_input, num_output</span>):  <br>        self.num_input = num_input  <br>        self.num_output = num_output  <br>        self.w = np.random.normal(loc=<span class="hljs-number">0.0</span>, scale=<span class="hljs-number">0.01</span>, size=(self.num_input, self.num_output))  <span class="hljs-comment"># 随机初始化参数 假设为(n, m)  </span><br>        self.bias = np.zeros([<span class="hljs-number">1</span>, self.num_output])  <span class="hljs-comment"># 初始化为0  (1, m)  </span><br>        self.input_data = np.zeros(<span class="hljs-number">0</span>)  <br>        self.output_data = np.zeros(<span class="hljs-number">0</span>)  <br>        self.grad_w = np.zeros(<span class="hljs-number">0</span>)  <br>        self.grad_b = np.zeros(<span class="hljs-number">0</span>)  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, input_data</span>):  <br>        self.input_data = input_data  <span class="hljs-comment"># 假设input_data = (1, n)  </span><br>        self.output_data = np.matmul(self.input_data, self.w) + self.bias  <span class="hljs-comment"># (1, n) * (n, m) = (1, m) m为下一层的输入维度  </span><br>        <span class="hljs-keyword">return</span> self.output_data  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">backward</span>(<span class="hljs-params">self, grad</span>):  <br>        self.grad_w = np.dot(self.input_data.T, grad)  <span class="hljs-comment"># (n, 1) * (1, m) = (n, m)  </span><br>        self.grad_b = np.<span class="hljs-built_in">sum</span>(grad, axis=<span class="hljs-number">0</span>)  <br>        next_grad = np.dot(grad, self.w.T)  <span class="hljs-comment"># (1, m) * (m, n) = (1, n)  </span><br>        <span class="hljs-keyword">return</span> next_grad  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">backward_with_l2</span>(<span class="hljs-params">self, grad, lamb, batch_size</span>):  <br>        self.grad_w = np.dot(self.input_data.T, grad) + (lamb / batch_size) * self.w  <br>        self.grad_b = np.<span class="hljs-built_in">sum</span>(grad, axis=<span class="hljs-number">0</span>)  <br>        next_grad = np.dot(grad, self.w.T)  <br>        <span class="hljs-keyword">return</span> next_grad  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, lr</span>):  <br>        self.w = self.w - lr * self.grad_w  <br>        self.bias = self.bias - lr * self.grad_b<br></code></pre></td></tr></table></figure><p>定义一个类，在其中实现的功能有：</p><ul><li><p>初始化：在创建一层全连接层时，需要初始化w和b，w为（m，n）其中m为输入数据的维度，n为下一层的输入维度，b为（1，n）.公式如下:<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231017235953.png" alt="image.png"></p></li><li><p>前馈函数：在前馈函数中实现上面的公式</p></li><li><p>反向传播：需要根据损失更新参数w和b的值，因此分别对w和b求偏导<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231018001633.png" alt="image.png"></p></li></ul><p>前一层的梯度可以根据后一层的梯度得到:<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019001328.png" alt="image.png"><br>根据上面这个公式，可以发现，<strong>前一层可以使用后一层的误差项来得到自己的误差项</strong>，而不需要从最后用链式法则进行推导。因此称为反向<strong>传播</strong>。<br>推导过程如下：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019001444.png" alt="image.png"></p><ul><li>更新参数：在原来的参数上减去梯度方向得到新的参数，实验中往往需要学习率来控制更新的程度</li></ul><h3 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Re</span>LU(object):  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):  <br>        <span class="hljs-variable language_">self</span>.input_data = np.zeros(<span class="hljs-number">0</span>)  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, input_data</span>):  <br>        <span class="hljs-variable language_">self</span>.input_data = input_data  <br>        output_data = np.maximum(<span class="hljs-number">0</span>, input_data)  <span class="hljs-comment"># (1, n)  </span><br>        <span class="hljs-keyword">return</span> output_data  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">backward</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, grad</span>):  <br>        next_grad = grad  <span class="hljs-comment"># (1, n) * (1, n) 逐元素相乘  </span><br>        next_grad[<span class="hljs-variable language_">self</span>.input_data &lt; <span class="hljs-number">0</span>] = <span class="hljs-number">0</span>  <br>        <span class="hljs-keyword">return</span> next_grad<br></code></pre></td></tr></table></figure><p>激活函数同样需要两个，一个实现前向传播，一个实现反向传播</p><h3 id="Softmax-交叉熵损失"><a href="#Softmax-交叉熵损失" class="headerlink" title="Softmax+交叉熵损失"></a>Softmax+交叉熵损失</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Softmax</span>(<span class="hljs-title class_ inherited__">object</span>):  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):  <br>        self.prob = np.zeros(<span class="hljs-number">0</span>)  <br>        self.batch_size = []  <br>        self.label = []  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, input_data</span>):  <br>        input_max = np.<span class="hljs-built_in">max</span>(input_data, axis=<span class="hljs-number">1</span>, keepdims=<span class="hljs-literal">True</span>)  <br>        input_exp = np.exp(input_data - input_max)  <br>        self.prob = input_exp / np.<span class="hljs-built_in">sum</span>(input_exp, axis=<span class="hljs-number">1</span>, keepdims=<span class="hljs-literal">True</span>)  <br>        <span class="hljs-keyword">return</span> self.prob  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_loss</span>(<span class="hljs-params">self, label</span>):  <span class="hljs-comment"># 计算损失  </span><br>        self.label = label  <br>        self.batch_size = self.prob.shape[<span class="hljs-number">0</span>]  <br>        loss = -np.<span class="hljs-built_in">sum</span>(label * np.log(self.prob + <span class="hljs-number">1e-7</span>)) / self.batch_size  <br>        <span class="hljs-keyword">return</span> loss  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">backward</span>(<span class="hljs-params">self</span>):  <br>        grad = (self.prob - self.label) / self.batch_size  <br>        <span class="hljs-keyword">return</span> grad<br></code></pre></td></tr></table></figure><p>在Softmax中除了实现前向和后向传播外，添加了用交叉熵计算损失的函数，这是因为在softmax后加交叉熵，反向传播的公式会更简便。</p><h3 id="MSE损失（Mean-squared-error均方误差）"><a href="#MSE损失（Mean-squared-error均方误差）" class="headerlink" title="MSE损失（Mean squared error均方误差）"></a>MSE损失（Mean squared error均方误差）</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">MSE_loss</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, y_pre, y</span>):  <br>    loss = <span class="hljs-number">0.5</span> * np.sum((y_pre - y) ** <span class="hljs-number">2</span>) / batch_size  <br>    grad = (y_pre - y) / batch_size  <br>    <span class="hljs-keyword">return</span> loss, grad<br></code></pre></td></tr></table></figure><h3 id="整体的传播"><a href="#整体的传播" class="headerlink" title="整体的传播"></a>整体的传播</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, input_data</span>):  <span class="hljs-comment"># 神经网络的前向传播  </span><br>    h1 = self.fc1.forward(input_data)  <br>    h1 = self.relu1.forward(h1)  <br>    <span class="hljs-comment"># h1 = self.sigmoid1.forward(h1)  </span><br>    h2 = self.fc2.forward(h1)  <br>    h2 = self.relu2.forward(h2)  <br>    <span class="hljs-comment"># h2 = self.sigmoid2.forward(h2)  </span><br>    h3 = self.fc3.forward(h2)  <br>    <span class="hljs-comment"># prob = self.softmax.forward(h1)  </span><br>    <span class="hljs-keyword">return</span> h3  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">backward</span>(<span class="hljs-params">self, y_pre, y</span>):  <span class="hljs-comment"># 神经网络的反向传播  </span><br>    _, grad = self.MSE_loss(y_pre, y)  <br>    <span class="hljs-comment"># grad = self.softmax.backward()  </span><br>    dh3 = self.fc3.backward(grad)  <br>    dh2 = self.relu2.backward(dh3)  <br>    <span class="hljs-comment"># dh2 = self.sigmoid2.backward(dh3)  </span><br>    dh2 = self.fc2.backward(dh2)  <br>    dh1 = self.relu1.backward(dh2)  <br>    <span class="hljs-comment"># dh1 = self.sigmoid1.backward(dh2)  </span><br>    dh1 = self.fc1.backward(dh1)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, lr</span>):  <br>    self.fc1.update(lr)  <br>    self.fc2.update(lr)  <br>    self.fc3.update(lr)<br></code></pre></td></tr></table></figure><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p>使用mini-batch GD，使用效果较好的模型参数<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019002745.png" alt="image.png"><br>得到实验结果如下：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019002819.png" alt="image.png"><br>最终测试集准确率稳定在98%以上。</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>神经网络与深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>强化学习</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h3><p>一种试错型学习范式<br>随即环境，智能体的动作引起环境的变化<br>评价：包含噪声的延迟奖励<br>目标：最大化长期累计回报<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116102158.png" alt="image.png"></p><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><p>状态是用于决定下一步发生什么的信息<br>形式上，状态是一个关于历史信息的表示<br>历史是一个状态、动作和奖励组成的序列</p><h4 id="环境状态"><a href="#环境状态" class="headerlink" title="环境状态"></a>环境状态</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116102437.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116102701.png" alt="image.png"></p><p>完全可观测性：智能体能够直接观测到环境状态$O_t &#x3D; s_t$<br>部分可观测性：智能体间接观察环境$O_t !&#x3D; s_t$</p><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p>智能体的目标：最大化其收到的奖励总和<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116103205.png" alt="image.png"></p><h3 id="马尔可夫决策过程"><a href="#马尔可夫决策过程" class="headerlink" title="马尔可夫决策过程"></a>马尔可夫决策过程</h3><p>理想情况下，一个状态应该总结过去的“经历”，以便保留所有必要的信息，也就是说，它应该具有马尔可夫性：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116103615.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116104447.png" alt="image.png"></p><h4 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116104526.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116105033.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116105039.png" alt="image.png"></p><h4 id="贝尔曼等式"><a href="#贝尔曼等式" class="headerlink" title="贝尔曼等式"></a>贝尔曼等式</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116105248.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116105313.png" alt="image.png"></p><h4 id="策略改进"><a href="#策略改进" class="headerlink" title="策略改进"></a>策略改进</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116111336.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116111525.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>神经网络与深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>循环神经网络</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019100538.png" alt="image.png"></p><p>特点：不同于在样本上做多个独立预测，而是假设样本之间存在关联，进而在样本序列上做预测</p><p>采用链式法则表示一个观测序列的联合概率：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019101449.png" alt="image.png"><br>考虑一个观测和所有历史观测之间的依赖关系复杂度随着观测个数指数级增长</p><p>马尔可夫模型：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019101541.png" alt="image.png"><br>马尔可夫模型假设当前观察只和较近的观测有关</p><p>考虑两个不同的序列（如输入和输出序列），可以使用隐马尔可夫模型：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019101946.png" alt="image.png"></p><p>联合分布为：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019102434.png" alt="image.png"></p><p>最可能的隐状态为：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019102453.png" alt="image.png"></p><p>循环神经网络（Recurrent neural networks，RNN）：</p><ul><li>HMM是一个生成模型，RNN是一个判别模型</li></ul><h3 id="循环神经网络（RNN）"><a href="#循环神经网络（RNN）" class="headerlink" title="循环神经网络（RNN）"></a>循环神经网络（RNN）</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019103834.png" alt="image.png"><br>RNN可以被认为是同一网络的多个副本，每个副本都将消息传递给后者<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019103930.png" alt="image.png"><br>可以保留序列前面的特征，但无法建立与序列后面的联系</p><p>双向RNN（BRNN）除了前向建模，还添加了一层后向建模<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019104056.png" alt="image.png"></p><h4 id="形式化表示"><a href="#形式化表示" class="headerlink" title="形式化表示"></a>形式化表示</h4><p>在每个时间步应用递归公式：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019104638.png" alt="image.png"></p><p>T个时间步的递归：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019104956.png" alt="image.png"></p><h3 id="随时间反向传播（BPTT）"><a href="#随时间反向传播（BPTT）" class="headerlink" title="随时间反向传播（BPTT）"></a>随时间反向传播（BPTT）</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231115173012.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231115172943.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019111347.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019111406.png" alt="image.png"><br>用链式法则：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019111434.png" alt="image.png"><br>一直传播到t&#x3D;0<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019111500.png" alt="image.png"></p><h3 id="梯度弥散和梯度爆炸"><a href="#梯度弥散和梯度爆炸" class="headerlink" title="梯度弥散和梯度爆炸"></a>梯度弥散和梯度爆炸</h3><h3 id="长短时记忆网络（LSTM）"><a href="#长短时记忆网络（LSTM）" class="headerlink" title="长短时记忆网络（LSTM）"></a>长短时记忆网络（LSTM）</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019112925.png" alt="image.png"></p><h4 id="遗忘门"><a href="#遗忘门" class="headerlink" title="遗忘门"></a>遗忘门</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019113336.png" alt="image.png"></p><h4 id="输入门"><a href="#输入门" class="headerlink" title="输入门"></a>输入门</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019113611.png" alt="image.png"></p><h4 id="单元状态更新"><a href="#单元状态更新" class="headerlink" title="单元状态更新"></a>单元状态更新</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019113642.png" alt="image.png"></p><h4 id="输出门"><a href="#输出门" class="headerlink" title="输出门"></a>输出门</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019113722.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>神经网络与深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注意力机制</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>软性注意力机制：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231102101323.png" alt="image.png"></p><p>打分函数：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231102101459.png" alt="image.png"></p><h3 id="记忆网络"><a href="#记忆网络" class="headerlink" title="记忆网络"></a>记忆网络</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231102112518.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>神经网络与深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成对抗网络</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>VAE通过引入隐变量z定义了一个显式的密度函数<br>生成对抗网络（GANs）通过对抗网络生成样本，而无需显式的密度函数<br>对抗学习是一种机器学习领域常用的学习策略，通过引入假样本迷惑模型</p><p>基本思想：训练两个网络</p><ul><li>生成器G：生成虚假样本，试图迷惑判别器</li><li>判别器D：试图区分真实样本和虚假样本</li><li>对抗学习：二者对抗训练</li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231109114252.png" alt="image.png"></p><p>零和博弈：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231109114538.png" alt="image.png"><br>最终通过充分训练，渴望算法收敛于一个好的关于数据分布的估计$p_g$，由$p_g$生成的样本，被最优的判别器当成真实样本</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>神经网络与深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成模型</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有监督：<br>给定数据(x,y)，x为输出，y是对应的标签<br>目的：学习一个映射f: x→y<br>用于分类、回归、目标检测、语义分割、图像描述等</p><p>无监督：<br>数据：只有x，没有标签<br>目标：学习隐藏的信息（数据背后隐藏的结构、主题、情感等）<br>用于聚类、特征降维、特征学习、密度估计等</p><p>判别模型：<br>同时需要输入X和标签Y，试图通过某个判别函数建模条件分布P(Y|X)<br>例如softmax回归，SVM等<br>不能建模P(X)，即观测到某个样本的概率</p><p>生成模型：<br>不需要标签Y，试图建模P(X, Y), P(X|Y), P(X)等<br>可以建模P(X)，可以生成新的样本</p><p>显式的密度估计：显式定义和求解$p_{model}(x)$，最大似然估计、马尔科夫链</p><p>隐式的密度估计：学习一个可以从中抽样出样本的模型$p_{model}(x)$，但并不显式定义它，GAN</p><h3 id="隐变量模型"><a href="#隐变量模型" class="headerlink" title="隐变量模型"></a>隐变量模型</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231109102846.png" alt="image.png"><br>借助因变量z，$p(x|z;\theta)$可以用$f(z,\theta)$逼近，进而把概率密度估计问题转化为函数逼近问题<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231109103141.png" alt="image.png"></p><h4 id="蒙特卡洛采样法"><a href="#蒙特卡洛采样法" class="headerlink" title="蒙特卡洛采样法"></a>蒙特卡洛采样法</h4><p>对大多数任务来说，精确估计往往不可行，因而转为近似估计<br>蒙特卡洛技术是建立在数值采样基础上的近似推断方法<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231109103422.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231109103438.png" alt="image.png"></p><p>穷尽所有的z非常困难<br>缩小z的取值范围：原本从任意分布P(z)中采样得到z→变为从后验分布p(z|X)中采样得到z</p><h3 id="变分自动编码器"><a href="#变分自动编码器" class="headerlink" title="变分自动编码器"></a>变分自动编码器</h3><p>变分推断是一种通过函数最优化近似估计概率的方法<br>基本思想：提出一个分布家族，进一步从中得到一个接近目标分布的分布<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231109104935.png" alt="image.png"><br>编码器：采样神经网络学习z的分布p(z)，例如高斯分布，从p(z)中抽样一个z<br>解码器：采用另一个神经网络从p(x|z)抽样得到x<br>改良：原本从任意分布P(z)中采样得到z→变为从后验分布p(z|X)中采样得到z<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231109105330.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231109105614.png" alt="image.png"></p><p>目标函数：学习模型参数$\theta$，以最大化训练数据的对数似然<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231109105847.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231109110011.png" alt="image.png"></p><p>训练：最大化下界（ELBO）<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231109110043.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231109110544.png" alt="image.png"></p><h4 id="Conditional-VAE"><a href="#Conditional-VAE" class="headerlink" title="Conditional VAE"></a>Conditional VAE</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231109110715.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>神经网络与深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神经网络与深度学习</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><u></u>教材：</p><ul><li>神经网络与深度学习，邱锡鹏 <a href="https://nndl.github.io/">神经网络与深度学习</a></li><li>动手学深度学习 阿斯顿·张、李沐</li><li><strong>深度学习，Ian Goddfellow</strong></li></ul><p>公开课：</p><ul><li>李宏毅：机器学习</li><li>CS224n</li><li>CS231n</li></ul><p>考核：平时作业80（选够100分的题量）+其他20（随堂考试、问答）</p><hr><p>随堂考试：</p><ul><li>前馈神经网络的反向传播 [[前馈神经网络#反向传播算法]]</li><li>循环神经网络的反向传播 [[循环神经网络#随时间反向传播（BPTT）]]</li><li>注意力机制 [[图神经网络#注意力机制]]</li></ul><p>11.16左右随堂考试</p><p>默写贝尔曼等式</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>神经网络与深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络优化与正则化</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96%E4%B8%8E%E6%AD%A3%E5%88%99%E5%8C%96/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96%E4%B8%8E%E6%AD%A3%E5%88%99%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h3><h4 id="梯度截断：防止梯度爆炸"><a href="#梯度截断：防止梯度爆炸" class="headerlink" title="梯度截断：防止梯度爆炸"></a>梯度截断：防止梯度爆炸</h4><h4 id="学习率衰减"><a href="#学习率衰减" class="headerlink" title="学习率衰减"></a>学习率衰减</h4><ul><li>余弦衰减：不引入任何参数</li><li>分段衰减</li><li>逆时衰减</li><li>指数衰减</li><li>自然指数衰减</li></ul><h4 id="批量大小"><a href="#批量大小" class="headerlink" title="批量大小"></a>批量大小</h4><p>批量的大小不影响随机梯度的期望，但是会影响随机梯度的方差</p><ul><li>批量越大，随机梯度的方差越小，训练稳定，可以设置较大的学习率</li><li>批量越小，设置小的学习率</li></ul><h3 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h3><h4 id="动量梯度下降法"><a href="#动量梯度下降法" class="headerlink" title="动量梯度下降法"></a>动量梯度下降法</h4><h4 id="RMSProp"><a href="#RMSProp" class="headerlink" title="RMSProp"></a>RMSProp</h4><h4 id="Adam"><a href="#Adam" class="headerlink" title="Adam"></a>Adam</h4><h3 id="参数初始化"><a href="#参数初始化" class="headerlink" title="参数初始化"></a>参数初始化</h3><h4 id="权重全零初始化"><a href="#权重全零初始化" class="headerlink" title="权重全零初始化"></a>权重全零初始化</h4><h4 id="使用较小的随机值初始化权重"><a href="#使用较小的随机值初始化权重" class="headerlink" title="使用较小的随机值初始化权重"></a>使用较小的随机值初始化权重</h4><p>从均值等于0，方差等于0.01的高斯分布中采样</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">W</span> = <span class="hljs-number">0</span>.<span class="hljs-number">01</span> * np.random.randn(Din, Dout)<br></code></pre></td></tr></table></figure><p>适合层数较少的神经网络</p><ul><li>Sigmoid或Tanh函数使用Xavier初始化</li><li>relu使用kaiming初始化</li></ul><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><h4 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h4><h3 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h3><p>归一化（Normalization）方法泛指把数据特征转换为相同尺度的方法，比如把数据特征映射到[0, 1]或[−1, 1]区间内，或者映射为服从均值为0、方差为1 的标准正态分布</p><h4 id="逐层归一化"><a href="#逐层归一化" class="headerlink" title="逐层归一化"></a>逐层归一化</h4><h5 id="批量归一化"><a href="#批量归一化" class="headerlink" title="批量归一化"></a>批量归一化</h5><h3 id="网络正则化"><a href="#网络正则化" class="headerlink" title="网络正则化"></a>网络正则化</h3>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>神经网络与深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UML</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/UML/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/UML/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>UML：统一建模语言</p><p>UML是一种标准的图形化建模语言，它是面向对象分析与设计的一种标准表示</p><ul><li>是一种<strong>可视化的建模语言</strong>，不是一种可视化的程序设计语言</li><li>是一种<strong>建模语言规格说明</strong>，不是工具或知识库的规格说明</li></ul><h3 id="UML的基本结构"><a href="#UML的基本结构" class="headerlink" title="UML的基本结构"></a>UML的基本结构</h3><p>基本构造块：</p><ul><li>事物 Thing</li><li>关系 Relationship</li><li>图 Diagram</li></ul><p>语义规则：</p><ul><li>name、scope、visibility、integrity、execution</li></ul><p>通用机制：</p><ul><li>specification、adornment、common division、extensibility mechanism</li></ul><h4 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h4><p>Structural thing</p><ul><li>Class, interface, component, node</li></ul><p>Behavior thing</p><ul><li>use case, Interaction, state machine</li></ul><p>Group thing</p><ul><li>package</li></ul><p>Annotation thing</p><ul><li>note</li></ul><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><ul><li>Dependenc</li><li>Association</li><li>Generalization</li><li>Realization</li></ul><h3 id="UML的4-1视图"><a href="#UML的4-1视图" class="headerlink" title="UML的4+1视图"></a>UML的4+1视图</h3><p>UML 用模型来描述系统的结构（静态特征）以及行为（动态特征）。从不同的视角为系统的架构建模，形成系统的不同视图（view）， 称为4+1视图，从1个需求的角度出发描述与系统设计的4个维度之间的关系。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231020110320.png" alt="image.png"></p><ul><li><p>用例视图：表示功能需求，强调从用户的角度看到的或需要的系统功能。这种视图也叫做用户模型视图（user model view） 或场景视图（scenario view）；</p></li><li><p>逻辑视图： 展现软件系统设计的静态结构的组成及特征，也称为结构模型视图（structural model view） 或静态视图（static view）；</p></li><li><p>进程视图：描述软件系统设计的并发和同步等特性，关注系统非功能性需求，也称为行为模型视图（behavioral model view）、过程视图（process view）、 协作视图（collaborative view）和动态视图（dynamic view）；</p></li><li><p>构件视图：关注软件代码的静态组织与管理，也称为实现模型视图（implementation model view ）和开发视图（development view）；</p></li><li><p>部署视图：描述硬件的拓扑结构以及软件和硬件的映射问题，关注系统非功能性需求（性能、可靠性等），也称为环境模型视图或物理视图（physical view）</p></li></ul><h3 id="UML的9个基本图"><a href="#UML的9个基本图" class="headerlink" title="UML的9个基本图"></a>UML的9个基本图</h3><ul><li><p>用例图（Use case diagram）：（从用户的角度）描述系统的功能；</p></li><li><p>类图（Class diagram）：描述系统的静态结构（类及其相互关系）；</p></li><li><p>对象图（Object diagram）： 描述系统在某个时刻的静态结构（对象及其相互关系）；</p></li><li><p>顺序图（Sequence diagram）：按时间顺序描述系统元素间的交互；</p></li><li><p>协作图（Collaboration diagram）：按照时间和空间的顺序描述系统元素间的交互和它们之间的关系；</p></li><li><p>状态图（State diagram）：描述了系统元素（对象）的状态条件和响应；</p></li><li><p>活动图（Activity diagram）：描述了系统元素之间的活动；</p></li><li><p>构件图（Component diagram）：描述了实现系统的元素（类或包）组织；</p></li><li><p>部署图（Deployment diagram）：描述了环境元素的配置并把实现系统的元素映射到配置上。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>软件工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大作业 酒店控温计费系统 规划</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%A4%A7%E4%BD%9C%E4%B8%9A%20%E9%85%92%E5%BA%97%E6%B8%A9%E6%8E%A7%E8%AE%A1%E8%B4%B9%E7%B3%BB%E7%BB%9F%20%E8%A7%84%E5%88%92/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%A4%A7%E4%BD%9C%E4%B8%9A%20%E9%85%92%E5%BA%97%E6%B8%A9%E6%8E%A7%E8%AE%A1%E8%B4%B9%E7%B3%BB%E7%BB%9F%20%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><p><input checked="" disabled="" type="checkbox"> 需求阶段</p></li><li><p><input checked="" disabled="" type="checkbox"> 设计阶段</p></li><li><p><input checked="" disabled="" type="checkbox"> 开发阶段<br>  第七周：<br>  第八周：前端简单的页面写好，后端功能基本实现<br>  第九周：前后端交互，找验收组开会<br>  第十周：debug，完善功能</p></li><li><p><input checked="" disabled="" type="checkbox"> 测试阶段：测试阶段</p></li></ul><p>做好版本管理，实现</p><ul><li><input checked="" disabled="" type="checkbox"> 注册</li><li><input checked="" disabled="" type="checkbox"> 登录</li><li><input checked="" disabled="" type="checkbox"> 登录：用户登陆成功进入空调管理界面，失败返回该界面重新登陆，在view的login_room中进行实现</li><li><input checked="" disabled="" type="checkbox"> 管理员界面</li></ul><p>用户开启空调功能：<br>    tem_c2中70行点击button后，需要给后端传表单，包含（user_id, room_id）, 传给open_ac函数</p><h4 id="需求分析："><a href="#需求分析：" class="headerlink" title="需求分析："></a>需求分析：</h4><p><strong>功能</strong><br>客户：设定空调温度和风速<br>房间内控制面板：显示使用空调消费的金额<br>打印空调使用的详单（什么时间打开，什么时间关闭）<br>空调管理员：监控各房间空调的使用状态<br>酒店管理员：生成酒店及房间的空调使用统计报表<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230923234400.png"></p><h4 id="实现框架："><a href="#实现框架：" class="headerlink" title="实现框架："></a>实现框架：</h4><p><strong>Djiago</strong><br><strong>MVC模型</strong>：<br>MVC 模式（Model–view–controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230923234417.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230923234432.png"></p><p>Django 的 MTV 模式本质上和 MVC 是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同，Django 的 MTV 分别是指：</p><ul><li>M 表示模型（Model）：编写程序应有的功能，负责业务对象与数据库的映射(ORM)。</li><li>T 表示模板 (Template)：负责如何把页面(html)展示给用户。</li><li>V 表示视图（View）：负责业务逻辑，并在适当时候调用 Model和 Template。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230923234456.png"></li></ul><p>Django + vue<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230921154013.png"><br>分工<br>1 客户端 @李<br>2 服务器 @周 @王<br>1 数据库 @高</p><p>git 暂定</p><ul><li><input disabled="" type="checkbox"> 学习各自的内容（前端、后端、数据库）</li><li><input disabled="" type="checkbox"> 学习用Git上传代码</li><li><input checked="" disabled="" type="checkbox"> Github创建一个远程仓库</li></ul><h4 id="项目功能："><a href="#项目功能：" class="headerlink" title="项目功能："></a>项目功能：</h4><p>项目功能图<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231010102445.png" alt="image.png"></p><p>登陆界面：</p><ul><li>用户界面：<br>  可以调节温度风速等，可以查看费用累计</li><li>管理界面：<br>  可以查看各房间的空调信息，可以生成指定房间的使用详单</li></ul><p>服务器端：</p><ul><li>接收用户界面传来的空调数据，①把数据传到管理界面，②把数据传到数据库</li><li>根据数据库中的数据计算每个房间的费用，把费用数据传给用户界面（每小时更新一次）</li><li>接收管理界面传来的生成详单的请求，根据数据生成详单，传给管理界面</li></ul><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><p>温控类：</p><ol><li>房间号</li><li>空调温度 风速 更改时间点</li><li>用户id</li><li>是否需要维修</li></ol><p>用户类：</p><ol><li>用户id</li><li>房间号</li><li>入住时间</li><li>退房时间</li></ol><p>账单内容：<br>1月1号 时间11.00 26度 大风 开<br>1月1号 时间12.00 26度 大风 关 1h 10</p><p>1月1号 时间11.00 26度 大风 开<br>1月1号 时间12.00 26度 大风 关 1h 10</p><p>1月1号 时间11.00 26度 大风 开<br>1月1号 时间12.00 26度 大风 关 1h 10</p><p>sum：100</p><p>报表：<br>101  空调状态：好&#x2F;坏  累计费用  用电度数<br>102<br>103</p><p>计费系统：<br>得到用户使用空调的费用</p><p>打印账单：<br>后端生成一个表格，传给前端</p><p>打印报表：<br>后端生成一个表格，传给前端</p><p>维修功能：<br>用户通知维修，给管理界面</p><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><h6 id="model"><a href="#model" class="headerlink" title="model"></a>model</h6><ul><li>正在服务的队列</li><li>等待服务的房间对象队列</li><li>调度器 调控每个房间的空调状态</li><li>服务对象：状态，开始时间，服务时长，房间号，温度，风速，费用</li><li>房间对象</li><li>生成详单</li></ul><h4 id="前后端通信"><a href="#前后端通信" class="headerlink" title="前后端通信"></a>前后端通信</h4><h5 id="办理入住"><a href="#办理入住" class="headerlink" title="办理入住"></a>办理入住</h5><p>前端传输一个表单，包含三个信息，房间号、用户名、密码<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231103141211.png" alt="image.png"><br>提交后将信息添加到数据库的user表中</p><p>TODO：</p><ul><li><input disabled="" type="checkbox"> 当该房间已有用户入住时，办理失败</li><li><input disabled="" type="checkbox"> 用户名是主键，不能和其他用户重复（使用身份证号等）</li></ul><p>调度队列：</p><p>回温系统：</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>软件工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工程</tag>
      
      <tag>作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>作业</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E4%BD%9C%E4%B8%9A/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="课后阅读1"><a href="#课后阅读1" class="headerlink" title="课后阅读1"></a>课后阅读1</h3><p>问题1：时至今日的软件开发过程中是否还存在软件危机中存在的现象？如果存在，软件工程的方法能否解决？未来的AI能否解决？</p><p>存在。软件危机中主要存在以下现象：</p><ol><li>对软件开发成本和进度的估计常常很不准确</li><li>用户对“已完成的”软件系统不满意</li><li>软件常常是不可维护的</li><li>软件通常没有适当的文档资料<br>随着人们使用软件工程的方法进行软件开发，这些问题逐渐减少，但不会完全消灭。<br>利用软件工程的方法可以有效解决这些问题，软件工程采用工程的概念、原理、技术和方法来开发和维护软件，进行详细需求分析和规划，使用合适的设计模式和架构，使用版本控制系统等特点可以有效解决上述问题。随着AI的发展，未来AI很有可能具备自主设计程序的能力，如果AI能实现正确理解客户需求，合理开发软件功能，自动维护软件运行，则可以开发出优质软件。</li></ol><hr><p>问题2：软件工程的知识体系中，你认为哪几个环节与软件质量相关？</p><p>需求分析：只有正确理解客户的需求，才能做出好的软件<br>软件稳定性和可维护性：当软件在使用中经常出现问题，或需要频繁投入人力进行维护时，意味着软件质量不高。<br>软件代码的可读性：高可读性的代码可以使软件在维护和升级时更方便。<br>经过测试：软件需要经过大量的测试才能保证质量。</p><hr><h3 id="课后阅读2"><a href="#课后阅读2" class="headerlink" title="课后阅读2"></a>课后阅读2</h3><ol><li>为何瀑布模型的成功率较低？</li></ol><p>模型缺乏灵活性。当软件需求不明确或不准确时，可能会在开发过程中产生问题，由于瀑布模型前后阶段的依赖关系，任何变更可能会牵涉多个阶段，使得改动极为困难。因此，软件很可能因为繁琐的工程变动而无法实现其应有的功能。</p><p>模型的风险控制能力较弱。软件只有通过测试阶段才能让用户接触最终产品，如果产品与用户需求有偏差，返工修改的代价比较大。软件开发人员只有在后期才能看见开发成果，有可能造成开发成果与预期不匹配。软件体系结构级别风险只有在整体组装测试之后才能发现，前期的错误也只有在固定的测试阶段才能被发现，这种错误修复需要极大的时间代价。上述风险一旦产生，会对软件的开发进度造成很大影响，极有可能导致项目延期等后果。</p><p>模型文档控制问题。瀑布模型的软件活动是由文档驱动的，当阶段之间规定过多文档时，会极大增加系统的工作量，占用开发者的工作时间，拖延工程进度。工作中开发人员可能会根据实际情况做出调整，而未及时更新文档，导致文档与实际开发过程之间存在不一致，当管理者通过文档管理项目的开发进度时可能出现问题。</p><p>模型工期长，阶段顺序严格。瀑布模型强调在一个阶段完成后才能进入下一个阶段，这会导致开发者的效率较低，造成很长的开发时间，一旦项目变化，会产生大量时间成本。</p><hr><p>作业要求：根据老师提供的作业3 的参考答案，完成以下内容</p><p>任务1：给出该系统的软件框架结构（如果已经有代码的小组，请结合小组的代码结构进行表述），15%</p><p>任务2：给出该系统的界面设计， 20%</p><p>任务3：给出顾客使用空调用例以及前台营业员出账单和出详单用例对应SSD中所有消息的动态结构交互图， 50%</p><p>消息1：RequestOn 开机请求， 组员完成服务资源无限制的情况；20%</p><p>组长完成服务资源数&#x3D;3且服务请求数&gt;3的具有调度策略的所有情况（优先级策略+时间片轮询策略） 40%</p><p>消息2：ChangeTargetTemp 调温 5%</p><p>消息3：ChangeFanSpeed 调风 15%</p><p>消息4：RequestOff 关机 10%</p><p>消息5：CreateInvoice 产生账单 5%</p><p>消息6：CreateDR 产生详单 5%</p><p>任务4：给出顾客使用空调用例的静态结构类图、给出前台营业员出具账单和出具详单用例的静态结构类图，10%</p><p>任务5：填写工作量表， 5%</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>软件工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工程</tag>
      
      <tag>作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件生命周期</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>考核：期中10+平时和作业40+期末50</p><hr><p>软件生命周期指软件产品从考虑其概念开始，直至废弃为止的整个时期，包括概念阶段、分析与设计阶段、构造阶段、移交和运行阶段等不同时期</p><h3 id="软件工程过程"><a href="#软件工程过程" class="headerlink" title="软件工程过程"></a>软件工程过程</h3><p><strong>软件工程过程</strong>是为了获得<strong>软件产品</strong>，在<strong>软件工具</strong>的支持下由<strong>软件工程师</strong>完成的一系列<strong>软件工程活动</strong>。主要活动有：</p><ul><li>编写软件规格说明：规定软件的功能及其使用限制</li><li>软件开发：产生满足规格说明的软件</li><li>软件确认：通过有效性验证以保证软件能够满足客户的要求</li><li>软件演进：为了满足客户的变更要求，软件必须在使用过程中进行不断地改进</li></ul><p>工程项目的三个基本目标：</p><ul><li>合理的进度</li><li>有限的经费</li><li>一定的质量</li></ul><h3 id="软件生命周期"><a href="#软件生命周期" class="headerlink" title="软件生命周期"></a>软件生命周期</h3><p>软件生命周期：指软件产品从考虑其概念开始，直至废弃为止的整个时期，包括概念阶段、分析与设计阶段、构造阶段、移交和运行阶段等不同时期。</p><p>软件生命周期的六个基本步骤</p><ul><li>制定计划  P</li><li>需求分析  D</li><li>设计  D</li><li>程序编码  D</li><li>测试  C</li><li>运行维护  A</li></ul><p>指定出完成开发任务的实施计划</p><ul><li>任务列表</li><li>每个任务的起止时间</li><li>每个任务的责任人</li></ul><h3 id="软件生命周期模型"><a href="#软件生命周期模型" class="headerlink" title="软件生命周期模型"></a>软件生命周期模型</h3><h4 id="传统软件生命周期模型"><a href="#传统软件生命周期模型" class="headerlink" title="传统软件生命周期模型"></a>传统软件生命周期模型</h4><ul><li>瀑布模型<br>推迟软件实现，强调在软件实现之前必须进行分析和设计工作<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230922111030.png"></li><li>演化模型<br>提倡两次开发，第一次是试验开发，探索需求</li><li>增量模型<br>按优先级逐步将需求进行开发<br>A: 0, B: 0, C: 0 –&gt; A: 100, B: 0, C: 0 –&gt; A: 100, B: 100, C: 0 –&gt; A: 100, B: 100, C: 100</li><li>喷泉模型<br>各个开发阶段没有特定的次序要求，可以并行进行，效率高但难于管理<br>A: 0, B: 0, C: 0 –&gt; A: 50, B: 40, C: 20 –&gt; A: 100, B: 70, C: 40 –&gt; A: 100, B: 100, C: 100</li><li>V模型和W模型<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230922111109.png"></li><li>螺旋模型<br>针对大型项目，开发周期长，风险高</li><li>构建组装模型<br>模块化思想，利用组件库中的软件构件</li><li>快速应用开发模型<br>增量型软件开发过程模型，强调极短的开发周期，并行开发</li><li>原型方法<br>根据用户需求快速构建原型，用户根据原型提出修改意见，明确需求。可以作用于上述所有模型<br>废弃&#x2F;追加</li></ul><h4 id="新型软件生命周期模型"><a href="#新型软件生命周期模型" class="headerlink" title="新型软件生命周期模型"></a>新型软件生命周期模型</h4><ul><li>RUP<br>四个阶段：初始阶段、细化阶段、构造阶段和交付阶段<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230922115056.png"></li><li>敏捷及极限编程</li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>软件工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件需求分析</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>软件工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象分析</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="面向对象的需求分析建模"><a href="#面向对象的需求分析建模" class="headerlink" title="面向对象的需求分析建模"></a>面向对象的需求分析建模</h3><p>面向对象分析方法中的需求分析包含两个模型：领域模型和用例模型。</p><ul><li><p>领域模型表示了需求分析阶段“当前系统”逻辑模型的静态结构；</p></li><li><p>用例模型是“目标系统”的逻辑模型，定义了“目标系统”做什么的需求。由以下四个部分组成：</p><ul><li>用例图</li><li>用例说明</li><li>系统顺序图（system sequence diagram）</li><li>操作契约（operation contract）</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231020111522.png" alt="image.png"></p><h3 id="领域模型"><a href="#领域模型" class="headerlink" title="领域模型"></a>领域模型</h3><p>领域模型：针对某一特定领域内概念类或者对象的抽象可视化表示。<br>主要用于概括地描述业务背景及重要的业务流程，帮助软件开发人员在短时间内尽快了解业务。</p><ul><li>业务背景：可由用户需求说明书或者调研报告中具有代表业务概念或者业务对象的词汇获得，这些词汇可统称为“概念类”；并通过能够代表关系的词汇建立概念类之间的关系，表示成能够代表业务知识结构的类图；</li><li>业务流程：一般由提交请求的角色及提供服务的对象所执行的活动（活动及任务节点）构成，活动的输出一般有数据对象和传给另一个活动的消息组成，建议使用UML的活动图进行描述。</li></ul><h3 id="用例模型"><a href="#用例模型" class="headerlink" title="用例模型"></a>用例模型</h3><p>用例模型由以下四个部分组成：</p><ul><li>用例图；</li><li>用例说明；</li><li>系统顺序图（system sequence diagram，option）；</li><li>操作契约（operation contract，option）</li></ul><p>以用例为核心从使用者的角度描述和解释待构建系统的功能需求</p><p>用例模型的基本结构：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231027105954.png" alt="image.png"></p><h4 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h4><p>用例图由三个基本元素组成：</p><ul><li>Actor：称为角色或者参与者，表示使用系统的对象，代表角色的不一定是人，也可以是组织、系统或设备；</li><li>Use_case：称为用例，描述角色如何使用系统功能实现需求目标的一组成功场景和一系列失败场景的集合；</li><li>Association：表示角色与用例之间的关系，以及用例和子用例之间的关系；</li></ul><h4 id="基本用例与子用例"><a href="#基本用例与子用例" class="headerlink" title="基本用例与子用例"></a>基本用例与子用例</h4><ul><li><p>基本用例：与角色直接相关的用例，表示系统的功能需求；</p></li><li><p>子用例：通过场景描述分析归纳出的用例，也表示了系统的功能，是基本用例的一个组成部分：</p><ul><li>包含子用例：多个基本用例中的某个与角色交互的场景具有相同的操作，且这些场景都是基本用例中必须执行的步骤，可以将其抽取出来作为基本用例的子用例</li><li>扩展子用例：（多个）基本用例中的某些场景存在相同的条件判断的情况，可以将其抽取出来作为基本用例的子用例；</li></ul></li></ul><h4 id="系统顺序图SSD"><a href="#系统顺序图SSD" class="headerlink" title="系统顺序图SSD"></a>系统顺序图SSD</h4><p>使用UML的sequence diagram描述角色与系统之间的交互场景实例；<br>在用例描述的基础上需进一步确定角色与系统之间的交互信息，并以可编程的方式将其命名；<br>系统顺序图中“一般”只需要三个UML的符号元素</p><ul><li>顺序图中的对象图标：&lt;类名：对象名&gt;</li><li>角色，类的特殊标识；</li><li>代表软件系统的对象，一般使用system或者系统命名；</li><li>角色与system之间的交互信息，简称消息或操作；<ul><li>同步消息：请求必须有应答才能发送后续消息；</li><li>异步消息：无须等待消息应答就可发送其他消息；</li><li>创建消息：创建一个对象实例的消息，SSD中不需要；</li><li>删除消息：删除一个对象实例的消息。</li></ul></li></ul><p>注意：</p><ol><li>SSD是用于替代用例说明文本的一种方式；</li><li>图中只有两个对象，表示角色对象与系统对象；</li><li>图中的消息名称及参数要求以可编程的方式命名；</li><li>消息名称和参数可以通过一个列表使用中文说明具体含义；</li><li>用例图中的每个用例都应该对应一张SSD；</li><li>角色发给系统的指令（系统事件）是操作契约关注的元素<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231027114827.png" alt="image.png"></li></ol><h4 id="操作契约"><a href="#操作契约" class="headerlink" title="操作契约"></a>操作契约</h4>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>软件工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL高级</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E9%AB%98%E7%BA%A7/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="5-1-Accessing-SQL-from-Programming-Language"><a href="#5-1-Accessing-SQL-from-Programming-Language" class="headerlink" title="5.1 Accessing SQL from Programming Language"></a>5.1 Accessing SQL from Programming Language</h3><p>应用程序执行数据处理，并调用</p><ul><li>与数据库服务器连接</li><li>将SQL命令发送到数据库服务器</li><li>将结果的元组逐个提取到程序变量中</li></ul><p>两种方法访问SQL：<br><strong>dynamic SQL</strong>：<br>程序用function连接数据库服务器并与之通信<br>程序将 SQL 查询构造为字符串，提交查询，然后将结果检索到程序变量中</p><ul><li>JDBC (Java DB Connectivity) with Java</li><li>ODBC (Open DB Connectivity) with C, C++, and Visual Basic<br><strong>embedded SQL</strong>：<br>SQL 语句在编译时在高级程序中转换为函数调用<br>这些函数调用使用提供动态 SQL 功能的 API 连接到数据库</li></ul><h4 id="5-1-1-JDBC"><a href="#5-1-1-JDBC" class="headerlink" title="5.1.1 JDBC"></a>5.1.1 JDBC</h4><p>JDBC 是一个基于 Java 的 API<br>支持查询、更新和检索<br>与数据库通信的模型：</p><ol><li>创建连接</li><li>创建SQL statement（语句）对象</li><li>用statement对象执行查询并获取结果</li><li>处理错误的异常机制</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231023103147.png" alt="image.png"></p><p>使用statement对象 stmt 执行查询以发送查询并获取结果<br>使用 <code>execute.query</code> 或 <code>execute.update</code>，例如 insert&#x2F;delete&#x2F;update&#x2F;createtable<br>参数：要执行的SQL语句，表示为字符串<br>获取查询结果，使用 <code>try&#123;...&#125;/catch&#123;...&#125;</code> 构造<br>将结果中的元组集检索到 ResultSet 对象 rset 中，并一次获取一个元组<br><code>next()</code>方法测试结果集是否至少有一个元组，如果是，则获取它<br>获取结果：如果 dept_name 是 select result 的第一个参数，则<code>rs.getString（“dept_name”）</code> 和 <code>rs.getString(1)</code>是等价的</p><h5 id="Prepared-Statement"><a href="#Prepared-Statement" class="headerlink" title="Prepared Statement"></a>Prepared Statement</h5><p>创建一个prepared statement，其中某些值将替换为<code>?</code>，在使用时指定实际值<br><code>setString()</code>方法和其他方法，如<code>setInt()</code>指定参数的值<br>创建：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231023105724.png" alt="image.png"><br>设置值：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231023105834.png" alt="image.png"><br>第一个参数指定我们要为其赋值的<code>?</code>参数，第二个参数指定要分配的值</p><h5 id="Metadata-Features"><a href="#Metadata-Features" class="headerlink" title="Metadata Features"></a>Metadata Features</h5><p>获取查询结果集中列的数目（结果关系的属性总数），输出各列的列名、数据类型<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231023110241.png" alt="image.png"><br><code>DatabaseMetaData dbmd=conn.getMetaData()</code><br>参数：catalog目录、schemas架构模式、table表模式和column列模式<br><code>null</code>表示所有目录&#x2F;schemas<br><code>&quot;&quot;</code>表示当前目录&#x2F;schemas<br><code>%</code>与SQL子句<code>like</code>含义相同<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231023111208.png" alt="image.png"></p><h5 id="Transaction-Control"><a href="#Transaction-Control" class="headerlink" title="Transaction Control"></a>Transaction Control</h5><p>每个 SQL 语句都被视为一个单独的transaction，默认情况下自动提交<br>关闭连接上的自动提交:<code>conn.setAutoCommit (false);</code><br>在连接上启用自动提交:<code>conn.setAutoCommit (ture);</code><br>Transaction必须最终提交或回滚：<code>conn.commit();</code> or <code>conn.rollback();</code></p><h5 id="Other-Features"><a href="#Other-Features" class="headerlink" title="Other Features"></a>Other Features</h5><ul><li>调用函数和过程<br><code>CallableStatement cStmt1 = conn.prepareCall(&quot;&#123;? = call some function(?)&#125;&quot;);</code><br><code>CallableStatement cStmt2 = conn.prepareCall(&quot;&#123;call some procedure(?,?)&#125;&quot;);</code></li><li>处理大型对象类型<br><code>getBlob（）</code> 和 <code>getClob（）</code> 类似于 <code>getString（）</code> 方法，但分别返回 Blob 和 Clob 类型的对象<br>通过 <code>getBytes（）</code> 从这些对象获取数据</li></ul><h5 id="Embedded-SQL-SQLJ-in-Java"><a href="#Embedded-SQL-SQLJ-in-Java" class="headerlink" title="Embedded SQL: SQLJ in Java"></a>Embedded SQL: SQLJ in Java</h5><p>SQLJ：Java 中的嵌入式 SQL<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231023112106.png" alt="image.png"></p><h4 id="5-1-2-从python访问数据库"><a href="#5-1-2-从python访问数据库" class="headerlink" title="5.1.2 从python访问数据库"></a>5.1.2 从python访问数据库</h4><h4 id="5-1-3-ODBC"><a href="#5-1-3-ODBC" class="headerlink" title="5.1.3 ODBC"></a>5.1.3 ODBC</h4><p>开放式数据库连接 （ODBC） 标准，用于应用程序（作为客户端）与数据库服务器通信<br>应用程序接口 （API） 到：</p><ul><li>打开与数据库的连接</li><li>发送查询和更新</li><li>取回结果<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231023112333.png" alt="image.png"></li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231023113307.png" alt="image.png"></p><h4 id="5-1-4-Embedded-SQL"><a href="#5-1-4-Embedded-SQL" class="headerlink" title="5.1.4 Embedded SQL"></a>5.1.4 Embedded SQL</h4><p>将 SQL 用作数据库查询工具的方法</p><ol><li><strong>interactive SQL交互式 SQL</strong>: 通过DBS人机界面直接用作DML和DDL</li><li><strong>dynamic SQL动态 SQL</strong>: e.g JDBC, ODBC</li><li><strong>embedded SQL嵌入式 SQL</strong>: 嵌入在通用编程语言中，例如 C 语言<br>交互式SQL只能进行DB的访问操作，不能对DB访问结果进行进一步的数据处理，Embedded SQL将SQL的数据库访问功能与C语言等宿主语言的数据处理能力相结合，提高了数据应用系统的能力<br>SQL标准定义了C，C++，Pascal，Fortran和Cobol等语言中的SQL嵌入, 嵌入 SQL 查询的语言称为宿主语言（host language）</li></ol><p>在执行任何 SQL 语句之前，程序必须首先连接到数据库<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231023114744.png" alt="image.png"><br><code>EXEC SQL</code>语句用于标识对预处理器的嵌入式 SQL 请求<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231023114708.png" alt="image.png"><br>可以在嵌入式 SQL 语句中使用主语言的变量。 它们前面带有冒号<code>:</code>以区别于 SQL 变量。如上所述使用的变量必须在 DECLARE 部分中声明，用于声明变量的语法遵循通常的主语言语法。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231023115411.png" alt="image.png"></p><h5 id="Cursor-in-Embedded-SQL-游标"><a href="#Cursor-in-Embedded-SQL-游标" class="headerlink" title="Cursor in Embedded SQL 游标"></a>Cursor in Embedded SQL 游标</h5><p>要编写嵌入式 SQL 查询，我们使用语句<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231023115748.png" alt="image.png"><br>变量 c 用于标识查询<br>利用Embedded SQL进行查询时，查询结果有可能包括多个元组，此时无法直接将多个元组通过共享变量赋值传递给宿主程序<br>系统开辟专门working区域存放SQL查询的结果关系，并利用查询游标c指向此区域。宿主程序根据c指向的查询结果关系集合，使用open, fetch, close依次获取结果关系中的各元组<br>游标c相当于一个临时的table<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231023120312.png" alt="image.png"></p><h5 id="Updates-Through-Embedded-SQL"><a href="#Updates-Through-Embedded-SQL" class="headerlink" title="Updates Through Embedded SQL"></a>Updates Through Embedded SQL</h5><p>用于修改（更新、插入和删除）的嵌入式 SQL 表达式<br>可以通过更新游标来更新游标fetch的tuples</p><h3 id="5-2-Functions-and-Procedures"><a href="#5-2-Functions-and-Procedures" class="headerlink" title="5.2 Functions and Procedures"></a>5.2 Functions and Procedures</h3><p>定义一个函数：<br>e.g. 给定一个部门的名称，返回教师人数<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231030095637.png" alt="image.png"><br>定义函数后可以在查找时直接使用：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231030095946.png" alt="image.png"></p><p>过程：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231030100409.png" alt="image.png"><br>可以使用 <code>call</code> 语句从 SQL 程序或嵌入式 SQL 调用过程。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231030100501.png" alt="image.png"></p><p>过程和函数也可以从动态 SQL 调用。函数、存储过程预先生成对应的查询执行计划（类似于目标代码），存储在DBMS中，应用程序直接调用，不需再进行查询处理和优化</p><h3 id="5-3-Trigger（触发器）"><a href="#5-3-Trigger（触发器）" class="headerlink" title="5.3 Trigger（触发器）"></a>5.3 Trigger（触发器）</h3><p>触发器是一种基于事件-条件-操作模型的机制，作用：完整性定义、检查和补救措施<br>触发器执行将在完整性约束检查时进行：指定触发器执行时要执行的操作，如果违反约束，则采取补救措施</p><p>指定导致触发器执行的事件（插入、删除、更新）<br>更新：更新时的触发器可以限制为特定属性<br><code>before</code>和<code>after</code>属性值:</p><ul><li><code>referencing old row as</code>：用于删除和更新</li><li><code>referencing new row as</code>：用于插入和更新</li></ul><p>将空白成绩转换为 null:<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231030104701.png" alt="image.png"></p><p>可以对受事务影响的所有行执行单个操作，而不是对每个受影响的行执行单独的操作</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用E-R模型的数据库设计</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%95%B0%E6%8D%AE%E5%BA%93/%E4%BD%BF%E7%94%A8E-R%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%95%B0%E6%8D%AE%E5%BA%93/%E4%BD%BF%E7%94%A8E-R%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="6-1-Overview-of-Design-Process"><a href="#6-1-Overview-of-Design-Process" class="headerlink" title="6.1 Overview of Design Process"></a>6.1 Overview of Design Process</h3><p>分析用户需求：</p><ul><li>什么数据需要被存储</li><li>什么操作和事务（transaction）被执行，例如插入、删除和更新</li></ul><p>数据库设计的三种模式：</p><ul><li>概念设计</li><li>逻辑设计，在逻辑级别和视图级别</li><li>物理设计，在物理层面</li></ul><p>数据库设计的阶段：</p><ul><li>需求分析</li><li>概念设计</li><li>逻辑模型设计</li><li>物理模型设计</li></ul><p>DBAS设计过程：<br>生命周期包括五个阶段：</p><ul><li>项目规划、需求分析、系统设计、实现与部署、运行管理与维护<br>根据软件组成和各自功能，分为三条设计主线：<br>数据组织与存储设计、数据访问与处理设计、应用设计<br>分别用于设计数据库、数据库事务和应用程序</li></ul><h3 id="6-2-The-Entity-Relationship-Model"><a href="#6-2-The-Entity-Relationship-Model" class="headerlink" title="6.2 The Entity-Relationship Model"></a>6.2 The Entity-Relationship Model</h3><p>建立一个图来表示整个数据库的特征<br>ER模型包括三个概念：</p><ul><li>entity sets（实体集）</li><li>relationship sets（关系集）</li><li>attributes（属性）<br>ER模型使用有关联的图表表示，即ER图，它以图形的方式表示数据库的整体逻辑结构</li></ul><h4 id="6-2-1-Entity-Sets（实体集）"><a href="#6-2-1-Entity-Sets（实体集）" class="headerlink" title="6.2.1 Entity Sets（实体集）"></a>6.2.1 Entity Sets（实体集）</h4><p>实体是一个存在的对象，区别于其他对象。实体通过一组属性表示。<br>实体集是一些相同类型实体的集合。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231101224017.png" alt="image.png"></p><h4 id="6-2-2-Relationship-Sets（关系集）"><a href="#6-2-2-Relationship-Sets（关系集）" class="headerlink" title="6.2.2 Relationship Sets（关系集）"></a>6.2.2 Relationship Sets（关系集）</h4><p>关系是多个实体之间的关联<br>实体集 E1， E2， …， En 参与关系集 R</p><h5 id="Attributes-with-Relationship-Sets"><a href="#Attributes-with-Relationship-Sets" class="headerlink" title="Attributes with Relationship Sets"></a>Attributes with Relationship Sets</h5><p>关系集在E-R图中用菱形表示，菱形通过线条连接到多个不同的实体集（矩形）。属性也可以与关系集合联系。<br>在教师和学生之间设置的顾问关系可能具有属性日期，该属性跟踪学生何时开始与顾问关联<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231101225949.png" alt="image.png"></p><h5 id="Role-in-Relationship-Sets"><a href="#Role-in-Relationship-Sets" class="headerlink" title="Role in Relationship Sets"></a>Role in Relationship Sets</h5><p>实体在关系中扮演的功能称为该实体的角色<br>在E-R图中角色一般标注在菱形和矩形之间的连线上<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231101230806.png" alt="image.png"></p><h5 id="Degree-of-a-Relationship-Set（关系集的度）-vs-Non-binary-Relationship-Sets（非二元关系集）"><a href="#Degree-of-a-Relationship-Set（关系集的度）-vs-Non-binary-Relationship-Sets（非二元关系集）" class="headerlink" title="Degree of a Relationship Set（关系集的度） vs Non-binary Relationship Sets（非二元关系集）"></a>Degree of a Relationship Set（关系集的度） vs Non-binary Relationship Sets（非二元关系集）</h5><p>二元关系涉及两个实体集（或二度）<br>在某些情况下，我们将关系表示为非二元关系。 具有三元关系的 E-R 图示例：学生在教师的指导下从事研究项目，教师、学生和项目之间的关系proj_guide是三元的<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231101231144.png" alt="image.png"></p><h3 id="6-3-Complex-Attributes"><a href="#6-3-Complex-Attributes" class="headerlink" title="6.3 Complex Attributes"></a>6.3 Complex Attributes</h3><p>每个属性都有一个可取值的集合，称为该属性的域（domain），或者值集（value set）<br>属性类型： </p><ul><li><p>简单属性和复合属性<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231101231709.png" alt="image.png"></p></li><li><p>单值和多值属性</p></li><li><p>派生属性: 可以从其他属性计算</p></li></ul><p>属性的 Null 值表示:</p><ul><li>该属性不适用于实体，不存在</li><li>该属性的值存在，但为“未知”</li></ul><p>冗余属性：假设我们有实体集： 讲师：ID、姓名、<strong>dept_name</strong>、薪水 ；部门：<strong>dept_name</strong>、建筑、预算<br>模型：每个教师都有一个使用关系集的关联部门inst_dept 属性dept_name出现在两个实体集中。 由于它是实体集部门的主键，因此它复制关系中存在的信息，因此在实体集讲师中是多余的。 但是：当转换回表时，在某些情况下会重新引入该属性</p><h3 id="6-4-Mapping-Cardinalities-Constrants（映射基数约束）"><a href="#6-4-Mapping-Cardinalities-Constrants（映射基数约束）" class="headerlink" title="6.4 Mapping  Cardinalities Constrants（映射基数约束）"></a>6.4 Mapping  Cardinalities Constrants（映射基数约束）</h3><p>语义&#x2F;约束：作为完整性约束，以保持 DBS 的一致性</p><h5 id="Mapping-Cardinalities（映射基数）"><a href="#Mapping-Cardinalities（映射基数）" class="headerlink" title="Mapping Cardinalities（映射基数）"></a>Mapping Cardinalities（映射基数）</h5><p>表示另一个实体可以通过关系集关联到的实体数<br>对于二元关系集 R，从 A 到 B 映射基数必须如下所示：</p><ul><li>一对一</li><li>一对多</li><li>多对一</li><li>多对多<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231101233304.png" alt="image.png"></li></ul><p>有些元素可能不被映射到其他集合</p><p>在 ER 图中表示基数约束：</p><ul><li>有→的代表一，没有箭头为多<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231101233549.png" alt="image.png"></li><li>用双线表示至少有一个实体相关联，单线则表示可以有零个或多个</li></ul><h5 id="Participate-Constraints（参与约束）"><a href="#Participate-Constraints（参与约束）" class="headerlink" title="Participate Constraints（参与约束）"></a>Participate Constraints（参与约束）</h5><p>实体 E 在关系 R 中的参与是<strong>完全的（total）</strong>，如果 E 中的每个实体都参与 R 中的至少一个关系：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231101233933.png" alt="image.png"><br>实体 E 在关系 R 中的参与是<strong>部分的（partial）</strong>，如果 E 中的某些实体可能不参与 R 中的任何关系：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231101234007.png" alt="image.png"></p><h5 id="Cardinality-Limits-for-Participation（参与的基数限制）"><a href="#Cardinality-Limits-for-Participation（参与的基数限制）" class="headerlink" title="Cardinality Limits for Participation（参与的基数限制）"></a>Cardinality Limits for Participation（参与的基数限制）</h5><p>基数限制（参与的基数界限）用于表示对参与的定量约束<br>e.g.</p><ul><li>每个instructor最多可以指导多个student, 最少可以指导0个student</li><li>每个student最少有1个指导instructor，最多也只有1个指导instructor<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231101234344.png" alt="image.png"><br>*表示无限制<br>A参与R的基数下界$l_{A}$和上界$h_{A}$</li><li>A中的每个实体a通过R关联了最少$l_{A}$个、最多$h_{A}$个B中实体b</li><li>$l_{A}$ ：对A中的每个实体a, B中至少有$l_{A}$个实体b通过R与其对应&#x2F;关联</li><li>$h_{A}$：对A中的每个实体a, B中至多有$h_{A}$个实体b通过R与其对应&#x2F;关联<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231101234446.png" alt="image.png"><br>最小值 lA &#x3D; 0：A 是 R 的部分参与<br>最小值 lA &gt; 0：A 为 R 的总参与，相当于双线<br>最大值 * 表示无限制</li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231101235347.png" alt="image.png"></p><p>我们最多允许一个箭头从三元（或更大程度）关系中表示基数约束  如果有多个箭头，则有两种定义含义的方法。 </p><ul><li>A、B 和 C 之间的三元关系 R，带有指向 B 和 C 的箭头可能意味着 每个 A 实体都与 B 和 C 中的唯一实体相关联，或者</li><li>（A， B） 中的每对实体都与一个唯一的 C 实体相关联，并且每一对（A、C）都与一个唯一的 B 实体相关联</li></ul><h3 id="6-5-Primary-Keys"><a href="#6-5-Primary-Keys" class="headerlink" title="6.5 Primary Keys"></a>6.5 Primary Keys</h3><p>键是一组属性<br>键包括 superkey （超键）， candidate key （候选键）， primary key （主键）</p><h4 id="Keys-For-Entity-Sets"><a href="#Keys-For-Entity-Sets" class="headerlink" title="Keys For Entity Sets"></a>Keys For Entity Sets</h4><p>实体集的superkey是一个或多个属性的集合，其值唯一地确定实体集中的每个实体<br>superkey可能包含无关属性，候选键是最小的超键</p><p>主键是被选为标识实体集中实体的主要方法的候选键<br>尽管可能存在多个候选键，但选择其中一个候选键作为主键</p><h4 id="Weak-Entity-Sets"><a href="#Weak-Entity-Sets" class="headerlink" title="Weak Entity Sets"></a>Weak Entity Sets</h4><p>没有主键的实体集称为弱实体集<br>弱实体集是其存在依赖于另一个实体（称为其标识实体，identifying entity）的实体集<br>不是将主键与弱实体相关联，而是使用标识实体以及称为鉴别器(discriminator)的额外属性来唯一标识弱实体<br>每个弱实体都必须与一个标识实体相关联，弱实体集是依赖于标识实体集的存在。<br>标识实体集是拥有弱实体集。 将弱实体集与标识实体集相关联的关系称为标识关系(identifying relationship)<br>在 E-R 图中，弱实体集通过双矩形进行描述。 我们用虚线强调弱实体集的判别器。 将弱实体集连接到标识强实体集的关系集由双菱形表示。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231106103032.png" alt="image.png"><br>弱实体集的鉴别器（或部分键）是一组属性，用于区分弱实体集中依赖于特定强实体的所有实体<br>例如sec_id、学期、年份 弱实体集的鉴别器用虚线下划线<br>弱实体集的主键由弱实体集存在依赖的强实体集的主键加上弱实体集的判别器组成 弱实体集 E1 的主键 &#x3D; 鉴别器 ∪ primary_key（E2）<br>弱实体集 E1 具有多个标识实体集 E2、E3、..、En，弱实体集 E1 的主键 &#x3D; 鉴别器 ∪ primary_key（E2） ∪…primary_key（En） .</p><h3 id="6-6-Removing-Redundant-Attributes"><a href="#6-6-Removing-Redundant-Attributes" class="headerlink" title="6.6 Removing Redundant Attributes"></a>6.6 Removing Redundant Attributes</h3><p>两个实体集存在共同属性构成关系，该属性不作为主键时的实体集中属性是冗余的需要删除。转换成表时，属性需要重新引入</p><h3 id="6-7-Reducing-E-R-Diagrams-to-Relation-Schemas"><a href="#6-7-Reducing-E-R-Diagrams-to-Relation-Schemas" class="headerlink" title="6.7 Reducing E-R Diagrams to Relation Schemas"></a>6.7 Reducing E-R Diagrams to Relation Schemas</h3><p>将 E-R 图转换为表格式是从 E-R 图派生关系数据库设计的基础<br>符合 E-R 图的数据库可以由架构&#x2F;表的集合表示<br>实体集和关系集可以统一表示为表示数据库内容的关系架构。 对于每个实体集或关系集，都有一个与实体集或关系集对应的唯一架构。 每个表都有许多列，对应于它们的属性</p><p>强实体集简化为具有相同属性的架构<br>弱实体集将变成一个表，其中包含标识强实体集的主键的列</p><h4 id="Representation-of-Entity-Sets-with-Multivalued-Attributes"><a href="#Representation-of-Entity-Sets-with-Multivalued-Attributes" class="headerlink" title="Representation of Entity Sets with Multivalued Attributes"></a>Representation of Entity Sets with Multivalued Attributes</h4><p>实体 E 的多值属性 M 由单独的架构 EM 表示<br>架构 EM 具有与 E 的主键对应的属性和对应于多值属性 M 的属性</p><h4 id="Representing-Relationship-Sets"><a href="#Representing-Relationship-Sets" class="headerlink" title="Representing Relationship Sets"></a>Representing Relationship Sets</h4><p>将关系集简化为表在很大程度上依赖于映射基数约束和总&#x2F;部分约束<br>多对多关系集表示为一个表，其中包含两个参与实体集的主键的列，以及关系集的任何描述性属性<br>可以通过向多端添加一个额外的属性来表示在多端上合计的多对一和一对多关系集，其中包含一端的主键</p><p>该关系被简化为一个独立的表，以避免表中的空值</p><p>对于一对一关系集，可以选择任何一方作为多方 可以将额外的属性添加到与两个实体集对应的任一表中</p><h3 id="6-8-Extended-E-R-Features"><a href="#6-8-Extended-E-R-Features" class="headerlink" title="6.8 Extended E-R Features"></a>6.8 Extended E-R Features</h3><p>面向对象 （OO） E-R ：<br>specialization （特化，特殊化，例化） generalization （概括化，泛化，普遍化） attributes inheritance （属性继承）</p><h4 id="Specialization"><a href="#Specialization" class="headerlink" title="Specialization"></a>Specialization</h4><p>自上而下的设计过程： 我们在实体集中指定有别于其他实体的子组 这些子分组成为较低级别的实体集，这些实体集具有属性或参与适用于较高级别实体集的关系<br>属性继承：较低级别的实体集继承它所链接到的较高级别实体集的所有属性和关系参与，较高级别实体的属性和关系可以应用于其所有较低级别的实体</p><h4 id="Generalization"><a href="#Generalization" class="headerlink" title="Generalization"></a>Generalization</h4><p>自下而上的设计过程<br>将多个共享相同功能的实体集组合成更高级别的实体集<br>超类和子类：对于实体集合 A 和 B，如果 A 是 B 的泛化，即 B 是 A 的特化， 则 A 是 B 的超类，B 是 A 的子类</p><h4 id="Completeness-Constraint"><a href="#Completeness-Constraint" class="headerlink" title="Completeness Constraint"></a>Completeness Constraint</h4><p>完整性约束<br>指定高级实体集中的实体是否必须至少属于泛化中的一个较低级别的实体集 </p><ul><li>total：实体必须属于较低级别的实体集之一 例如，学生泛化，所有实体必须是研究生或本科生 </li><li>partial：实体不必属于较低级别的实体集之一 例如，人员专业化 部分泛化是默认设置。<br>我们可以通过在图中添加关键字 total 并在关键字到相应的空心箭头（用于全面泛化）或空心箭头集（用于重叠泛化）来指定总泛化。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231106114347.png" alt="image.png"></li></ul><p>关于一个高级实体是否可能属于单个专业化中集的多个较低级别实体的约束,</p><ul><li>disjoint：一个高级实体只能属于一个较低级别的实体集，即 L-entity-set-1 ∩ L-entity-set-2 &#x3D; Φ </li><li>overlapping：一个高级实体可以属于多个较低级别的实体集 L-实体集-1∩L-实体集-2 ≠ Φ<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231106114410.png" alt="image.png"></li></ul><h4 id="Representing-Specialization-via-Schemas"><a href="#Representing-Specialization-via-Schemas" class="headerlink" title="Representing Specialization via Schemas"></a>Representing Specialization via Schemas</h4><ol><li>形成更高级别实体的架构 为每个较低级别的实体集形成一个架构，包括较高级别实体集的主键和本地属性<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231106114529.png" alt="image.png"></li><li>为每个实体集形成一个架构，其中包含所有本地属性和继承属性<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231106114548.png" alt="image.png"></li><li>如果泛化&#x2F;特殊化是不相交的且完整的，则创建两个表</li></ol><h4 id="Aggregation"><a href="#Aggregation" class="headerlink" title="Aggregation"></a>Aggregation</h4><p>通过聚合消除冗余<br>将关系视为抽象实体<br>允许关系之间的关系<br>将关系抽象为新实体</p><h3 id="6-9-Entity-relationship-Design-Issues"><a href="#6-9-Entity-relationship-Design-Issues" class="headerlink" title="6.9 Entity-relationship Design Issues"></a>6.9 Entity-relationship Design Issues</h3><p>E-R 图中的常见错误 </p><ul><li>实体与属性的使用 </li><li>实体集与关系集的使用 </li><li>二元关系与非二元关系</li></ul><p>规则1.不要将一个实体集的主键用作另一个实体集的属性（为了表示这两个实体集之间的隐式关联），最好使用关系集来显式显示这种关联<br>规则2.如果 E 参与 R，则不要将主键 （E） 指定为 R 的属性，以避免信息冗余<br>规则3.可能的准则是指定一个关系集来描述实体之间发生的操作<br>规则4.首选使用二元关系集，用多个二元关系集替换非二元关系集 尽管可以用许多不同的二元关系集替换任何非二元关系集（n-ary，对于 n &gt; 2）关系集，但 n 元关系集显示得更清楚。 一些看似非二元关系的关系可能使用二元关系来更好地表示。但有些关系天生是非二元的</p><p>通常，任何非二元关系都可以通过创建人工实体集 E 来使用二元关系来表示</p><h4 id="Placement-of-Relationship-Attributes"><a href="#Placement-of-Relationship-Attributes" class="headerlink" title="Placement of Relationship Attributes"></a>Placement of Relationship Attributes</h4><p>关系集 R 的属性可能与其参与实体集之一相关联<br>对于关系集 R 之间的属性 attr-A （R ⊆ E1 ╳ E2 ），如果 R 的基数为<br>一对一：attr-A 可以指定为 E1 或 E2 的属性，而不是关系集 R 从 E1 到 E2 的<br>一对多：attr-A 只能指定为实体集 E2（多边）的属性，而不是关系集 R 的属性</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关系型数据库设计：模式规范化</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%EF%BC%9A%E6%A8%A1%E5%BC%8F%E8%A7%84%E8%8C%83%E5%8C%96/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%EF%BC%9A%E6%A8%A1%E5%BC%8F%E8%A7%84%E8%8C%83%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="7-1-Good-Relational-DB-Design"><a href="#7-1-Good-Relational-DB-Design" class="headerlink" title="7.1 Good Relational DB Design"></a>7.1 Good Relational DB Design</h3><p>逻辑数据库设计包括:</p><ul><li>初始关系架构生成</li><li>关系架构规范化</li></ul><h4 id="Lossless-Decomposition无损分解"><a href="#Lossless-Decomposition无损分解" class="headerlink" title="Lossless Decomposition无损分解"></a>Lossless Decomposition无损分解</h4><p>Def：设 R 为关系模式，R1 和 R2 构成 R 的分解。 即 R &#x3D; R1 U R2<br>Def：分解是<strong>无损分解</strong>，如果将模式 R 替换为两个关系模式 R1 U R2 没有丢失信息</p><h4 id="Normalization-Principles归一化原则"><a href="#Normalization-Principles归一化原则" class="headerlink" title="Normalization Principles归一化原则"></a>Normalization Principles归一化原则</h4><p>在DBS逻辑设计过程中，将E-R图转换，得到面向应用领域的初始关系模式集<br><strong>初始关系模式集</strong>存在关系模式属性间的<strong>数据依赖 (Data Dependence) 关系</strong></p><ul><li><strong>函数依赖</strong> (functional  dependencies,  FD)</li><li><strong>多值依赖</strong> (Mutivalued Dependencies,  MVD)</li><li><strong>连接依赖</strong> (Join Dependencies, JD)</li></ul><p>直接根据初始关系模式构造DBS，由于初始关系模式中数据依赖关系的存在，  可能会违反DB的完整性约束，导致DBS使用的正确性、性能、效率受到影响</p><ul><li>数据冗余问题 pitfalls</li><li>插入问题 pitfalls</li><li>更新问题 pitfalls</li><li>删除问题 pitfalls</li></ul><p>等价变换&#x2F;模式分解: 对初始关系模式集，保证关系模式的：</p><ul><li>函数无损连接性（lossless join)，</li><li>函数依赖保持性  (dependency preservation)</li></ul><p>关系模式集需要规范化处理——等价变换&#x2F;模式分解</p><p>关系模式规范化主要步骤为：</p><ul><li>根据函数依赖的Armstrong’s 公理系统和多值依赖的公理系统，从初始关系模式集中已知的函数依赖和多值依赖出发，推导出初始关系模式集中所有的函数依赖和多值依赖</li><li>对具有函数依赖和多值依赖的初始关系模式集，采用<strong>模式分解算法</strong>，对其进行（等价）分解和变换，将其转换为各种范式形式，包括：1NF、 2NF、 BCNF、 3NF、 4NF、5NF，以消除函数依赖和多值依赖的负面影响, 保证数据库完整性<br><a href="https://zhuanlan.zhihu.com/p/554101160#:~:text=%E8%8C%83%E5%BC%8F%EF%BC%88Paradigm%EF%BC%89%E6%98%AF%E7%AC%A6%E5%90%88%E6%9F%90%E4%B8%80%E7%A7%8D%E7%BA%A7%E5%88%AB%E7%9A%84%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F%E7%9A%84%E9%9B%86%E5%90%88%E3%80%82%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E5%85%B3%E7%B3%BB%E5%BF%85%E9%A1%BB%E6%BB%A1%E8%B6%B3%E4%B8%80%E5%AE%9A%E7%9A%84%E8%A6%81%E6%B1%82%EF%BC%8C%E6%BB%A1%E8%B6%B3%E4%B8%8D%E5%90%8C%E7%A8%8B%E5%BA%A6%E8%A6%81%E6%B1%82%E7%9A%84%E4%B8%BA%E4%B8%8D%E5%90%8C%E8%8C%83%E5%BC%8F%E3%80%82,%E7%9B%AE%E5%89%8D%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%89%E5%85%AD%E7%A7%8D%E8%8C%83%E5%BC%8F%EF%BC%9A%E7%AC%AC%E4%B8%80%E8%8C%83%E5%BC%8F%EF%BC%881NF%EF%BC%89%E3%80%81%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F%EF%BC%882NF%EF%BC%89%E3%80%81%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F%EF%BC%883NF%EF%BC%89%E3%80%81Boyce-Codd%E8%8C%83%E5%BC%8F%EF%BC%88BCNF%EF%BC%89%E3%80%81%E7%AC%AC%E5%9B%9B%E8%8C%83%E5%BC%8F%EF%BC%884NF%EF%BC%89%E5%92%8C%E7%AC%AC%E4%BA%94%E8%8C%83%E5%BC%8F%EF%BC%885NF%EF%BC%89%E3%80%82%20%E6%BB%A1%E8%B6%B3%E6%9C%80%E4%BD%8E%E8%A6%81%E6%B1%82%E7%9A%84%E8%8C%83%E5%BC%8F%E6%98%AF%E7%AC%AC%E4%B8%80%E8%8C%83%E5%BC%8F%EF%BC%881NF%EF%BC%89%E3%80%82%20%E5%9C%A8%E7%AC%AC%E4%B8%80%E8%8C%83%E5%BC%8F%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E8%BF%9B%E4%B8%80%E6%AD%A5%E6%BB%A1%E8%B6%B3%E6%9B%B4%E5%A4%9A%E8%A6%81%E6%B1%82%E7%9A%84%E7%A7%B0%E4%B8%BA%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F%EF%BC%882NF%EF%BC%89%EF%BC%8C%E5%85%B6%E4%BD%99%E8%8C%83%E5%BC%8F%E4%BB%A5%E6%AC%A1%E7%B1%BB%E6%8E%A8%E3%80%82">第一范式、第二范式、第三范式 - 知乎</a></li></ul><p>关系模式规范化处理的<strong>基本要求</strong>为: </p><ul><li>静态关系具有第一范式形式 </li><li>动态关系最好具有3NF或BCNF形式</li></ul><p>3种数据依赖间的关系 ：</p><ul><li>函数依赖是特殊的多值依赖 </li><li>多值依赖又是连接依赖的特例<br>范式1NF、2NF、3NF、BCNF可以看作由符合范式要求的各种关系模式组成的关系模式的集合<br>e.g. 1NF &#x3D; { R | R 满足第一范式的定义}<br>范式间的关系：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231115120558.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231115120646.png" alt="image.png"></li></ul><p>给定关系模式，可以采用规范化算法将其转换为1NF、2NF、3NF、BCNF</p><p>对连接依赖和第五范式，无相应的模式规范化算法</p><h4 id="Normalization-Theory归一化理论"><a href="#Normalization-Theory归一化理论" class="headerlink" title="Normalization Theory归一化理论"></a>Normalization Theory归一化理论</h4><p>确定特定关系 R 是否处于良好形式（范式）<br>关系 R 的形式不好，分解为关系 {R1 R2 …Rn} 使得 </p><ul><li>每个关系都处于良好状态 </li><li>分解是无损连接分解</li></ul><h4 id="Functional-Dependencies功能依赖关系"><a href="#Functional-Dependencies功能依赖关系" class="headerlink" title="Functional Dependencies功能依赖关系"></a>Functional Dependencies功能依赖关系</h4><p>数据通常存在（完整性）约束（规则）<br>例如，预期成立的约束：<br>学生和教师通过其 ID 进行唯一标识。<br>每个学生和教师只有一个名字。<br>每个教师和学生只与一个部门相关联。<br>每个部门只有一个预算值，并且只有一个关联的建筑物</p><p>Def：满足所有此类现实世界约束的关系实例称为<strong>关系的合法实例</strong><br>Def：<strong>功能依赖</strong>:<br>对法律关系的约束询问<br>一组特定属性的值唯一地决定了另一组属性的值<br>函数依赖关系是键概念的泛化<br>函数： f： X→Y， x∈X， y∈Y， y &#x3D; f（x）<br>对于 x1，x2∈X，如果 x1&#x3D;x2，则 f（x1）&#x3D; f（x2)</p><h4 id="Relation-Instance-Satisfy-Functional-Dependency"><a href="#Relation-Instance-Satisfy-Functional-Dependency" class="headerlink" title="Relation Instance Satisfy Functional Dependency"></a>Relation Instance Satisfy Functional Dependency</h4><p>对于关系模式R，$\alpha$⊆ R，$\beta$⊆ R,满足函数依赖关系$\alpha$→$\beta$<br>对于元组 ti 和 tj ∈r（R） 对，使得 $t_i[\alpha]&#x3D; t_j [\alpha ]$，也是 $t_i[\beta]&#x3D; t_j [\beta]$ 的情况</p><h4 id="Functional-Dependency-Holds-on-Schema-r-R-功能依赖关系保留在架构-r（R）-上"><a href="#Functional-Dependency-Holds-on-Schema-r-R-功能依赖关系保留在架构-r（R）-上" class="headerlink" title="Functional Dependency Holds on Schema r(R)功能依赖关系保留在架构 r（R） 上"></a>Functional Dependency Holds on Schema r(R)功能依赖关系保留在架构 r（R） 上</h4><p>Def：让 R 成为关系架构 $\alpha \subseteq R$ and $\beta \subseteq R$，如果每个实例 r（R） 都满足$\alpha$→$\beta$，函数依赖FD在关系模式R上成立&#x2F;保持$\alpha$→$\beta$，每当两个元组 t1 和 t2 在属性$\alpha$上达成一致时，也就在$\beta$属性达成一致</p><h4 id="FD-holds-on-R-vs-FD-is-satisfied-by-r-R-FD-保持-R-与-FD-满足-r（R）"><a href="#FD-holds-on-R-vs-FD-is-satisfied-by-r-R-FD-保持-R-与-FD-满足-r（R）" class="headerlink" title="FD holds on R  vs  FD is satisfied by r(R)FD 保持 R 与 FD 满足 r（R）"></a>FD holds on R  vs  FD is satisfied by r(R)FD 保持 R 与 FD 满足 r（R）</h4><p>在 R 上定义可能有多个关系实例 r（R），即$r_1（R） ， r_2（R） ， r_3（R） ,…, r_m（R）$<br>定义：关系 r（R） 满足$\alpha$→$\beta$与$\alpha$→$\beta$保留架构 R<br>如果$\alpha$→$\beta$在 R 上成立，则每个合法 r（R） 都满足此 R<br>但是对于模式 R，如果只有一些 ri（R） 满足 R，则$\alpha$→$\beta$可能不会对 R 成立。</p><p>FD holds on R:<br>定义在R的属性间的语义约束，或R的属性间体现出的语义约束<br>从设计角度，R应满足的约束</p><p>FD is satisfied by r(R):<br>根据 R构造的实际数据 r(R) 是否满足语义约束FD</p><h4 id="Keys-and-Functional-Dependencies"><a href="#Keys-and-Functional-Dependencies" class="headerlink" title="Keys and Functional Dependencies"></a>Keys and Functional Dependencies</h4><p>Def：K 是关系架构 R 的超键，当且仅当 K → R<br>定义：K 是 R 的候选键，当且仅当 K → R 且 没有 $\alpha \subset$K、$\alpha$→R<br>DF 允许我们表达无法用超级键表达的约束。</p><h4 id="Use-of-Functional-Dependencies"><a href="#Use-of-Functional-Dependencies" class="headerlink" title="Use of Functional Dependencies"></a>Use of Functional Dependencies</h4><p>我们使用 FD 来 测试关系，看看它们是否合法。 如果关系 r 在 FD 集合 F 下是合法的，我们说 r 满足 F<br>指定对法律关系集的约束 如果 R 上的所有法律关系都满足 FD 集 F，则 F 对 R 成立。<br>注意：关系模式的特定实例可能满足 F 中的 FD，即使 FD 不持有所有法律实例</p><h4 id="Trivial-平凡-Functional-Dependencies"><a href="#Trivial-平凡-Functional-Dependencies" class="headerlink" title="Trivial (平凡) Functional Dependencies"></a>Trivial (平凡) Functional Dependencies</h4><p>如果一个关系的所有实例都满足函数依赖关系，那么它就是平凡的</p><h4 id="Transitive-传递-dependency"><a href="#Transitive-传递-dependency" class="headerlink" title="Transitive (传递) dependency"></a>Transitive (传递) dependency</h4><p>$\alpha$→$\beta$但不满足$\beta$→$\alpha$，满足$\beta$→$\gamma$, 但$\gamma$ 不在$\alpha$内，则称$\alpha$→$\gamma$满足传递依赖关系</p><h4 id="Partial-部分-Dependency"><a href="#Partial-部分-Dependency" class="headerlink" title="Partial (部分) Dependency"></a>Partial (部分) Dependency</h4><p>y是a的子集，y→b，a→b为部份依赖</p><h4 id="Closure-of-functional-dependency-set-F"><a href="#Closure-of-functional-dependency-set-F" class="headerlink" title="Closure of functional dependency set $F^+$"></a>Closure of functional dependency set $F^+$</h4><p>给定 FD 集 F 可以推断的所有 FD 的集合<br>$F^+$包含 F 中的所有功能依赖项</p><h4 id="Lossless-Decomposition无损分解-1"><a href="#Lossless-Decomposition无损分解-1" class="headerlink" title="Lossless Decomposition无损分解"></a>Lossless Decomposition无损分解</h4><p>如果至少有如下一个依赖项位于 F+ 中，则将 R 分解为 R1 和 R2 是无损的：<br>R1 $\cap$R2 →R1<br>R1$\cap$ R2→ R2</p><h3 id="7-3-Normal-Forms"><a href="#7-3-Normal-Forms" class="headerlink" title="7.3 Normal Forms"></a>7.3 Normal Forms</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231119232132.png" alt="image.png"><br>1NF：第一范式<br>2NF：第二范式<br>BCNF：Boyce-Codd 范式<br>3NF：第三范式</p><h4 id="Atomic-Domains-and-First-Normal-Form原子域和第一范式"><a href="#Atomic-Domains-and-First-Normal-Form原子域和第一范式" class="headerlink" title="Atomic Domains and First Normal Form原子域和第一范式"></a>Atomic Domains and First Normal Form原子域和第一范式</h4><p>如果域的元素是不可分割的单元，则域是原子的<br>如果 R 的所有属性的域都是原子的，则关系架构 R 采用第一范式<br>原子性实际上是如何使用域元素的一个属性</p><h4 id="Second-Normal-Form"><a href="#Second-Normal-Form" class="headerlink" title="Second Normal Form"></a>Second Normal Form</h4><p>关系模式 R 相对于 DF 集 F 在 2NF 中，如果<br>R 在 1NF 中，并且<br>每个属性 A 都满足其中一个条件：</p><ul><li>它出现在候选键中，即它是一个素数属性 &#x2F;&#x2F; A 是主属性 </li><li>它（不是部分）依赖于候选密钥 A是非主属性,完全依赖于候选键</li></ul><h4 id="Boyce-Codd-Normal-Form-BCNF"><a href="#Boyce-Codd-Normal-Form-BCNF" class="headerlink" title="Boyce-Codd Normal Form, BCNF"></a>Boyce-Codd Normal Form, BCNF</h4><p>Def：关系架构 R 在 BCNF 中相对于 FD 集 F<br>如果对于 F+ 形式的所有功能依赖关系a→b，a、b属于R，且a→b是传递关系或a是超键</p><h4 id="Decomposing-a-Schema-into-BCNF将架构分解为-BCNF"><a href="#Decomposing-a-Schema-into-BCNF将架构分解为-BCNF" class="headerlink" title="Decomposing a Schema into BCNF将架构分解为 BCNF"></a>Decomposing a Schema into BCNF将架构分解为 BCNF</h4><p>设 R 为不在 BCNF 中的架构 R。 让$\alpha$→$\beta$违反 BCNF<br>我们将 R 分解为<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231119232656.png" alt="image.png"></p><h4 id="Dependency-Preservation依赖关系保留"><a href="#Dependency-Preservation依赖关系保留" class="headerlink" title="Dependency Preservation依赖关系保留"></a>Dependency Preservation依赖关系保留</h4><p>对于架构 R，F 是在 R 上的功能依赖，并分解 R 的 {R1， R2,.., Rn}，F 对 Ri 的限制，表示为 Fi，定义为<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231127100613.png" alt="image.png"><br>如果满足<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231127100633.png" alt="image.png"><br>则分解是依赖保留关系</p><p>由于限制中的所有 FD 都只涉及一个关系模式的属性，因此我们通过仅检查一个关系来测试这种依赖关系。<br>注意：限制的定义使用 F+ 中的所有依赖项，而不仅仅是 F 中的依赖项。<br>注意：限制集 F1、F2 、..，Fn 是可以有效检查的 FD 集合。</p><h3 id="7-5-Algorithms-for-Decomposition-Using-FD"><a href="#7-5-Algorithms-for-Decomposition-Using-FD" class="headerlink" title="7.5 Algorithms for Decomposition Using FD"></a>7.5 Algorithms for Decomposition Using FD</h3><ol><li>Testing for BCNF</li><li>Testing Decomposition for BCNF</li><li>BCNF decomposition algorithm</li><li>Testing for 3NF</li><li>3NF decomposition algorithm</li><li>Comparison of BCNF and 3NF</li></ol><p>简化测试：要检查关系架构 R 是否在 BCNF 中，只需检查 F 中的 FD 是否违反 BCNF 就足够了，而不是检查 F+ 中的所有 FD。 如果 F 中没有任何依赖项导致违反 BCNF，则 F+ 中的任何依赖项都不会导致违反 BCNF</p><h4 id="Testing-Decomposition-for-BCNF"><a href="#Testing-Decomposition-for-BCNF" class="headerlink" title="Testing Decomposition for BCNF"></a>Testing Decomposition for BCNF</h4>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据储存结构</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%82%A8%E5%AD%98%E7%BB%93%E6%9E%84/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%82%A8%E5%AD%98%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="13-1-Introduction"><a href="#13-1-Introduction" class="headerlink" title="13.1 Introduction"></a>13.1 Introduction</h3><p>物理数据库中解决的两个问题：</p><ul><li>数据组织，即数据的物理存储结构 — Ch13 </li><li>数据访问，例如索引 — Ch14</li></ul><p>目标</p><ul><li><ol><li>根据DBMS机制，选择合适的数据库物理结构</li></ol></li><li><ol start="2"><li>在数据库表上合理设置索引，提高数据查询速度</li></ol></li></ul><h3 id="13-2-File-Organization"><a href="#13-2-File-Organization" class="headerlink" title="13.2 File Organization"></a>13.2 File Organization</h3><p>文件逻辑&#x2F;物理组织 in Operating System Concepts</p><ul><li>逻辑结构</li><li>基于记录的文件</li><li>基于索引的文件（按内容访问）</li></ul><p>物理组织&#x2F;结构</p><ul><li>contiguous, linked, indexed</li><li>以block为单位，存储 在secondary storage, i.e. disk, SSD</li></ul><p>DB 存储为 DB 文件的集合 </p><ul><li>例如.SQL服务器，主文件，辅文件，日志文件 </li><li>每个文件都是一系列记录 </li><li>每条记录都位于一系列字段中<br>一种方法<br>  记录大小是固定的<br>  每个文件仅包含一种特定类型的记录<br>  不同的文件用于不同的关系</li></ul><p>每个文件都是记录序列，每个关系表是一组元组，以元组为单位的DB逻辑文件<br>在以记录为单位的物理文件<br>元组作为记录存储在数据库中<br>将元组表示为文件中的记录<br>    固定长度记录<br>    可变长度记录<br>    例如，名称 varchar（20）</p><h4 id="Fixed-Length-Records-固定长度记录"><a href="#Fixed-Length-Records-固定长度记录" class="headerlink" title="Fixed-Length Records 固定长度记录"></a>Fixed-Length Records 固定长度记录</h4><p>一个块包含多条记录<br>存储记录 i 从字节 n （i – 1） 开始，其中 n 是每条记录的大小。<br>记录访问很简单，但记录可能会跨块<br>修改： 不允许记录跨越块边界</p><p>删除记录 i： 备选方案：<br>    压缩：将记录 i + 1， . . .， n 移动到 i， . . . . ， n – 1<br>    将记录 N 移动到 I<br>    不要移动记录，而是将所有空闲记录链接在空表</p><h4 id="Free-Lists"><a href="#Free-Lists" class="headerlink" title="Free Lists"></a>Free Lists</h4><p>将第一条已删除记录的地址存储在文件头中<br>使用此第一个删除的记录来存储第二个已删除记录的地址，依此类推<br>将这些存储的地址视为指针，因为它们指向记录的位置。<br>更节省空间的表示形式<br>将空间重新用于可用记录的正常属性以存储指针。（使用中的记录中没有存储指针。）</p><h4 id="Variable-Length-Records-可变长度记录"><a href="#Variable-Length-Records-可变长度记录" class="headerlink" title="Variable-Length Records 可变长度记录"></a>Variable-Length Records 可变长度记录</h4><p>可变长度记录以多种方式出现<br>记录类型允许可变长度，例如字符串 （varchar）<br>一个文件中有多种记录类型，例如多表聚类文件<br>记录类型允许重复字段，例如多值属性。</p><h4 id="如何在块中存储可变长度记录"><a href="#如何在块中存储可变长度记录" class="headerlink" title="如何在块中存储可变长度记录"></a>如何在块中存储可变长度记录</h4><p>记录中的属性按顺序存储<br>首先是固定长度属性，然后是可变长度属性<br>可变长度属性由固定大小（偏移量、长度）表示，实际数据存储在所有固定长度属性之后<br>由 null 值位图表示的 Null 值</p><h4 id="Variable-Length-Records-Slotted-Page-Structure可变长度记录：开槽页面结构"><a href="#Variable-Length-Records-Slotted-Page-Structure可变长度记录：开槽页面结构" class="headerlink" title="Variable-Length Records: Slotted Page Structure可变长度记录：开槽页面结构"></a>Variable-Length Records: Slotted Page Structure可变长度记录：开槽页面结构</h4><p>存储空间分为固定大小的开槽页，4KB或8KB，记录分配给开槽页<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231203174823.png" alt="image.png"><br>记录可以在页面中移动以保持连续<br>RI 被删除，RI+3、RI+2、RI+1 被移动到删除创建的可用空间<br>标头中的条目必须更新，例如设置为 -1 指针不应直接指向记录，而应指向标头中记录的条目<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231203174849.png" alt="image.png"></p><h3 id="13-3-Organization-of-Records-in-Files"><a href="#13-3-Organization-of-Records-in-Files" class="headerlink" title="13.3 Organization of Records in Files"></a>13.3 Organization of Records in Files</h3><p>DB文件可以看作是逻辑级别的一组记录，这些记录在逻辑上组织如下<br>    堆、序列、哈希、聚类<br>    记录的逻辑组织决定了如何访问记录，即访问方法<br>文件包括多个记录，记录在磁盘上的存放属于文件（记录）结构问题<br>对于某种结构的文件如何去查找、插入、删除记录，属于文件的存取方法<br>文件记录的组织结构决定了文件的存取方法</p><p>堆 – 放置在任何有空间的地方的记录<br>    没有主键和索引的表中的数据，<br>    例如，学生（ID、姓名、总学分）<br>序列 – 根据每条记录的搜索键按顺序存储的记录<br>    例如学生（ID、姓名、总学分）， 或学生（ID、姓名、总学分），并附有姓名索引<br>    每个关系的记录可以存储在单独的文件中<br>多表聚类 – 存储在同一文件中的不同关系的记录<br>    动机：将相关记录存储在同一个块上，以最大程度地减少 I&#x2F;O，<br>    例如 讲师加入部门，讲师和部门的记录放在一个文件中</p><h4 id="Heap-File-Organization堆文件组织"><a href="#Heap-File-Organization堆文件组织" class="headerlink" title="Heap File Organization堆文件组织"></a>Heap File Organization堆文件组织</h4><p>任何记录都可以放置在文件中有记录空间的任何位置<br>没有记录的顺序<br>记录在分配后通常不会移动<br>关系只有一个文件</p><p>以纪录的输入顺序为序，决定了文件中记录顺序<br>    纪录的存储顺序与记录中的主键无关<br>e.g. 创建新关系表student (ID, name, total-credits)，    但不在student上定义主键、候选键、各类索引，student被组织为heap file<br>通过insert，将记录&#x2F;元组加到堆文件中</p><p>自由空间地图<br>    每个区块一个条目。<br>    每个条目都是几位到一个字节，记录空闲块的部分<br>    例如，每个块 3 位 （0-7），值除以 8 表示可用块的分数<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231203175205.png" alt="image.png"><br>二级自由空间地图<br>    例如，每个条目最多存储 4 个第一级自由空间映射条目<br>定期写入磁盘的可用空间映射，可以对某些条目使用错误（旧）值（将被检测并修复）</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>成绩：20期中+60期末+10笔记+10作业</p><p>笔记本：一周交一次</p><hr><h2 id="9-11"><a href="#9-11" class="headerlink" title="9.11"></a>9.11</h2><p><strong>concept:</strong></p><ul><li>database(DB):数据库，是一个文件，有关联的数据的集合</li><li>database management system(DBMS):数据库管理系统，包含程序处理DB中的数据</li><li>database system(DBS):&#x3D;DB+DBMS+User</li><li>database application system(DBAS):DB+DBMS+Application programs+User</li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231225191039.png" alt="image.png"><br>第一章：选择题和判断题</p><p>第二章关系代数：选择和判断，一道大题</p><p>第三章：选择、判断、大题</p><p>第五章：动态和嵌入式sql</p><p>第七章：看例题，掌握各种范式的分解</p><p>十六章：画优化树</p><p>十七章：选择和判断</p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231225205235.png" alt="image.png"></p><p>三个概念：</p><ol><li>完整性约束和视图</li><li>索引的基本概念</li><li>事务的基本概念</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240103212431.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240103212432.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240103225448.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>智能计算系统</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>50期末+30课程编程作业+10大作业+10平时</p><hr><p>智能计算系统：智能的物质载体</p><ul><li>集成CPU和智能芯片的<strong>异构系统</strong></li><li>面向开发者的智能计算<strong>编程环境</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>智能计算系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>智能计算系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="卷积神经网络（CNN）"><a href="#卷积神经网络（CNN）" class="headerlink" title="卷积神经网络（CNN）"></a>卷积神经网络（CNN）</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019081247.png" alt="image.png"></p><ul><li>局部连接：一个像素与它周围的几个像素有很强的联系，但是与离它很远的像素联系可能很弱</li><li>权重共享：卷积神经网络中，权重又称为卷积模板，用于表达一种图像的特征。在图像的不同位置找特征，可以使用一样的卷积模板</li></ul><h3 id="CNN组成："><a href="#CNN组成：" class="headerlink" title="CNN组成："></a>CNN组成：</h3><ul><li>卷积层</li><li>池化层</li><li>全连接层</li><li>Softmax</li></ul><h4 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019082709.png" alt="image.png"></p><p>边界扩充（padding）</p><ul><li>扩大图像的尺寸并填充像素</li><li>防止深度网络中图像被动持续减小</li><li>强化图像边缘信息<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019084544.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231019084557.png" alt="image.png"></li></ul><h4 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h4><p>Max Pooling &#x2F; Avg Pooling &#x2F; L2 Pooling<br>提取卷积核中的最大值&#x2F;平均值&#x2F;L2范数</p><ul><li>主动减小图片尺寸，从而减少参数的数量和计算量，控制过拟合</li><li>不引入额外参数</li></ul><h4 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h4><ul><li>卷积层和池化层构成特征提取器，全连接层则为分类器</li><li>将特征提取得到的高维特征图映射成一维特征向量，该特征向量包含 所有特征信息，可转化为各个类别的概率。</li></ul><h4 id="softmax"><a href="#softmax" class="headerlink" title="softmax"></a>softmax</h4><ul><li>通常作为网络的最后一层，对输出进行归一化，输出分类概率</li><li>凸显其中最大的值并抑制远低于最大值的其他分量</li><li>Softmax层输入、输出数据规模相同</li></ul><h3 id="序列模型：循环神经网络"><a href="#序列模型：循环神经网络" class="headerlink" title="序列模型：循环神经网络"></a>序列模型：循环神经网络</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231031164605.png" alt="image.png"></p><ul><li>时序sequence：RNN能建模序列数据，序列指的是前、后输入数据( 𝒙 (𝑡) ， 𝒙 (𝑡+1) )不独立，相互影响； </li><li>循环recurrent：对每个输入的操作都是一样的，循环往复地重复这些相 同操作，每时刻有相同参数W和U（参数共享）；</li><li>记忆memory： 隐藏层𝒉 (𝑡)中捕捉了所有时刻t之前的信息，理论上𝒉 (𝑡)记 忆的内容可以无限长，然而实际上记忆还是有限的；</li></ul><h4 id="正向计算过程"><a href="#正向计算过程" class="headerlink" title="正向计算过程"></a>正向计算过程</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231031165458.png" alt="image.png"></p><h4 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231031165539.png" alt="image.png"></p><h4 id="RNN的梯度爆炸和梯度消失"><a href="#RNN的梯度爆炸和梯度消失" class="headerlink" title="RNN的梯度爆炸和梯度消失"></a>RNN的梯度爆炸和梯度消失</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231031165725.png" alt="image.png"><br>由于梯度爆炸或消失的存在，循环神经网络实际上只能学习到短期的依赖关系，无法处理长期依赖关系</p><p>改进梯度爆炸：梯度截断<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231031170209.png" alt="image.png"></p><h3 id="长短期记忆模型（LSTM）"><a href="#长短期记忆模型（LSTM）" class="headerlink" title="长短期记忆模型（LSTM）"></a>长短期记忆模型（LSTM）</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231031170726.png" alt="image.png"></p><ul><li>隐藏状态：作为神经网络的记忆，保存着网络先前观察到的数据信息。</li><li>单元状态：类似信息传送带，它贯穿整个链条，只有一些小的线性相互作用；这很容 易让信息以不变的方式向下流动；LSTM有能力向单元状态中移除或添加信息，这种管理结构称为门限</li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231031170856.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231031170929.png" alt="image.png"></p><h4 id="变体"><a href="#变体" class="headerlink" title="变体"></a>变体</h4><h5 id="窥视孔连接"><a href="#窥视孔连接" class="headerlink" title="窥视孔连接"></a>窥视孔连接</h5><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231031171128.png" alt="image.png"></p><h5 id="耦合输入门和遗忘门"><a href="#耦合输入门和遗忘门" class="headerlink" title="耦合输入门和遗忘门"></a>耦合输入门和遗忘门</h5><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231031171150.png" alt="image.png"></p><h5 id="GRU"><a href="#GRU" class="headerlink" title="GRU"></a>GRU</h5><p>在LSTM的基础上，将单元状态和隐藏状态合并，将遗忘门和输入门合并为更新门，无输出门。更新门决定历史信息和当前信息如何相加；重置门决定保留多少历史信息进入当前信息<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231031171221.png" alt="image.png"></p><h5 id="LSTM与GRU"><a href="#LSTM与GRU" class="headerlink" title="LSTM与GRU"></a>LSTM与GRU</h5><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231031171330.png" alt="image.png"><br>GRU参数量更少，训练速度快；在训练数据足够的情况下，LSTM的表征能力更强。</p><h3 id="生成对抗网络（GAN）"><a href="#生成对抗网络（GAN）" class="headerlink" title="生成对抗网络（GAN）"></a>生成对抗网络（GAN）</h3><p>损失函数通过学习得到，网络学习到的是数据的分布<br>模型由两部分组成：</p><ul><li>生成器（伪装者）：找出观测数据内部的统计规律，尽可能生成 能够以假乱真的样本，使判别网络输出接近0.5，难以区分真假。</li><li>判别器（警察）：判断输入数据是来自真实样本集还是生成样本 集。如果输入是真样本，输出接近1；如果输入是生成样本，输出接近0。</li></ul><h4 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231031173437.png" alt="image.png"></p><p>更新k次判别器后更新一次生成器<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231031174016.png" alt="image.png"></p><p>解决梯度消失问题：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231031174326.png" alt="image.png"></p><h4 id="模式崩溃（model-collapse）"><a href="#模式崩溃（model-collapse）" class="headerlink" title="模式崩溃（model collapse）"></a>模式崩溃（model collapse）</h4><p>产生原因： GAN的损失函数使判别器假样本的惩罚是巨大的，一旦生成的某一类 假样本成功骗过判别器，生成器就趋向于生成相似的样本，导致生成样本缺乏多样性<br>应对方法（WGAN）：采用更加平滑的损失函数，参见Wasserstein GAN</p><h4 id="GAN结构变种"><a href="#GAN结构变种" class="headerlink" title="GAN结构变种"></a>GAN结构变种</h4><p>卷积GAN</p><ul><li>DCGAN：将GAN中全连接神经网络扩展到卷积神经网络</li><li>ResGAN：图像恢复，ResNet</li><li>SRGAN：超分辨率，ResNet</li><li>CycleGAN：图像转换<br>条件GAN</li><li>CGAN</li><li>InfoGAN<br>集成推断模型的GAN</li><li>BiGAN<br>对抗自编码器</li><li>VAE-GAN</li></ul><h3 id="图像风格迁移"><a href="#图像风格迁移" class="headerlink" title="图像风格迁移"></a>图像风格迁移</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231109080759.png" alt="image.png"><br>给定一张风格图像 a 和一张内容图像 p:</p><ul><li>风格图像 a 经过 CNN 生成的 feature maps 组成风格特征集A</li><li>内容图像 p 通过 CNN 生成的 feature maps 组成内容特征集P</li><li>输入一张随机噪声图像 x，随机噪声图像 x 通过 CNN 生成的 feature maps 构 成内容特征和风格特征集合 F和 G ，目标损失函数由 A, P, F ,G 计算得到</li><li>优化函数是希望调整图像 x，使其最后看起来既保持内容图像 p的内容, 又有风 格图像 a 的风格。</li><li>CNN网络为在imageNet上训练好的VGG19， 去除了最后的全连接层和softmax</li><li>损失函数：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231109081123.png" alt="image.png"><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231109081133.png" alt="image.png"></li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>智能计算系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神经网络基础</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="线性函数拟合"><a href="#线性函数拟合" class="headerlink" title="线性函数拟合"></a>线性函数拟合</h3><p>线性回归可以找到一些点的集合背后的规律：一个点集可以用一条直线来拟合，这条拟合出来的直线的参数特征，就是线性回归找到的点集背后的规律<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230928082548.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230928082934.png" alt="image.png"></p><h3 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h3><p>感知机模型𝐻 𝒙 &#x3D; sign(𝒘_𝑇 𝒙 + 𝑏)对应一个超平面𝒘_𝑇 𝒙 + 𝑏 &#x3D; 0，模型参数是(𝒘, 𝑏)。感知机的目标是找到一个(𝒘, 𝑏)，将线性可分的数据集T中的所有的样本点正确地分为两类。<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230928084435.png" alt="image.png"><br>损失函数：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230928084551.png" alt="image.png"></p><h3 id="神经网络设计原则"><a href="#神经网络设计原则" class="headerlink" title="神经网络设计原则"></a>神经网络设计原则</h3><p>神经网络的结构一般为：输入×隐层×输出层<br>隐层的设计：</p><ul><li>隐层节点的作用是提取输入特征中的隐藏规律，每个节点都赋予一定权重</li><li>隐层节点数太少，则网络从样本中获取信息的能力就越差，无法反映数据集的规律；隐层节点数太多，则网络的拟合能力过强，可能拟合数据集中的噪声部分，导致模型泛化能力变差。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>智能计算系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第三章作业</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%B8%89%E7%AB%A0%E4%BD%9C%E4%B8%9A/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%B8%89%E7%AB%A0%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="计算AlexNet、VGG19、ResNet152三个网络中的神经元数目及可训练的参数数目"><a href="#计算AlexNet、VGG19、ResNet152三个网络中的神经元数目及可训练的参数数目" class="headerlink" title="计算AlexNet、VGG19、ResNet152三个网络中的神经元数目及可训练的参数数目"></a>计算AlexNet、VGG19、ResNet152三个网络中的神经元数目及可训练的参数数目</h3><h4 id="AlexNet"><a href="#AlexNet" class="headerlink" title="AlexNet"></a>AlexNet</h4><p><a href="https://proceedings.neurips.cc/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf">proceedings.neurips.cc&#x2F;paper&#x2F;2012&#x2F;file&#x2F;c399862d3b9d6b76c8436e924a68c45b-Paper.pdf</a><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231120165524.png" alt="image.png"></p><p>根据论文中给出的网络结构<br>AlexNet共有五层卷积层和三层全连接层<br>其中第一层卷积层有96个卷积核，3通道，大小为11×11，步长为4<br>第二层卷积层有256个卷积核，48通道，大小为5×5<br>第三次卷积层有384个卷积核，256通道，大小为3×3<br>第四层卷积层有384个卷积核，192通道，大小为3×3<br>第五层卷积层有256个卷积核，192通道，大小为3×3<br>三层全连接层的神经元数量分别为4096、4096、1000<br>神经元数目：<br>每个卷积层的神经元数目为feature map大小<br>55* 55* 96+ 27* 27* 256+ 13* 13* 384+13* 13* 384+13* 13* 256+4096+4096+1000 &#x3D; 659272<br>可训练参数数目：34848+307200+884736+663552+442368+ 6* 6* 256* 4096+4096* 4096+4096* 1000 &#x3D; 60954656</p><h4 id="VGG19"><a href="#VGG19" class="headerlink" title="VGG19"></a>VGG19</h4><p>卷积层1-2：64个3x3的卷积核<br>卷积层3-4：128个3x3的卷积核<br>卷积层5-8：256个3x3的卷积核<br>卷积层9-12：512个3x3的卷积核<br>卷积层13-16：512个3x3的卷积核<br>全连接层1：输入神经元数量为 7x7x512，输出神经元数量为 4096<br>全连接层2：输入神经元数量为 4096，输出神经元数量为 4096<br>全连接层3（输出层）：输入神经元数量为 4096，输出神经元数量为类别数（通常为1000）<br>参数数量: 3584 + 147712 + 590336 + 2360320 + 4719616 + 102764544 + 16781312 + 4097000 &#x3D; 138,357,104</p><p>总神经元数量 &#x3D; (3,161,600 * 2) + (1,605,632 * 2) + (802,816 * 4) + (401,408 * 4) + (100,352 * 4) + 4096 + 4096 + 1000 &#x3D; 64,614,528</p><h4 id="ResNet152"><a href="#ResNet152" class="headerlink" title="ResNet152"></a>ResNet152</h4><p>由于网络的参数数量过于庞大，引入torchinfo库协助计算</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> torchinfo <span class="hljs-keyword">import</span> <span class="hljs-keyword">summary</span>  <br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> models  <br>  <br>net = models.resnet152()  <br><span class="hljs-keyword">summary</span>(net, input_size=(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">224</span>, <span class="hljs-number">224</span>))<br></code></pre></td></tr></table></figure><p>得到的结果如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">==========================================================================================<br>Layer (type:depth-idx)                   Output Shape              Param #<br><span class="hljs-attribute">==========================================================================================</span><br><span class="hljs-attribute">ResNet                                   [1, 1000]                 --</span><br><span class="hljs-attribute">├─Conv2d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1-1                            [1, 64, 112, 112]         9,408</span><br><span class="hljs-attribute">├─BatchNorm2d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1-2                       [1, 64, 112, 112]         128</span><br><span class="hljs-attribute">├─ReLU</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1-3                              [1, 64, 112, 112]         --</span><br><span class="hljs-attribute">├─MaxPool2d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1-4                         [1, 64, 56, 56]           --</span><br><span class="hljs-attribute">├─Sequential</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1-5                        [1, 256, 56, 56]          --</span><br><span class="hljs-attribute">│    └─Bottleneck</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2-1                   [1, 256, 56, 56]          --</span><br><span class="hljs-attribute">│    │    └─Conv2d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-1                  [1, 64, 56, 56]           4,096</span><br><span class="hljs-attribute">│    │    └─BatchNorm2d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-2             [1, 64, 56, 56]           128</span><br><span class="hljs-attribute">│    │    └─ReLU</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-3                    [1, 64, 56, 56]           --</span><br><span class="hljs-attribute">│    │    └─Conv2d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-4                  [1, 64, 56, 56]           36,864</span><br><span class="hljs-attribute">│    │    └─BatchNorm2d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-5             [1, 64, 56, 56]           128</span><br><span class="hljs-attribute">│    │    └─ReLU</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-6                    [1, 64, 56, 56]           --</span><br><span class="hljs-attribute">│    │    └─Conv2d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-7                  [1, 256, 56, 56]          16,384</span><br><span class="hljs-attribute">│    │    └─BatchNorm2d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-8             [1, 256, 56, 56]          512</span><br><span class="hljs-attribute">│    │    └─Sequential</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-9              [1, 256, 56, 56]          16,896</span><br><span class="hljs-attribute">│    │    └─ReLU</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-10                   [1, 256, 56, 56]          --</span><br><span class="hljs-attribute">│    └─Bottleneck</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2-2                   [1, 256, 56, 56]          --</span><br><br><span class="hljs-comment"># 由于层数较多，不方便全部展示，因此在此删去了一部分</span><br><br><span class="hljs-attribute">│    │    └─Conv2d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-443                [1, 2048, 7, 7]           1,048,576</span><br><span class="hljs-attribute">│    │    └─BatchNorm2d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-444           [1, 2048, 7, 7]           4,096</span><br><span class="hljs-attribute">│    │    └─ReLU</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-445                  [1, 2048, 7, 7]           --</span><br><span class="hljs-attribute">│    └─Bottleneck</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2-50                  [1, 2048, 7, 7]           --</span><br><span class="hljs-attribute">│    │    └─Conv2d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-446                [1, 512, 7, 7]            1,048,576</span><br><span class="hljs-attribute">│    │    └─BatchNorm2d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-447           [1, 512, 7, 7]            1,024</span><br><span class="hljs-attribute">│    │    └─ReLU</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-448                  [1, 512, 7, 7]            --</span><br><span class="hljs-attribute">│    │    └─Conv2d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-449                [1, 512, 7, 7]            2,359,296</span><br><span class="hljs-attribute">│    │    └─BatchNorm2d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-450           [1, 512, 7, 7]            1,024</span><br><span class="hljs-attribute">│    │    └─ReLU</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-451                  [1, 512, 7, 7]            --</span><br><span class="hljs-attribute">│    │    └─Conv2d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-452                [1, 2048, 7, 7]           1,048,576</span><br><span class="hljs-attribute">│    │    └─BatchNorm2d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-453           [1, 2048, 7, 7]           4,096</span><br><span class="hljs-attribute">│    │    └─ReLU</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3-454                  [1, 2048, 7, 7]           --</span><br><span class="hljs-attribute">├─AdaptiveAvgPool2d</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1-9                 [1, 2048, 1, 1]           --</span><br><span class="hljs-attribute">├─Linear</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1-10                           [1, 1000]                 2,049,000</span><br><span class="hljs-attribute">==========================================================================================</span><br><span class="hljs-attribute">Total params</span><span class="hljs-punctuation">:</span> <span class="hljs-string">60,192,808</span><br><span class="hljs-attribute">Trainable params</span><span class="hljs-punctuation">:</span> <span class="hljs-string">60,192,808</span><br><span class="hljs-attribute">Non-trainable params</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0</span><br><span class="hljs-attribute">Total mult-adds (G)</span><span class="hljs-punctuation">:</span> <span class="hljs-string">11.51</span><br><span class="hljs-attribute">==========================================================================================</span><br><span class="hljs-attribute">Input size (MB)</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0.60</span><br><span class="hljs-attribute">Forward/backward pass size (MB)</span><span class="hljs-punctuation">:</span> <span class="hljs-string">360.87</span><br><span class="hljs-attribute">Params size (MB)</span><span class="hljs-punctuation">:</span> <span class="hljs-string">240.77</span><br><span class="hljs-attribute">Estimated Total Size (MB)</span><span class="hljs-punctuation">:</span> <span class="hljs-string">602.25</span><br>==========================================================================================<br><br></code></pre></td></tr></table></figure><h3 id="全连接层神经元数量计算过程："><a href="#全连接层神经元数量计算过程：" class="headerlink" title="全连接层神经元数量计算过程："></a>全连接层神经元数量计算过程：</h3><ol><li>全连接层1：4096个神经元</li><li>全连接层2：4096个神经元</li><li>全连接层3（输出层）：1000个神经元（如果用于ImageNet分类任务）</li></ol><p>现在，考虑到一些层的输出特征图大小相同，我们将每组卷积层的神经元数量乘以相应的层数，然后将所有层的神经元数量相加。</p><p>总神经元数量 &#x3D; (3,161,600 * 2) + (1,605,632 * 2) + (802,816 * 4) + (401,408 * 4) + (100,352 * 4) + 4096 + 4096 + 1000 &#x3D; 64,614,528 个神经元</p><h3 id="简述错误率与IoU、mAP的关系"><a href="#简述错误率与IoU、mAP的关系" class="headerlink" title="简述错误率与IoU、mAP的关系"></a>简述错误率与IoU、mAP的关系</h3><p>错误率是指分类或检测模型在执行特定任务时所犯的错误百分比<br>IoU即交并比，是指检测框与真实框的交集面积与并集面积之比<br>mAP中文翻译过来叫做平均精度均值，其中AP为平均精度（Average Precision），mAP是把每个类别的AP都单独拿出来，然后计算所有类别AP的平均值，代表着对检测到的目标平均精度的一个综合评价<br>错误率是用于衡量模型性能的一种最简单的指标，反应的是一个大致的情况。IoU和mAP则是度量模型性能更详细的指标，其中mAP使用了IoU的概念，提供了一个比IoU更全面的度量方式</p><h3 id="简述R-CNN、Fast-R-CNN和-Faster-R-CNN-的区别"><a href="#简述R-CNN、Fast-R-CNN和-Faster-R-CNN-的区别" class="headerlink" title="简述R-CNN、Fast R-CNN和 Faster R-CNN 的区别"></a>简述R-CNN、Fast R-CNN和 Faster R-CNN 的区别</h3><p>R-CNN 是一种基于区域建议的目标检测方法，对每个候选区域独立地进行卷积特征提取，速度比较慢。<br>Fast R-CNN 通过在整个图像上运行卷积网络，然后在提取的特征图上选择感兴趣的区域（RoI，Region of Interest）来改进 R-CNN。不同于 R-CNN 中独立处理每个候选区域，Fast R-CNN 在整个图像上运行卷积网络一次，然后通过RoI池化层将每个区域映射到卷积特征图上。特征提取是在整个图像上进行的，而不是独立处理每个区域，这样做可以加快速度。<br>Faster R-CNN 是进一步改进的方法，引入了RPN（Region Proposal Network）来生成候选区域。RPN是一个用于在图像中生成区域建议的神经网络，与整个检测网络（如Fast R-CNN）共享卷积层。这样就可以利用RPN直接从特征图中生成候选框，不再需要独立的区域提议步骤。</p><h3 id="简述LSTM标准模型中三个门的主要作用，并给出计算公式"><a href="#简述LSTM标准模型中三个门的主要作用，并给出计算公式" class="headerlink" title="简述LSTM标准模型中三个门的主要作用，并给出计算公式"></a>简述LSTM标准模型中三个门的主要作用，并给出计算公式</h3><h4 id="遗忘门"><a href="#遗忘门" class="headerlink" title="遗忘门"></a>遗忘门</h4><p>主要作用是决定哪些信息应该被忘记或丢弃。它通过一个sigmoid激活函数来输出一个0到1之间的值，表示每个记忆单元中信息保留的程度。当遗忘门输出接近1时，表示保留所有信息；当接近0时，表示尽可能忘记先前的信息。<br>$$\boldsymbol{f}^{(t)}&#x3D;\sigma\left(U^{f} \boldsymbol{x}^{(t)}+W^{f} \boldsymbol{h}^{(t-1)}+\boldsymbol{b}^{f}\right)&#x3D;\sigma\left(\mathcal{W}_{f}\left(\begin{array}{l}<br>\boldsymbol{h}^{(t-1)} \<br>\boldsymbol{x}^{(t)}<br>\end{array}\right)\right)$$</p><h4 id="输入门"><a href="#输入门" class="headerlink" title="输入门"></a>输入门</h4><p>控制新信息的输入程度。通过sigmoid激活函数和tanh激活函数来筛选和创建新的候选值，然后将其结合起来更新单元的状态。<br>$$\boldsymbol{i}^{(t)}&#x3D;\sigma\left(U^{i} \boldsymbol{x}^{(t)}+W^{i} \boldsymbol{h}^{(t-1)}+\boldsymbol{b}^{i}\right)&#x3D;\sigma\left(\mathcal{W}_{i}\left(\begin{array}{l}<br>\boldsymbol{h}^{(t-1)} \<br>\boldsymbol{x}^{(t)}<br>\end{array}\right)\right)$$</p><h4 id="输出门"><a href="#输出门" class="headerlink" title="输出门"></a>输出门</h4><p>决定当前时刻的隐藏状态应该输出多少信息。它根据当前的输入和前一时刻的隐藏状态，结合记忆单元的状态，输出一个0到1之间的值。<br>$$\boldsymbol{g}^{(t)}&#x3D;\sigma\left(U^{o} \boldsymbol{x}^{(t)}+W^{o} \boldsymbol{h}^{(t-1)}+\boldsymbol{b}^{o}\right)&#x3D;\sigma\left(\mathcal{W}_{o}\left(\begin{array}{l}<br>\boldsymbol{h}^{(t)} \<br>\boldsymbol{x}^{(t)}<br>\end{array}\right)\right)$$</p><h3 id="简述GAN的训练过程"><a href="#简述GAN的训练过程" class="headerlink" title="简述GAN的训练过程"></a>简述GAN的训练过程</h3><p>模型由两部分组成：</p><ul><li>生成器：生成器的任务是生成与真实数据相似的虚假数据，目标是让生成器尽可能地欺骗判别器，使其生成的数据在视觉上或在数据分布上与真实数据难以区分。</li><li>判别器：判别器是一个二分类器，它的任务是将真实数据和由生成器产生的假数据区分开来。判别器的目标是尽可能地准确地区分真实数据和虚假数据。<br>生成器生成一批假样本，然后将这些假样本输入给判别器，判别器评估并给出对这些样本的判断，判别器接收一批真实样本和由生成器生成的假样本，然后分别对它们进行分类。<br>优化判别器：$$J^{(D)}&#x3D;-\mathrm{E}<em>{\boldsymbol{x} \sim p</em>{\text {data }}(\boldsymbol{x})}[\log (D(\boldsymbol{x}))]-\mathrm{E}<em>{z \sim p</em>{\boldsymbol{z}}(z)}[\log (1-D(G(\boldsymbol{z})))]$$<br>优化生成器：$$J^{(G)}&#x3D;\mathrm{E}<em>{\boldsymbol{z} \sim p</em>{z}(z)}[\log (1-D(G(z)))]$$</li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>智能计算系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>编程框架使用</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>深度学习编程框架：将深度学习算法中的基本操作封装成一系列组件，这一系列深度学习组件，即构成一套深度学习框架</p><h3 id="pytorch概述"><a href="#pytorch概述" class="headerlink" title="pytorch概述"></a>pytorch概述</h3><h5 id="主要优点"><a href="#主要优点" class="headerlink" title="主要优点"></a>主要优点</h5><p>简洁易懂：API设计简洁一致，基本上是tensor、autograd、nn三层封装<br>便于调试：采用动态图，可以进行调试<br>强大高效：提供了非常丰富的模型组件</p><h4 id="pytorch和tensorflow"><a href="#pytorch和tensorflow" class="headerlink" title="pytorch和tensorflow"></a>pytorch和tensorflow</h4><p>Tensorflow在工业界拥有完备的解决方案和用户基础<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231231234517.png" alt="image.png"></p><h3 id="pytorch编程模型及基本用法"><a href="#pytorch编程模型及基本用法" class="headerlink" title="pytorch编程模型及基本用法"></a>pytorch编程模型及基本用法</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231231234940.png" alt="image.png"></p><h4 id="Numpy基础"><a href="#Numpy基础" class="headerlink" title="Numpy基础"></a>Numpy基础</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116080600.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116080608.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116080629.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116080859.png" alt="image.png"></p><h4 id="ndarray的属性"><a href="#ndarray的属性" class="headerlink" title="ndarray的属性"></a>ndarray的属性</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116081100.png" alt="image.png"></p><h4 id="形状操作"><a href="#形状操作" class="headerlink" title="形状操作"></a>形状操作</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116081251.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116081536.png" alt="image.png"></p><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116081931.png" alt="image.png"></p><h3 id="Pytorch基础"><a href="#Pytorch基础" class="headerlink" title="Pytorch基础"></a>Pytorch基础</h3><p>张量是现代深度学习框架的核心数据结构之一，包括PyTorch和TensorFlow等。它类似于 NumPy中的多维数组（ndarray），在PyTorch中，几乎所有的数据都表示为张量。这包括输 入数据、模型参数、梯度等。<br>支持GPU加速：PyTorch能够利用GPU加速计算，而张量是在GPU上进行计算的主要数据类 型。<br>张量是计算图上的数据载体，用张量统一表示所有的数据，张量在计算图的节点之间传递。<br>张量可以看做是n维的数组，数组的维数即为张量的阶数</p><h4 id="tensor创建"><a href="#tensor创建" class="headerlink" title="tensor创建"></a>tensor创建</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116082757.png" alt="image.png"></p><h4 id="tensor与array的转换"><a href="#tensor与array的转换" class="headerlink" title="tensor与array的转换"></a>tensor与array的转换</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116082837.png" alt="image.png"></p><h4 id="张量的数据类型"><a href="#张量的数据类型" class="headerlink" title="张量的数据类型"></a>张量的数据类型</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116083145.png" alt="image.png"></p><p>不同数据分布对位宽的需求是不同的<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116083621.png" alt="image.png"><br>不同层的数据对于位宽的需求是不一样的，每层数据都有其保持网络收敛的最低位宽要求，每层数据的位宽需求与数据分布之间存在关系</p><h4 id="张量属性的转换"><a href="#张量属性的转换" class="headerlink" title="张量属性的转换"></a>张量属性的转换</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116084631.png" alt="image.png"></p><h4 id="张量的数据格式"><a href="#张量的数据格式" class="headerlink" title="张量的数据格式"></a>张量的数据格式</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116085711.png" alt="image.png"></p><h4 id="张量的切片"><a href="#张量的切片" class="headerlink" title="张量的切片"></a>张量的切片</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101105106.png" alt="image.png"></p><h4 id="张量维度的压缩、扩展"><a href="#张量维度的压缩、扩展" class="headerlink" title="张量维度的压缩、扩展"></a>张量维度的压缩、扩展</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116090605.png" alt="image.png"></p><h4 id="原地操作"><a href="#原地操作" class="headerlink" title="原地操作"></a>原地操作</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116091113.png" alt="image.png"><br>原地操作能够节省内存占用，在进行深度学习算法推理时，使用原地操作能够有效减少模型占用的内存<br>原地操作会覆盖原张量，如果在模型训练时使用原地操 作来更新张量梯度，则每次迭代计算所的梯度值将被覆 盖，从而破坏模型的训练过程<br>对于多个张量同时引用一个张量的情况，对该张量进行 原地操作会影响其他张量的操作</p><h4 id="广播机制"><a href="#广播机制" class="headerlink" title="广播机制"></a>广播机制</h4><p>对于参与计算操作的多个张量，如果张量维度不匹配，可以 使用PyTorch的广播机制对不匹配的张量维度进行扩展，最终 将这些张量均扩展为维度相同<br>广播条件：</p><ul><li>每个张量都有至少1个维度</li><li>从<strong>张量末尾的维度开始对齐</strong>扩展，在对齐后的同一维度中，仅下列情况下才允许进行广播操作：1）维度尺寸相同；2）维度尺寸不同 但其中一个维度尺寸为1；3）其中一个张量没有该维度<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116091810.png" alt="image.png"></li></ul><h4 id="计算图"><a href="#计算图" class="headerlink" title="计算图"></a>计算图</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101110110.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101110417.png" alt="image.png"></p><h3 id="基于Pytorch的模型推理实现"><a href="#基于Pytorch的模型推理实现" class="headerlink" title="基于Pytorch的模型推理实现"></a>基于Pytorch的模型推理实现</h3><h4 id="读取输入图像"><a href="#读取输入图像" class="headerlink" title="读取输入图像"></a>读取输入图像</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116093426.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231116093434.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101110938.png" alt="image.png"></p><h4 id="构建神经网络"><a href="#构建神经网络" class="headerlink" title="构建神经网络"></a>构建神经网络</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101150707.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>智能计算系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>智能计算系统</tag>
      
      <tag>Pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程框架机理</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6%E6%9C%BA%E7%90%86/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6%E6%9C%BA%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Pytorch的设计原则"><a href="#Pytorch的设计原则" class="headerlink" title="Pytorch的设计原则"></a>Pytorch的设计原则</h3><ol><li><p>要性能更要易用<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101153815.png" alt="image.png"></p></li><li><p>简介抽象而非隐藏细节<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101153840.png" alt="image.png"></p></li><li><p>始于python，忠于python<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101153906.png" alt="image.png"></p></li></ol><h3 id="Pytorch的计算图机制"><a href="#Pytorch的计算图机制" class="headerlink" title="Pytorch的计算图机制"></a>Pytorch的计算图机制</h3><p>常见求导方法：</p><ul><li>手动求解法</li><li>数值求导法</li><li>符号求导法</li><li>自动求导法<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101154036.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101154049.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101154058.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101154115.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101154144.png" alt="image.png"></li></ul><h3 id="分布式计算机制"><a href="#分布式计算机制" class="headerlink" title="分布式计算机制"></a>分布式计算机制</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101155704.png" alt="image.png"></p><p>不同的分布式计算方法：<br>数据并行：对数据进行分区<br>模型并行：对程序进行分区<br>混合并行：同时对数据和程序进行分区</p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101155828.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101155942.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101160028.png" alt="image.png"></p><h3 id="编译机制"><a href="#编译机制" class="headerlink" title="编译机制"></a>编译机制</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101160441.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240101160452.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>智能计算系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>智能计算系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A2分析与简答</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/A2%E5%88%86%E6%9E%90%E4%B8%8E%E7%AE%80%E7%AD%94/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/A2%E5%88%86%E6%9E%90%E4%B8%8E%E7%AE%80%E7%AD%94/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="•-A2-1-5-points-尝试解释Epoch、Iteration、Batch几个概念及其不同，尝试说明batch-size的选择依据和影响。"><a href="#•-A2-1-5-points-尝试解释Epoch、Iteration、Batch几个概念及其不同，尝试说明batch-size的选择依据和影响。" class="headerlink" title="• A2.1 (5 points) 尝试解释Epoch、Iteration、Batch几个概念及其不同，尝试说明batch_size的选择依据和影响。"></a>• A2.1 (5 points) 尝试解释Epoch、Iteration、Batch几个概念及其不同，尝试说明batch_size的选择依据和影响。</h4><p>Epoch代表全部的训练数据在模型中训练的次数<br>Iteration表示在一个Epoch中参数更新的次数<br>Batch表示一次正向和反向传播中的一组数据样本<br>batch_size表示Batch中的数据量。小的batch_size可能会导致训练过程不稳定，但梯度更新更快，更容易得到更好的模型效果。大的batch_size可以提高内存利用率，训练效果比较稳定，但模型收敛速度较慢，过大的batch_size得到的模型效果普遍较差。</p><h4 id="•-A2-2-5-points-以一个简单的1-1-1结构的两层神经网络为例，分别采用均方误差损失函数和交叉熵损失函数，说明这两种函数关于参数的非凸性（可作图示意和说明）。"><a href="#•-A2-2-5-points-以一个简单的1-1-1结构的两层神经网络为例，分别采用均方误差损失函数和交叉熵损失函数，说明这两种函数关于参数的非凸性（可作图示意和说明）。" class="headerlink" title="• A2.2 (5 points) 以一个简单的1-1-1结构的两层神经网络为例，分别采用均方误差损失函数和交叉熵损失函数，说明这两种函数关于参数的非凸性（可作图示意和说明）。"></a>• A2.2 (5 points) 以一个简单的1-1-1结构的两层神经网络为例，分别采用均方误差损失函数和交叉熵损失函数，说明这两种函数关于参数的非凸性（可作图示意和说明）。</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231031100205.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231031100233.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231031101845.png" alt="image.png"></p><p>该网络表达式为：$$a_{1} &#x3D; w_{1}\cdot x + b_{1}$$$$a_{2} &#x3D; w_{1}\cdot a_{1} + b_{2}$$<br>均方误差损失函数表达式为：$$L\left(y, a_{2}\right)&#x3D;\left(y-a_{2}\right)^{2}$$画出函数关于 $w_{1}$ 和 $b_{1}$ 的曲面图如下：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231101203612.png" alt="image.png"></p><p>交叉熵损失函数表达式为：$$L\left(y, a_{2}\right)&#x3D;-\left[y \log \left(a_{2}\right)+(1-y) \log \left(1-a_{2}\right)\right]$$画出函数关于 $w_{1}$ 和 $b_{1}$ 的曲面图如下：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231101203715.png" alt="image.png"><br>由图像可以显然看出其非凸性</p><h4 id="•-A2-3-5-points-尝试推导：在回归问题中，假设输出中包含高斯噪音，则最小化均方误差等价于极大似然。"><a href="#•-A2-3-5-points-尝试推导：在回归问题中，假设输出中包含高斯噪音，则最小化均方误差等价于极大似然。" class="headerlink" title="• A2.3 (5 points) 尝试推导：在回归问题中，假设输出中包含高斯噪音，则最小化均方误差等价于极大似然。"></a>• A2.3 (5 points) 尝试推导：在回归问题中，假设输出中包含高斯噪音，则最小化均方误差等价于极大似然。</h4><p>回归模型中输出加入高斯噪音，用函数表示如下：$$y&#x3D;f(x, \theta)+\epsilon$$其中 $x$ 为输入数据，$y$ 为输出数据，$\epsilon$ 为高斯噪音，在此假设其概率密度函数为 $\mathcal{N}\left(0, \sigma^{2}\right)$.<br>对于一个期望为 $\mu$ ，方差为 $\sigma^{2}$ 的正态分布，其概率密度函数为：$$f(x)&#x3D;\frac{1}{\sqrt{2 \pi} \sigma} \exp \left(-\frac{(x-\mu)^{2}}{2 \sigma^{2}}\right)$$<br>样本 $y_i$ 服从期望为 $f(x_i, \theta)$ ，方差为 $\sigma^{2}$ 的正态分布，其概率密度函数为：$$p\left(y_{i} \mid x_{i}, \theta\right)&#x3D;\frac{1}{\sqrt{2 \pi} \sigma} e^{-\frac{\left(y_{i}-f\left(x_{i}, \theta\right)\right)^{2}}{2 \sigma^{2}}}$$<br>所有样本的联合概率密度函数为：$$p(\mathbf{y} \mid \mathbf{x}, \theta)&#x3D;\prod_{i&#x3D;1}^{N} p\left(y_{i} \mid x_{i}, \theta\right)&#x3D;\frac{1}{\left(2 \pi \sigma^{2}\right)^{N &#x2F; 2}} e^{-\frac{1}{2 \sigma^{2}} \sum_{i&#x3D;1}^{N}\left(y_{i}-f\left(x_{i}, \theta\right)\right)^{2}}$$<br>极大似然估计的目的是找到使得观测数据出现的概率最大的参数值 $\theta$ ，即调整 $\theta$ 的值使得上述联合概率密度函数的值最大，即使得 $\sum_{i&#x3D;1}^{N}\left(y_{i}-f\left(x_{i}, \theta\right)\right)^{2}$ 的值最小。</p><p>样本的均方误差可以表示为：$$MSELoss&#x3D;\frac{1}{N} \sum_{i&#x3D;1}^{N}\left(y_{i}-f\left(x_{i}, \theta\right)\right)^{2}$$最小化均方误差即使得 $\sum_{i&#x3D;1}^{N}\left(y_{i}-f\left(x_{i}, \theta\right)\right)^{2}$ 的值最小，这与极大似然估计的目的等价。</p><h4 id="•-A2-4-5-points-尝试推导：在分类问题中，最小化交叉熵损失等价于极大化似然"><a href="#•-A2-4-5-points-尝试推导：在分类问题中，最小化交叉熵损失等价于极大化似然" class="headerlink" title="• A2.4 (5 points) 尝试推导：在分类问题中，最小化交叉熵损失等价于极大化似然"></a>• A2.4 (5 points) 尝试推导：在分类问题中，最小化交叉熵损失等价于极大化似然</h4><p><a href="https://zhuanlan.zhihu.com/p/84764177">极大似然估计与最小化交叉熵损失或者KL散度为什么等价？ - 知乎</a><br>分类问题的联合概率分布为：$$p(X \mid \theta) &#x3D; \prod_{i&#x3D;1}^{N} p\left(x^{(i)} \mid \theta\right) &#x3D; \frac{1}{N} \sum_{i&#x3D;1}^{N} \log p\left(x^{(i)} \mid \theta\right)$$<br>对参数 $\theta$ 的极大似然估计为：$$\begin{array}{l}<br>\theta&#x3D;\underset{\theta}{\operatorname{argmax}} p(X \mid \theta) \<br>&#x3D;\underset{\theta}{\operatorname{argmax}} \prod_{i&#x3D;1}^{N} p\left(x^{(i)} \mid \theta\right) \<br>&#x3D;\underset{\theta}{\operatorname{argmax}} \frac{1}{N} \prod_{i&#x3D;1}^{N} p\left(x^{(i)} \mid \theta\right) \<br>&#x3D;\underset{\theta}{\operatorname{argmax}} \frac{1}{N} \sum_{i&#x3D;1}^{N} \log p\left(x^{(i)} \mid \theta\right)<br>\end{array}$$抽样服从真实样本分布，可得：$$\begin{array}{l}<br>&#x3D;\underset{\theta}{\operatorname{argmax}} E_{x \sim p_{\text {data }}(x)} \log p(x \mid \theta) \<br>&#x3D;\underset{\theta}{\operatorname{argmax}} \int_{x} p_{\text {data }}(x) \log p(x \mid \theta) d x \<br>&#x3D;\underset{\theta}{\operatorname{argmin}} \int_{x}-p_{\text {data }}(x) \log p(x \mid \theta) d x<br>\end{array}$$即为交叉熵损失。</p><h4 id="•-A2-5-5-points-分析为什么L1正则化倾向于得到稀疏解、为什么L2正则化倾向于得到平滑的解。"><a href="#•-A2-5-5-points-分析为什么L1正则化倾向于得到稀疏解、为什么L2正则化倾向于得到平滑的解。" class="headerlink" title="• A2.5 (5 points) 分析为什么L1正则化倾向于得到稀疏解、为什么L2正则化倾向于得到平滑的解。"></a>• A2.5 (5 points) 分析为什么L1正则化倾向于得到稀疏解、为什么L2正则化倾向于得到平滑的解。</h4><p><a href="https://www.zhihu.com/question/37096933/answer/70426653">l1 相比于 l2 为什么容易获得稀疏解？ - 知乎</a><br>L1正则化项是参数的绝对值之和，它在零附近不可导，这使得在优化过程中，某些参数可能会被推到零，从而使得模型变得稀疏；<br>L2正则化项是参数的平方和，它是光滑可导的，在优化过程中会使得所有参数都变得较小，但通常不会等于零，从而得到一个相对平滑的解。</p><h4 id="•-A2-6-5-points-分析Batch-normalization对参数优化起到什么作用、如何起到这种作用。"><a href="#•-A2-6-5-points-分析Batch-normalization对参数优化起到什么作用、如何起到这种作用。" class="headerlink" title="• A2.6 (5 points) 分析Batch normalization对参数优化起到什么作用、如何起到这种作用。"></a>• A2.6 (5 points) 分析Batch normalization对参数优化起到什么作用、如何起到这种作用。</h4><p>允许使用更大的学习率，加快模型的学习速度。减轻了对参数初始化的依赖，一定程度上增加了泛化能力。<br>Batch normalization对每个batch中的数据进行归一化，使得其均值为0，方差为1，然后进行缩放和偏移操作（scale and shift），维持数据的原始分布，其均值和方差分别为可学习的参数β和γ，通过反向传播更新。</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>神经网络与深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前馈神经网络</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h3><p><strong>激活函数：最关键部分</strong></p><ul><li>激活函数：连续并可导的非线性函数</li><li>激活函数及其导函数要尽可能简单</li><li>激活函数的导函数要在一个合适的区间内<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230921102752.png"></li></ul><h4 id="Sigmoid型函数：指一类S型曲线函数，为两端饱和函数，包括Logistic函数和Tanh函数"><a href="#Sigmoid型函数：指一类S型曲线函数，为两端饱和函数，包括Logistic函数和Tanh函数" class="headerlink" title="Sigmoid型函数：指一类S型曲线函数，为两端饱和函数，包括Logistic函数和Tanh函数"></a>Sigmoid型函数：指一类S型曲线函数，为两端饱和函数，包括Logistic函数和Tanh函数</h4><blockquote><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230924105310.png" alt="image.png"></p></blockquote><ul><li>Logistic函数：Logistic 函数可以看成是一个“挤压”函数，把一个实数域的输入“挤压”到 (0, 1)</li><li>Tanh函数：Tanh函数可以看作放大并平移的Logistic函数，其值域是(−1, 1)<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230924105110.png" alt="image.png"><br>Tanh 函数的输出是零中心化的（Zero-Centered），而 Logistic 函数的输出恒大于 0．非零中心化的输出会使得其后一层的神经元的输入发生偏置偏移（Bias Shift），并进一步使得梯度下 降的收敛速度变慢．</li><li>Hard-Logistic函数和Hard-Tanh函数：分段函数来近似Logistic和Tanh</li></ul><h4 id="ReLU函数：ReLU（Rectified-Linear-Unit，修正线性单元）"><a href="#ReLU函数：ReLU（Rectified-Linear-Unit，修正线性单元）" class="headerlink" title="ReLU函数：ReLU（Rectified Linear Unit，修正线性单元）"></a>ReLU函数：ReLU（Rectified Linear Unit，修正线性单元）</h4><p>ReLU为左饱和函数，在 𝑥 &gt; 0 时导数为 1，在一定程度上缓解了神经网络的梯度消失问题，加速梯度下降的收敛速度。ReLU 函数的输出是非零中心化的，给后一层的神经网络引入偏置偏移， 会影响梯度下降的效率。</p><blockquote><p>死亡 ReLU 问题：ReLU 神经元在训练时比较容易“死亡”．在训练时，如果参数在一次不恰当更新后，第一个隐藏层中的某个 ReLU 神经元在 所有的训练数据上都不能被激活，那么这个神经元自身参数的梯度永远都会是 0，在以后的训练过程中永远不能被激活。</p></blockquote><p>为避免ReLU的问题，有几种ReLU的变种</p><ul><li>带泄露的ReLU（Leaky ReLU）：在输入 𝑥 &lt; 0时，保持一个很小的梯度𝛾．这样当神经元非激活时也能有一个非零的梯度可以更新参数，避免永远不能被激活</li><li>带参数的ReLU（Parametric ReLU，PReLU）：引入一个可学习的参数</li><li>ELU（Exponential Linear Unit，指数线性单元）</li><li>Softplus 函数<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230924110331.png" alt="image.png"></li></ul><h3 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h3><ul><li><strong>前馈网络</strong>：整个网络中的信息是朝一个方向传播，没有反向的信息传播。包括全连接前馈网络、卷积神经网络等。</li><li><strong>反馈网络（记忆网络）</strong>：和前馈网络相比，记忆网络中的神经元具有记忆功能，在不同的时刻具有不同的状态．记忆神经网络中的信息传播可以是单向或双向传递。</li><li><strong>图网络</strong>：图网络是定义在图结构数据上的神经网络，图中每个节点都由 一个或一组神经元构成．节点之间的连接可以是有向的，也可以是无向的．每个 节点可以收到来自相邻节点或自身的信息</li></ul><h3 id="前馈神经网络"><a href="#前馈神经网络" class="headerlink" title="前馈神经网络"></a>前馈神经网络</h3><p>每一层的神经元可以接收前一层神经元的信号，并产生信号输出到下一层．第0层称为输入层，最后一层称为输出层，其他中间层称为隐藏层．整个网络中无反馈，信号从输入层向输出层单向传播。<br>传播公式：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230924112107.png" alt="image.png"></p><p>通用近似定理：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230924112220.png" alt="image.png"><br>根据通用近似定理，前馈神经网络可以以任意精度拟合任意定义在实数空间的有界闭集函数</p><p><strong>输出层</strong>： 根据任务确定输出层的激活函数</p><ul><li>回归任务：根据输出的值域选择激活函数</li><li>分类任务：softmax函数<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230921110000.png"></li></ul><h3 id="反向传播算法"><a href="#反向传播算法" class="headerlink" title="反向传播算法"></a>反向传播算法</h3><p>假设采用随机梯度下降进行神经网络参数学习，给定一个样本 (𝒙, 𝒚)，将其 输入到神经网络模型中，得到网络输出为 𝒚̂．假设损失函数为 ℒ(𝒚, 𝒚)̂，要进行参数学习就需要计算损失函数关于每个参数的导数。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230924130625.png" alt="image.png"></p><p>根据损失函数计算参数的偏导数：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230924130632.png" alt="image.png"></p><p>偏导数<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230924130544.png" alt="image.png"><br>表示第𝑙层神经元对最终损失的影响，也反映了最终损失对第𝑙 层神经元的敏感程度，因此一般称为第𝑙 层神经元的误差项，用𝛿 (𝑙) 来表示．<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230924130525.png" alt="image.png">误差项𝛿 (𝑙) 也间接反映了不同神经元对网络能力的贡献程度<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230924131107.png" alt="image.png"><br>第𝑙 层的误差项可以通过第𝑙 + 1层的误差项计算得到，这就是误差的反向传播（BackPropagation，BP）。反向传播算法的含义是： 第 𝑙 层的一个神经元的误差项（或敏感性）是所有与该神经元相连的第 𝑙 + 1 层 的神经元的误差项的权重和．然后，再乘上该神经元激活函数的梯度。</p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230921111754.png"><br>需要会推导</p><h3 id="优化问题"><a href="#优化问题" class="headerlink" title="优化问题"></a>优化问题</h3><p>神经网络的参数学习比线性模型要更加困难，主要原因有两点：1）非凸优化问题和2）梯度消失问题．</p><h4 id="非凸优化问题"><a href="#非凸优化问题" class="headerlink" title="非凸优化问题"></a>非凸优化问题</h4><blockquote><p><strong>凸优化问题</strong>:<br>对于目标函数，我们限定是凸函数；对于优化变量的可行域（注意，还要包括目标函数定义域的约束），我们限定它是凸集。同时满足这两个限制条件的最优化问题称为凸优化问题，这类问题有一个非常好性质，那就是局部最优解一定是全局最优解。</p></blockquote><p>神经网络的优化问题是一个非凸优化问题<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230924131753.png" alt="image.png"></p><h4 id="梯度消失问题"><a href="#梯度消失问题" class="headerlink" title="梯度消失问题"></a>梯度消失问题</h4><p>误差从输出层反向传播时，在每一层都要乘以该层的激活函数的导数．当我们使 用Sigmoid型函数：Logistic函数𝜎(𝑥)或Tanh函数时，其导数为<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230924132011.png" alt="image.png"><br>其导数的值域都小于等于1<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230924132016.png" alt="image.png"><br>由于 Sigmoid 型函数的饱和性，饱和区的导数更是接近于 0．这样，误差经过每一层传递都会不断衰减．当网络层数很深时，梯度就会不停衰减，甚至消失，使得整个网络很难训练．这就是所谓的梯度消失问题（Vanishing Gradient Problem）.<br>在深度神经网络中，减轻梯度消失问题的方法有很多种．一种简单有效的方式是使用导数比较大的激活函数，比如ReLU等。</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>神经网络与深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A6分析与简答</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/A6%E5%88%86%E6%9E%90%E4%B8%8E%E7%AE%80%E7%AD%94/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/A6%E5%88%86%E6%9E%90%E4%B8%8E%E7%AE%80%E7%AD%94/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="A6-1-5分-分析卷积神经网络中用1×1的卷积核的作用。"><a href="#A6-1-5分-分析卷积神经网络中用1×1的卷积核的作用。" class="headerlink" title="A6.1 (5分) 分析卷积神经网络中用1×1的卷积核的作用。"></a>A6.1 (5分) 分析卷积神经网络中用1×1的卷积核的作用。</h3><p><a href="https://zhuanlan.zhihu.com/p/40050371">一文读懂卷积神经网络中的1x1卷积核 - 知乎</a></p><ol><li>改变通道数<br> 当卷积核的个数大于或小于输入通道数时，可以改变输出的通道数</li><li>增加非线性<br> 1x1卷积核可以在不改变特征维度的情况下添加非线性激活</li></ol><h3 id="A6-2-5分-计算函数-𝑦-max-𝑥-1-⋯-𝑥-𝐷-和函数-𝑦-argmax-𝑥-1-⋯-𝑥-𝐷-的梯度。"><a href="#A6-2-5分-计算函数-𝑦-max-𝑥-1-⋯-𝑥-𝐷-和函数-𝑦-argmax-𝑥-1-⋯-𝑥-𝐷-的梯度。" class="headerlink" title="A6.2 (5分) 计算函数$𝑦 &#x3D; max(𝑥_1,⋯,𝑥_𝐷)$和函数$𝑦 &#x3D; argmax(𝑥_1,⋯,𝑥_𝐷)$的梯度。"></a>A6.2 (5分) 计算函数$𝑦 &#x3D; max(𝑥_1,⋯,𝑥_𝐷)$和函数$𝑦 &#x3D; argmax(𝑥_1,⋯,𝑥_𝐷)$的梯度。</h3><p>$𝑦 &#x3D; max(𝑥_1,⋯,𝑥_𝐷)$：如果对于输入向量中的某个元素$𝑥_𝑖$，它是最大值，则其梯度为1，其他所有元素的梯度都为0。用数学符号表示为</p><p>$$<br>\frac{\partial y}{\partial x_{i}}&#x3D;\left{\begin{array}{ll}<br>1, &amp; \text { if } x_{i}&#x3D;max(𝑥_1,⋯,𝑥_𝐷) \<br>0, &amp; \text { otherwise }<br>\end{array}\right.<br>$$</p><p>argmax(𝑥_1,⋯,𝑥_𝐷)输出的是使得函数取得最大值的元素的索引位置.如果对于输入向量中的某个元素𝑥𝑖，它的索引位置与最大值所在的位置相同，则其梯度为1，其他所有元素的梯度都为0。用数学符号表示为</p><p>$$<br>\frac{\partial y}{\partial x_{i}}&#x3D;\left{\begin{array}{ll}<br>1, &amp; \text { if } i&#x3D;argmax(𝑥_1,⋯,𝑥_𝐷) \<br>0, &amp; \text { otherwise }<br>\end{array}\right.<br>$$</p><h3 id="A6-3-5分-推导LSTM网络中参数的梯度，并分析其避免梯度消失的效果。"><a href="#A6-3-5分-推导LSTM网络中参数的梯度，并分析其避免梯度消失的效果。" class="headerlink" title="A6.3 (5分) 推导LSTM网络中参数的梯度，并分析其避免梯度消失的效果。"></a>A6.3 (5分) 推导LSTM网络中参数的梯度，并分析其避免梯度消失的效果。</h3><p>[[循环神经网络#长短时记忆网络（LSTM）]]<br><a href="https://zhuanlan.zhihu.com/p/123857569">LSTM - 长短期记忆递归神经网络 - 知乎</a><br><a href="https://zhuanlan.zhihu.com/p/136223550">Fetching Title#6dum</a></p><p>遗忘门</p><p>$$f_{t}&#x3D;\sigma\left(W_{f} \cdot\left[h_{t-1}, x_{t}\right]+b_{f}\right)$$</p><p>记忆门</p><p>$$\begin{array}{l}<br>i_{t}&#x3D;\sigma\left(W_{i} \cdot\left[h_{t-1}, x_{t}\right]+b_{i}\right) \<br>\widetilde{C}<em>{t}&#x3D;\tanh \left(W</em>{C} \cdot\left[h_{t-1}, x_{t}\right]+b_{C}\right) \</p><p>\end{array}$$</p><p>输出门</p><p>$$\begin{array}{l}<br>o_{t}&#x3D;\sigma\left(W_{o}\left[h_{t-1}, x_{t}\right]+b_{o}\right.) \<br>h_{t}&#x3D;o_{t} * \tanh \left(C_{t}\right)<br>\end{array}$$</p><p>单元状态更新</p><p>$$C_{t}&#x3D;f_{t} * C_{t-1}+i_{t} * \widetilde{C_{t}}$$</p><p>对于参数$W_i$, $W_f$,$W_o$, 统一用$W$表示：</p><p>$$\frac{\partial L_{t}}{\partial W}&#x3D;\frac{\partial L_{t}}{\partial h_{t}} * \frac{\partial h_{t}}{\partial C_{t}} * \ldots *\left(\prod_{k&#x3D;2}^{t} \frac{\partial C_{k}}{\partial C_{k-1}}\right) * \frac{\partial C_{1}}{\partial W}$$</p><p>LSTM 通过记忆单元 C 来缓解梯度消失问题。针对 $\frac{\partial C^{(k)}}{\partial C^{(k-1)}}$ 求得，</p><p>$$<br>\begin{aligned}<br>\frac{\partial C^{(k)}}{\partial C^{(k-1)}}&#x3D; &amp; \frac{\partial C^{(k)}}{\partial f^{(k)}} \frac{\partial f^{(k)}}{\partial h^{(k-1)}} \frac{\partial h^{(k-1)}}{\partial C^{(k-1)}}+\frac{\partial C^{(k)}}{\partial i^{(k)}} \frac{\partial i^{(k)}}{\partial h^{(k-1)}} \frac{\partial h^{(k-1)}}{\partial C^{(k-1)}} \<br>&amp; +\frac{\partial C^{(k)}}{\partial a^{(k)}} \frac{\partial a^{(k)}}{\partial h^{(k-1)}} \frac{\partial h^{(k-1)}}{\partial C^{(k-1)}}<br>\end{aligned}<br>$$</p><p>具体计算后得到，</p><p>$$<br>\begin{array}{c}<br>\frac{\partial C^{(k)}}{\partial C^{(k-1)}}&#x3D;C^{(k-1)} \sigma^{\prime}(\cdot) W_{f} o^{(k-1)} \tanh ^{\prime}\left(C^{(k-1)}\right) \<br>+a^{(k)} \sigma^{\prime}(\cdot) W_{i} o^{(k-1)} \tanh ^{\prime}\left(C^{(k-1)}\right) \<br>+i^{(k)} \tanh ^{\prime}(\cdot) W_{c} * o^{(k-1)} \tanh ^{\prime}\left(C^{(k-1)}\right) \<br>+f^{(t)} \<br>\prod_{k&#x3D;t+1}^{T} \frac{\partial C^{(k)}}{\partial C^{(k-1)}}&#x3D;\left(f^{(k)} f^{(k+1)} \ldots f^{(T)}\right)+\text { other }<br>\end{array}<br>$$</p><p>在LSTM迭代过程中，针对  $\prod_{k&#x3D;t+1}^{T} \frac{\partial C^{(k)}}{\partial C^{(k-1)}}$  而言，每一步  $\frac{\partial C^{(k)}}{\partial C^{(k-1)}}$  可以自主的选择在  $[0,1]$  之间，或者大于1，因为  $f^{(k)}$  是可训练学习的。那么整体  $\prod_{k&#x3D;t+1}^{T} \frac{\partial C^{(k)}}{\partial C^{(k-1)}}$  也就不会一直减小，远距离梯度不至于完全消失，也就能够解决RNN中存在的梯度消失问题。</p><h3 id="A6-4-5分-当将自注意力模型作为神经网络的一层使用时，分析它和卷积层以及循环层在建模长距离依赖关系的效率和计算复杂度方面的差异。"><a href="#A6-4-5分-当将自注意力模型作为神经网络的一层使用时，分析它和卷积层以及循环层在建模长距离依赖关系的效率和计算复杂度方面的差异。" class="headerlink" title="A6.4 (5分) 当将自注意力模型作为神经网络的一层使用时，分析它和卷积层以及循环层在建模长距离依赖关系的效率和计算复杂度方面的差异。"></a>A6.4 (5分) 当将自注意力模型作为神经网络的一层使用时，分析它和卷积层以及循环层在建模长距离依赖关系的效率和计算复杂度方面的差异。</h3><p><a href="https://zhuanlan.zhihu.com/p/136223550">LSTM如何解决RNN带来的梯度消失问题 - 知乎</a><br><a href="https://zhuanlan.zhihu.com/p/264749298">Transformer&#x2F;CNN&#x2F;RNN的对比（时间复杂度，序列操作数，最大路径长度） - 知乎</a><br>基于卷积或循环网络的序列编码都是一种局部的编码方式，只建模了输入信息的局部依赖关系．虽然循环网络理论上可以建立长距离依赖关系，但是由于信息传递的容量以及梯度消失问题，实际上也只能建立短距离依赖关系。<br>RNN梯度消失的原因是，随着梯度的传导，梯度被近距离梯度主导，模型难以学习到远距离的信息。具体原因也就是  $\prod_{k&#x3D;t+1}^{T} \frac{\partial h^{(k)}}{\partial h^{(k-1)}}$  部分，在迭代过程中，每一步  $\frac{\partial h^{(k)}}{\partial h^{(k-1)}}$  始终在  $[0,1]$  之间或者始终大于1。<br>因此，卷积层和循环层不适合用于建模长距离依赖关系。<br>如果要建立输入序列之间的长距离依赖关系，可以使用以下两种方法：</p><ol><li>增加网络的层数，通过一个深层网络来获取远距离的信息交互</li><li>使用全连接网络。<br>而全连接网络无法处理变长序列，自注意力模型可以解决这个问题，因为其连接权重是动态学习的。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231211190703.png" alt="image.png"></li></ol><h4 id="复杂度："><a href="#复杂度：" class="headerlink" title="复杂度："></a>复杂度：</h4><p>循环层：<br>$h_{t}&#x3D;f\left(U x_{t}+W h_{t-1}\right)$</p><ul><li>$U x_{t}: d \times m  与  m \times 1$  运算，复杂度为  $\mathcal{O}(m d)$ ， m为input size</li><li>$W h_{t-1}: d \times d  与  d \times 1$  运算，复杂度为  $\mathcal{O}\left(d^{2}\right)$</li></ul><p>故一次操作的时间复杂度为  $\mathcal{O}\left(d^{2}\right)$ ， n次序列操作后的总时间复杂度为  $\mathcal{O}\left(n d^{2}\right)$ </p><p>卷积层：<br>注: 这里保证输入输出都是一样的，即均是  $n \times d$ </p><ul><li>为了保证输入和输出在第一个维度都相同，故需要对输入进行padding操作，因为这里kernel size为k， (实际kernel的形状为  $k \times d$  ) 如果不 padding的话，那么输出的第一个维度为 $n-k+1$ ，因为这里stride是为1的。为了保证输入输出相同，则需要对序列的前后分别padding长度为 $(k-1) &#x2F; 2$  。</li><li>大小为 $k \times d$ 的卷积核一次运算的复杂度为: $\mathcal{O}(k d)$  ，一共做了 n 次，故复杂度为  $\mathcal{O}(n k d)$ </li><li>为了保证第二个维度在第二个维度都相同，故需要 d 个卷积核，所以卷积操作总的时间复杂度为  $\mathcal{O}\left(n k d^{2}\right)$</li></ul><p>自注意力层：<br>$A(Q, K, V)&#x3D;{Softmax}\left(Q K^{T}\right)$</p><ul><li>$Q, K, V: n \times d$ </li><li>相似度计算  $Q K^{T}: n \times d  与  d \times n$ 运算，得到 $n \times n$ 矩阵，复杂度为 $\mathcal{O}\left(n^{2} d\right)$ </li><li>softmax计算: 对每行做softmax，复杂度为 $\mathcal{O}(n)$ ,则 $\mathrm{n}$ 行的复杂度为  $\mathcal{O}\left(n^{2}\right)$ </li><li>加权和: $n \times n$ 与 $n \times d$ 运算，得到 $n \times d$ 矩阵，复杂度为 $\mathcal{O}\left(n^{2} d\right)$ .故最后self-attention的时间复杂度为 $\mathcal{O}\left(n^{2} d\right)$</li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>神经网络与深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卷积神经网络</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>全连接神经网络：</p><ul><li>参数太多</li><li>训练困难</li><li>网络结构复杂</li><li>没有考虑到图像的空间结构信息</li></ul><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>比起浅层神经网络，深度神经网络会更难训练，然而，如果训练好一个深度网络，它会比浅层网络强大的多<br>因此，有必要开发一种能够训练的深度网络结构<br>卷积神经网络可以简化网络结构，同时利用空间结构信息</p><h3 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h3><h4 id="卷积运算"><a href="#卷积运算" class="headerlink" title="卷积运算"></a>卷积运算</h4><p>卷积经常用在信号处理中，用于计算信号的<strong>延迟累积</strong><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231012101111.png" alt="image.png"></p><h4 id="局部感受野"><a href="#局部感受野" class="headerlink" title="局部感受野"></a>局部感受野</h4><p>单个视觉细胞仅对<strong>部分区域</strong>的<strong>特定模式</strong>反应<br>局部感受：对外部世界由局部到全局的感知<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231012101800.png" alt="image.png"></p><p>一个小区域的输入像素连接到隐藏层的一个神经元<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231012102036.png" alt="image.png"><br>输入图像中的此类区域称为隐藏神经元的局部感受野<br>然后在整张图片上滑动这个局部感受野，每个不同的局部感受野对应于隐藏层的一个不同的神经元</p><h4 id="权值共享"><a href="#权值共享" class="headerlink" title="权值共享"></a>权值共享</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231012102551.png" alt="image.png"><br>每个隐藏层神经元使用相同权值与偏差</p><p>步长（Stride）：每次局部感受野移动的幅度。相邻的子区域很相似，没有必要检测所有的子区域<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231012103227.png" alt="image.png"></p><p>第一个隐藏层中所有神经元都检测到了相同特征，只是在不同的输入图像的位置<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231012104314.png" alt="image.png"></p><p>因此，从输入层到隐藏层的映射通常称之为特征映射（feature map）<br>共享的权值和偏置被称为卷积核（kernel）或者滤波器（filter）</p><p>滤波器越多，特征映射的深度越大，得到的关于输入的信息就越多<br>共享权值极大降低了CNN的参数规模</p><h4 id="池化"><a href="#池化" class="headerlink" title="池化"></a>池化</h4><p>池化层通常用在卷积层之后，以简化卷积层输出的信息</p><ul><li>Max-pooling：输出池化矩阵中最大激活值 <img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231012111003.png" alt="image.png"></li><li>Mean-pooling：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231012111104.png" alt="image.png"></li></ul><p>池化的主要目的：</p><ul><li>减少参数，降低计算量，控制过拟合</li><li>使得特征具有局部的转移和扭曲不变性</li></ul><h3 id="卷积神经网络中的反向传播"><a href="#卷积神经网络中的反向传播" class="headerlink" title="卷积神经网络中的反向传播"></a>卷积神经网络中的反向传播</h3><h3 id="典型的卷积网络"><a href="#典型的卷积网络" class="headerlink" title="典型的卷积网络"></a>典型的卷积网络</h3><ul><li>ImageNet</li><li>LeNet</li><li>AlexNet</li><li>VGGNet</li><li>GoogLeNet</li><li>ResNet</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>CNNs迁移学习框架<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231012114823.png" alt="image.png"></p><p>图像描述生成</p><p>图像表征提取</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>神经网络与深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图神经网络</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>图是一种描述样本间关系的通用语言<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026095632.png" alt="image.png"></p><h2 id="图神经网络"><a href="#图神经网络" class="headerlink" title="图神经网络"></a>图神经网络</h2><p>图神经网络是一种基于图结构数据的深度学习方法，学习图结构数据中的节点特征、边特征、图级表示</p><ul><li>图是图神经网络研究的基本对象;𝐺&#x3D;(𝑉,𝐸)</li><li>是描述复杂事务的数据表示形式，由节点和边组成；</li><li>可描述不规则数据（非欧式数据），充分利用数据间关系信息<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026100249.png" alt="image.png"></li></ul><p>使用神经网络变换、聚合来自目标节点其邻居的信息，迭代生成节点嵌入表示</p><ol><li>对于单个节点，求取邻居节点的表示的均值获得邻居表示</li><li>通过一个全连接层对邻居表示和该节点的自身表示进行线性加权</li><li>通过非线性激活函数得到该节点的聚合表示<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026100526.png" alt="image.png"></li></ol><ul><li>节点在每一层都有一个表示</li><li>模型可以设计任意多层</li><li>输入特征可以视为第0层的节点表示<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026101101.png" alt="image.png"></li></ul><h3 id="图卷积神经网络"><a href="#图卷积神经网络" class="headerlink" title="图卷积神经网络"></a>图卷积神经网络</h3><h4 id="基于谱域的方法"><a href="#基于谱域的方法" class="headerlink" title="基于谱域的方法"></a>基于谱域的方法</h4><p>𝑮&#x3D;𝑽,𝑬,𝑨,𝑿, 𝑽为节点集合, 𝑬为边集合, 𝐀为邻接矩阵, 𝑿是节点特征矩阵<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026102249.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026102316.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026102345.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026102358.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026102419.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026102735.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026102806.png" alt="image.png"></p><h4 id="基于空间结构的方法"><a href="#基于空间结构的方法" class="headerlink" title="基于空间结构的方法"></a>基于空间结构的方法</h4><ul><li>对于每个节点，选择固定数量的节点作为其邻近节点</li><li>按照一定的邻近度量根据邻近度进行排序</li><li>参数共享<br>GraphSAGE<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026103613.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026103647.png" alt="image.png"></li></ul><h3 id="图注意力神经网络"><a href="#图注意力神经网络" class="headerlink" title="图注意力神经网络"></a>图注意力神经网络</h3><p>人脑通过注意力来解决信息超载问题</p><h4 id="注意力机制"><a href="#注意力机制" class="headerlink" title="注意力机制"></a>注意力机制</h4><p>Attention 机制选择一些关键的信息输入进行处理，来提高神经网络的效率。具体通过在模型训练和推断过程中动态调整模型对数据&#x2F;特征不同部分的权重提升模型的学习效果<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026104614.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026104623.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026104643.png" alt="image.png"></p><h4 id="自注意力机制"><a href="#自注意力机制" class="headerlink" title="自注意力机制"></a>自注意力机制</h4><p>当使用神经网络来处理一个变长的向量序列时，我们通常可以使用卷积网络或循环网络进行编码来得到一个相同长度的输出向量序列，但是只建模了输入信息的局部依赖关系<br>自注意力模型：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026105602.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026105742.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026105815.png" alt="image.png"></p><h4 id="多头自注意力模型"><a href="#多头自注意力模型" class="headerlink" title="多头自注意力模型"></a>多头自注意力模型</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026105855.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026105910.png" alt="image.png"></p><h4 id="图注意力网络"><a href="#图注意力网络" class="headerlink" title="图注意力网络"></a>图注意力网络</h4><p>GAT 在图神经网络中引入了Attention，关注邻居节点集合中比较重要的部分。GAT 采用masked attention的方式——仅将注意力分配到节点i的邻居节点集𝑁i上，即j ∈𝑁i<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026110938.png" alt="image.png"><br>对于单个节点，将其表示作为查询𝑞，邻居节点的表示作为键和值&lt;𝑘,𝑣&gt;，执行注意力操作的结果即为该节点的聚合表示：</p><ol><li>获得第𝑖个节点的查询，获得和其相邻的所有节点的键和值</li><li>计算其和所有邻居节点的相关性</li></ol><ul><li>将查询和键拼接起来，然后通过激活函数为LeakyReLU的全连接神经网络进行变换，最终得到一个代表相关分数的实数</li></ul><ol start="3"><li>计算归一化注意力得分</li><li>以注意力得分为权重，对值进行加权求和，计算节点的聚合表示图注意力网络</li><li>最终的聚合结果可以由多个注意力头的结果拼接得到</li></ol><h2 id="图汇聚"><a href="#图汇聚" class="headerlink" title="图汇聚"></a>图汇聚</h2><p>图汇聚（Graph Pooling）：获取一个完整图级别的表示</p><p>平面图汇聚：</p><ul><li>直接从节点表示生成图级别表示</li><li>最大汇聚、平均汇聚、求和汇聚、注意力汇聚<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026111724.png" alt="image.png"></li></ul><p>层次图汇聚：逐步粗化图得到图级别表示</p><ul><li><p>基于降采样的层次图汇聚<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026111802.png" alt="image.png"></p></li><li><p>基于超节点的层次图汇聚<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026111833.png" alt="image.png"></p></li></ul><h2 id="异构图神经网络"><a href="#异构图神经网络" class="headerlink" title="异构图神经网络"></a>异构图神经网络</h2><p>异构信息网络的核心：</p><ol><li>元路径（Meta-path）：具有语义含义的路径</li><li>语义空间（Semantic Space）</li></ol><p>同构图：节点类型和边的类型只有一种的图</p><p>异构图：相比于以往的同构图𝐺&#x3D; (𝑉, 𝐸) ，异构图多了两个属性R、T ，其中R表示边的类型，T表示节点的类型，可以表示为：𝐺&#x3D; (𝑉, 𝐸, 𝑅, 𝑇)。异构图神经网络的关键在于如何设计合适的聚合函数以捕获邻域所包含的语义。<br>聚合公式：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026112122.png" alt="image.png"><br>异构图神经网络的特点：</p><ol><li>不同meta-path 对应不同语义空间</li><li>每个语义空间内节点的邻居和信息均不同</li><li>节点的最终表征与每个语义空间均有关<br>异构图注意力网络：</li><li>使用meta-path 异构信息网络投影到多个同构图</li><li>在每个同构图内使用注意力网络整合邻居信息</li><li>对不同meta-path 对应的多个同构图使用全局注意力机制<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026112241.png" alt="image.png"></li></ol><h2 id="图神经网络的应用"><a href="#图神经网络的应用" class="headerlink" title="图神经网络的应用"></a>图神经网络的应用</h2><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026112424.png" alt="image.png"></p><h3 id="文本分类"><a href="#文本分类" class="headerlink" title="文本分类"></a>文本分类</h3><p>文本分类是自然语言处理（NLP）中的一项基础任务，它的目标是将输入的文本分配给一个或多个类别。常见的文本分类应用包括情感分析、主题分类、垃圾邮件检测等。<br>面向文本数据的图构建：文本数据（词、文档）不直接包含关系信息，但可以基于统计进行关系构建<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026113021.png" alt="image.png"></p><h3 id="知识图谱嵌入"><a href="#知识图谱嵌入" class="headerlink" title="知识图谱嵌入"></a>知识图谱嵌入</h3><p>定义：知识图谱嵌入(Knowledge Graph Embeddings, KGEs)，也称为知识图谱表示学习(Knowledge Graph Representing Learning)，是将包含实体和关系的知识图谱的组成部分嵌入到低维度、连续的向量空间中，从而<strong>在保持知识图谱固有结构的同时简化操作</strong>。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231026113151.png" alt="image.png"></p><p>模型概述：</p><ol><li>多模态实体嵌入模块：编码器通过多层感知器网络学习不同模态（图片、文本）数据的实体嵌入。</li><li>局部对比多关系特征聚合模块：将实体的局部邻域的关系类型区分为多关系子图，通过注意力机制进行关系内、关系间特征聚合。</li><li>高阶对比编码模块：显式对比来自实体及其高阶邻居的编码来丰富实体特征。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>图是一个非常强大的工具，几乎所有的数据都能够表示成图</p><ul><li>计算机视觉、生物化学、推荐系统、交通、程序验证、程序推理……<br>然而：</li><li>在图上进行优化非常困难，因为图是稀疏架构，每个节点的边数高度可变，空间效率低</li><li>图神经网络对超参数非常敏感</li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>神经网络与深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ChatEdit</title>
    <link href="/2025/06/20/Notes/%E8%AE%BA%E6%96%87/ChatEdit/"/>
    <url>/2025/06/20/Notes/%E8%AE%BA%E6%96%87/ChatEdit/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="ChatEdit"><a href="#ChatEdit" class="headerlink" title="ChatEdit"></a>ChatEdit</h3><p>ChatEdit是一个数据集，用于评估在此背景下的图像编辑和对话能力。<br>ChatEdit是根据CelebA-HQ数据集（30k张1024×1024面部图像数据集，它提供了 40 个面部属性的二进制注释）构建的，包含与图像上的用户编辑请求相对应的带注释的多轮对话，21个可编辑属性<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231113213751.png" alt="image.png"></p><p>TODO：<br>数据集是什么类型？一张图像和几个标签？<br>图像生成后怎么判断生成是否符合要求</p><h3 id="交互式面部图像编辑"><a href="#交互式面部图像编辑" class="headerlink" title="交互式面部图像编辑"></a>交互式面部图像编辑</h3><ol><li>跟踪用户编辑请求</li><li>图像编辑</li><li>响应生成（对话）</li></ol><p>跟踪整个对话历史记录到当前用户编辑请求，直接对原始图像进行修改，而不是调整前一轮的输出。减少错误累计、防止属性遗忘</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>论文</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>扩散模型论文todo</title>
    <link href="/2025/06/20/Notes/%E8%AE%BA%E6%96%87/%E6%89%A9%E6%95%A3%E6%A8%A1%E5%9E%8B%E8%AE%BA%E6%96%87todo/"/>
    <url>/2025/06/20/Notes/%E8%AE%BA%E6%96%87/%E6%89%A9%E6%95%A3%E6%A8%A1%E5%9E%8B%E8%AE%BA%E6%96%87todo/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>检查句号后面空格</p><p>论文检查：</p><ul><li><input checked="" disabled="" type="checkbox"> 论文中公式全部检查  公式文字部分也对应检查</li><li><input checked="" disabled="" type="checkbox"> 图表全部检查  图表文字部分也对应检查</li><li><input checked="" disabled="" type="checkbox"> 参考文献检查  <strong>20和29参考文献重点检查</strong></li><li><input checked="" disabled="" type="checkbox"> 学历补充</li><li><input checked="" disabled="" type="checkbox"> word格式整理好</li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231203092747.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/d5304720bd3b25b687d5db36f180fb3.jpg" alt="d5304720bd3b25b687d5db36f180fb3.jpg"></p><p>检查论文，12.4之前</p><p>对比学习生成 <strong>hardsample</strong><br>自动数据增强<br>识别出假数据<br><a href="https://arxiv.org/pdf/2207.00148.pdf">https://arxiv.org/pdf/2207.00148.pdf</a><br><a href="https://arxiv.org/pdf/2010.04592v2.pdf">https://arxiv.org/pdf/2010.04592v2.pdf</a><br><a href="https://epubs.siam.org/doi/epdf/10.1137/1.9781611977653.ch19">https://epubs.siam.org/doi/epdf/10.1137/1.9781611977653.ch19</a><br><a href="https://ojs.aaai.org/index.php/AAAI/article/view/26071">https://ojs.aaai.org/index.php/AAAI/article/view/26071</a><br><a href="https://arxiv.org/pdf/2303.15161v3.pdf">https://arxiv.org/pdf/2303.15161v3.pdf</a><br><a href="https://www.sciencedirect.com/science/article/abs/pii/S0031320323002121">https://www.sciencedirect.com/science/article/abs/pii/S0031320323002121</a><br><a href="https://paperswithcode.com/paper/hard-sample-guided-hybrid-contrast-learning">https://paperswithcode.com/paper/hard-sample-guided-hybrid-contrast-learning</a><br><a href="https://paperswithcode.com/paper/hard-sample-aware-noise-robust-learning-for">https://paperswithcode.com/paper/hard-sample-aware-noise-robust-learning-for</a></p><h3 id="NEW"><a href="#NEW" class="headerlink" title="NEW"></a>NEW</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/ff4ca0be44cbc807008ad5e9d025a40.jpg" alt="ff4ca0be44cbc807008ad5e9d025a40.jpg"></p><ul><li><p><input disabled="" type="checkbox"> 表一加个表头</p></li><li><p><input disabled="" type="checkbox"> 表三添加：auc已经到很高的数值，差距拉不开，意义不大</p></li><li><p><input disabled="" type="checkbox"> 所有数据换成通信数据,电信场景不同任务，网络优化、运维、用户进行实验，验证在不同任务下的效果</p></li><li><p><input disabled="" type="checkbox"> 基于文章写一个ppt<br>12-15页有效内容</p></li></ul><p>11.29<br>ppt要求：刷一下ppt格式<br>参考p8做p11</p><p>背景 相关工作<br>方法介绍<br>数据集介绍<br>哪几个实验</p><p>用对比学习做GAN的判别器</p><ol><li><p>hardsample的生成结果进行对比</p></li><li><p>hardsample怎么生成，普通生成也怎么生成</p></li><li><p>对这些样本构造一个图，从图中计算hardsample</p></li><li><p>基于对比学习</p></li><li><p>DDPM在通信的应用</p></li><li><p>隐私保护的深入探索 看论文<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231127150317.png" alt="image.png"></p></li></ol><h3 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h3><h4 id="基于误分样本的数据重构"><a href="#基于误分样本的数据重构" class="headerlink" title="基于误分样本的数据重构"></a>基于误分样本的数据重构</h4><p>之前调节分类器的参数，来提升评估效果<br>现在可以尝试&#x3D;&#x3D;调节生成模型的参数&#x3D;&#x3D;来提升生成模型的效果</p><h4 id="难分类样本"><a href="#难分类样本" class="headerlink" title="难分类样本"></a>难分类样本</h4><p>难以分类但是分类正确的样本，提升权重<br>之前是使用全部原始样本生成生成数据，然后从生成数据中挑选误分类样本。<br>现在先评估原始数据，挑选出难分类样本，生成难分类样本生成数据，进行评估或者和原始数据融合</p><h4 id="对比学习"><a href="#对比学习" class="headerlink" title="对比学习"></a>对比学习</h4><p>数据抽样</p><p>将原始数据划分为正样本和负样本，可知正样本很少，存在严重的不平衡<br>按照对比学习的思路，可以尝试在全部样本中进行两两一组的随机抽样，两个样本标签相同为正样本对，不同为负样本对</p><h4 id="误分类样本数据重构-数据规模"><a href="#误分类样本数据重构-数据规模" class="headerlink" title="误分类样本数据重构 +数据规模"></a>误分类样本数据重构 +数据规模</h4><p>考虑到真实数据量比较小<br>我们可以生成大量数据<br>以真实数据训练分类器，提取生成误分样本，并和一些生成样本融合，（相当于提升了数据规模）<br>生成两份数量都为N的数据（N为原始数据规模的10-100倍），一份通过分类器得到误分类样本，与另一份融合，共同用于训练分类器</p><h4 id="不同生成模型数据融合"><a href="#不同生成模型数据融合" class="headerlink" title="不同生成模型数据融合"></a>不同生成模型数据融合</h4><p>将扩散生成模型和 GAN 模型生成的数据进行融合用于共同训练分类器</p><hr><h2 id="融合生成数据和原始数据的特征表示？"><a href="#融合生成数据和原始数据的特征表示？" class="headerlink" title="融合生成数据和原始数据的特征表示？"></a>融合生成数据和原始数据的特征表示？</h2><p>使用自适应的权重机制</p><hr><ul><li><p><input checked="" disabled="" type="checkbox"> 只考虑真实&amp;生成，修改文字</p></li><li><p><input checked="" disabled="" type="checkbox"> 增加大量的生成数据  50倍 30倍 70倍</p></li><li><p><input checked="" disabled="" type="checkbox"> 表格：真实数据一条，每个模型的生成数据3条，绘成表格</p></li><li><p><input checked="" disabled="" type="checkbox"> 相关工作：把数据增强放前面，客户流失放后面，重在罗列，要写哪篇文章</p></li><li><p><input checked="" disabled="" type="checkbox"> 数据集来源换成网址</p></li><li><p><input checked="" disabled="" type="checkbox"> 隐私部分表格修改</p></li></ul><hr><ul><li><input disabled="" type="checkbox"> 审稿意见标粗的 <font color="#ff0000">其他联合损失函数</font></li><li><input checked="" disabled="" type="checkbox"> 表格格式问题</li><li><input checked="" disabled="" type="checkbox"> 弱分类器强分类器表格加粗好结果</li><li><input checked="" disabled="" type="checkbox"> 4.1生成数据量对效果的影响</li><li><input disabled="" type="checkbox"> 相关工作的文献引用</li><li><input checked="" disabled="" type="checkbox"> 写修改说明，合并到一起</li></ul><hr><ul><li><p><input checked="" disabled="" type="checkbox"> 相关工作第二部分</p></li><li><p><input disabled="" type="checkbox"> 引言部分的参考文献</p></li><li><p><input checked="" disabled="" type="checkbox"> 加上LR的误分类，另外数据是不是贴反了@程梓航</p></li><li><p><input checked="" disabled="" type="checkbox"> 序号</p></li><li><p><input disabled="" type="checkbox"> 方法介绍开始一直检查到</p></li><li><p><input checked="" disabled="" type="checkbox"> 修改说明中 损失函数 数据量增大</p></li><li><p><input disabled="" type="checkbox"> 修改说明合完发过去</p></li><li><p><input disabled="" type="checkbox"> 4.1绿的复制 表四复制</p></li><li><p><input disabled="" type="checkbox"> 引言 和 相关工作【】里加参考文献</p></li><li><p><input disabled="" type="checkbox"> 图标边框</p></li><li><p><input checked="" disabled="" type="checkbox"> 合参考文献 数据集划分 误分类</p></li><li><p><input disabled="" type="checkbox"> 公式 摘要</p></li></ul><p>有问题的论文序号：2，4，8，10，15，16，18，28，34，35</p><h2 id="生成数据量对效果的影响"><a href="#生成数据量对效果的影响" class="headerlink" title="生成数据量对效果的影响"></a>生成数据量对效果的影响</h2><p>为了验证大规模的生成数据对效果的影响，我们使用扩散模型生成了数据集训练数据量10倍、50倍和100倍的数据，用来训练分类器Catboost，训练结果如下表所示。在电信数据集中，大量样本并不能显著提升分类器的性能，反而使结果略微下降。在银行数据集和电商数据集中，大规模样本使分类器性能得到提升，尤其是电商数据的表现提升显著，超越了真实数据的效果。三者都在数据规模达到原训练样本100倍时取得最好的效果。这表明通过增大数据集规模来提升模型效果在某些场景下是可行的。</p><p>| real   | 0.8072 | 0.7388 | 0.8546 |     |     |        | 0.9701 | 0.9456 | 0.9948 |     |     |        | 0.9401 | 0.8737 | 0.9528 |<br>| ————— | —— | —— | —— | —— | — | — | —— | —— | —— | —— | — | — | —— | —— | —— | —— |<br>| syn 1:5_fakeALL | 0.8051 | 0.7367 | 0.8542 |        |     |     | 0.9589 | 0.9241 | 0.9836 |        |     |     | 0.9049 | 0.8076 | 0.8893 |        |<br>| 10x_fakeall     | 0.7277 | 0.7072 | 0.8384 |        |     |     | 0.9589 | 0.9239 | 0.9855 |        |     |     | 0.9331 | 0.8646 | 0.9511 |        |<br>| 30x_fakeall     |        |        |        |        |     |     |        |        |        |        |     |     | 0.9322 | 0.8652 | 0.9556 |        |<br>| 50x_fakeall     | 0.7227 | 0.702  | 0.844  |        |     |     | 0.9608 | 0.9279 | 0.9872 |        |     |     | 0.9349 | 0.8708 | 0.9543 |        |<br>| 70x_fakeall     |        |        |        |        |     |     |        |        |        |        |     |     |        |        |        |        |<br>| 100x_fakeall    | 0.7277 | 0.7076 | 0.8442 |        |     |     | 0.9623 | 0.9312 | 0.9882 |        |     |     | 0.934  | 0.8687 | 0.9562 |        |</p><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><h4 id="数据增强方法"><a href="#数据增强方法" class="headerlink" title="数据增强方法"></a>数据增强方法</h4><p>数据增强是一种基于有限数据生成更多有效数据来扩充训练集，从而使得训练集训练出的模型效果得到提升的方法。目前，许多数据增强方法在图像生成等领域应用广泛。常用的方法有综合采样人工合成数据算法SMOTE[12]，无监督学习方法VAE（Variational Autoencoder）[32]，GAN[34]及其多种变体，以及扩散模型（Denoising Diffusion Probabilistic Model）[48]等。<br>Xiaojun Wu利用改进的 SMOTE 处理流失数据，结合过采样和欠采样方法解决流失数据的不平衡问题，对电子商务客户流失进行预测。（# E-commerce customer churn prediction based on improved SMOTE and AdaBoost）TVAE[33]在VAE的基础上提出了一个新的集成框架，结合深度度量学习（deep metric learning）来学习 VAE 中的潜在嵌入。MedGAN将一个自编码器与GAN结合，可以在图像层面实现端到端的生成任务，可以生成连续和离散变量，被用于EHR（electronic health record）数据的生成。CrGAN-Cnet将Cramér Distance和Cross-Net architecture整合到算法中，用于航空公司乘客姓名记录生成（Airline Passenger Name Record Generation），此外还能生成数据来填补数据表格中的缺失值。IRGAN首次将在CV领域中广泛应用的GAN引入到信息检索，利用强化学习，创造性地解决了GAN在离散领域的适用问题。TableGAN将分类器和信息损失引入GAN，并在生成器、鉴别器和分类器中应用卷积神经网络（CNN）。另外，在表格数据增强中，隐私保护能力也是一个重要的因素。PATE-GAN提出了一个生成具有差分隐私保证数据的框架。<br>上述基于GAN的算法在生成特定类别数据上存在很大不足，而Conditional GAN（CGAN）可以有效控制生成数据，因而被广泛应用。CGAN在生成器和判别器的输入中增加了额外的条件信息，限制了生成数据的生成类型。CW-GAN将Wasserstein距离应用到CGAN中，利用条件向量对少数类进行过采样，以解决表格数据生成不平衡的问题。CTGAN将 PacGAN结构集成到它的鉴别器中，并使用 WGAN 损失加上梯度惩罚来训练一个条件 GAN 框架。CTAB-GAN通过数据编码连续和分类变量的混合数据类型，以及对长尾连续变量有效建模。<br>2020年，DDPM（Denoising Diffusion Probabilistic Model）被提出，被称为扩散模型，在图像生成领域广泛应用。扩散模型包括两个过程：前向过程和反向过程，其中前向过程又称为扩散过程。无论是前向过程还是反向过程都是一个参数化的马尔可夫链。后来学者们改进DDPM（引用Improved Denoising Diffusion Probabilistic Models），进一步增强其生成效果。</p><h4 id="客户流失预估："><a href="#客户流失预估：" class="headerlink" title="客户流失预估："></a>客户流失预估：</h4><p>在过去的研究中，学者们对客户流失预测在多种领域进行了大量的探索，包括电信客户流失、银行理财客户流失、新兴互联网行业客户流失，如电商、直播、旅游产品等。预测方法也逐渐成熟，形成了以机器学习算法为主流的现状。从发展历程上主要分为两个阶段。<br>第一阶段是传统统计学预测方法，主要包括决策树（decision tree, DT）、逻辑回归（logistic regression，LR）、贝叶斯分类器（bayesian）、支持向量机（support vector machine，SVM）等算法。早在2007年，Luo Bin就使用决策树来预测手机服务中的客户流失（# Customer Churn Prediction Based on the Decision Tree in Personal Handyphone System Service）。同年，针对实际客户流失数据中正负样本数量不平衡而且数据量大的特点,Ying Weiyun提出带有不同类权重参数的支持向量机算法CW-SVM来预测客户流失,通过调整类权重参数改变分类面位置,提高算法分类准确性[6]。近些年电子商务发展迅速，客户激增，Qiu Yanfang使用逻辑回归来预测电子商务场景下的客户流失[4]。在[3]中，Hemlata Jain将逻辑回归和logit boost结合起来，在美国电信公司Orange的数据集上表现良好。在[5]中，Guangli Nie分别使用决策树和逻辑回归对某银行信用卡用户流失数据做预测。Arno De Caigny在其论文中将决策树和逻辑回归结合提出了一种新的混合算法，logit leaf model (LLM) ，以更好地对数据进行分类。（# A new hybrid classification algorithm for customer churn prediction based on logistic regression and decision trees）。这一阶段的客户流失预测方法主要集中在将这些基础算法和手动特征工程结合对客户流失进行建模[1-3, 6-7]。<br>第二阶段是客户流失预测场景中集成学习算法的垄断和深度学习的初步探索。随着集成学习的引入，随机森林（random forest，RF）、梯度提升决策树（gradient boosting decision tree，GBDT）、Adaboost和Stack等方法被大量引入到对客户流失预测中，包括在电信、银行、互联网等场景。特别是GBDT，由于其算法具有很好的性能被客户流失预测广泛应用。<br>Yaya Xie提出了一种基于随机森林的学习方法，称为改进的平衡随机森林(improved balanced random forests，IBRF)，通过改变类的分布和对少数类的错误分类施加更高的惩罚来迭代学习最佳特征，并将该方法应用于某银行客户流失数据集。（# Customer churn prediction using improved balanced random forests）Liang Jiafu提出了一种基于梯度提升决策树算法(GBDT)和逻辑回归(LR)算法的用户流失预防模型,对参数特征进行调整,对已有移动用户流失数据进行计算,识别速度和准确率均拥有好的效果[8]。Zengyuan Wu提出 PCA-AdaBoost 模型，采用主成分分析来减少数据维度，使用AdaBoost对多个决策树进行级联，以最小化不平衡数据的影响。该模型在kaggle的电子商务数据集上证明了模型的有效性。（# A PCA-AdaBoost model for E-commerce customer churn prediction）<br>在深度学习领域，Ebru Pekel Ozmen改进卷积神经网络算法，提出了一种新的混合扩展卷积决策树模型(ECDT)，将模型应用于零售业员工流失预测的数据集[10]。[11]提出了一个利用交易数据预测银行客户流失的框架,将GRU和bi-directional LSTM应用于客户流失预测。这一阶段的客户流失方法开始尝试将一些机器学习方法集成起来，或是使用流行的深度学习方法，用更复杂的模型学习和预测流失数据。<br>整体上，客户流失预测以机器学习算法为主，并发展出集成学习等不同模型，深度学习在该领域也有一定应用。预测领域也从电信用户流失逐渐发展到银行信用卡用户流失、电商用户流失等多个领域。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p><strong>1</strong> 多处需要增加引用文献，例如：Theil’s U 统计量，Correlation Ratio，SHAP（SHapley Additive exPlanations）<br>解决：Theil’s U 统计量，Correlation Ratio可以直接引用CTABGAN<br>          SHAP： [A Unified Approach to Interpreting Model Predictions](<a href="https://arxiv.org/abs/1705.07874v2">[1705.07874v2] A Unified Approach to Interpreting Model Predictions (arxiv.org)</a>)</p><p><strong>2</strong> 论文之中提到的 kaggle 数据集可以给出相应的链接。 @ 正阳 （找链接，试着参考论文里）<br><a href="https://www.kaggle.com/datasets/blastchar/telco-customer-churn">Telco Customer Churn | Kaggle</a><br><a href="https://www.kaggle.com/datasets/sakshigoyal7/credit-card-customers">Credit Card customers | Kaggle</a><br><a href="https://tianchi.aliyun.com/dataset/124814">直播电商数据集_数据集-阿里云天池 (aliyun.com)</a></p><p>3 电信数据集，每个模型找五条</p><p>REAL：</p><p>Male  0 No No  2  Yes  No  DSL  Yes  Yes  No  No  No  No  Month-to-month  Yes  Mailed check  53.85  108.15</p><p>Female  0  No No 2 Yes No Fiber optic No No No No No No Month-to-month Yes Electronic check 70.7 151.65 </p><p>Female 0 No No 8 Yes Yes Fiber optic No No Yes No Yes Yes Month-to-month Yes Electronic check 99.65 820.5</p><p>Male 1 No No 1 No No phone service DSL No No Yes No No Yes Month-to-month Yes Electronic check 39.65 39.65</p><p>Male 0 No No 49 Yes Yes Fiber optic No Yes Yes No Yes Yes Month-to-month Yes Bank transfer(automatic) 103.7 5036.3</p><p>DDPM：<br>‘Male’ ‘1’ ‘Yes’ ‘No’  4.0 ‘Yes’ ‘No’ ‘Fiber optic’ ‘No’ ‘No’ ‘Yes’ ‘No’<br>  ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Electronic check’<br>  92.81641778046422 347.77240745447966</p><p> ‘Male’ ‘0’ ‘Yes’ ‘No’ 1.0 ‘Yes’ ‘Yes’ ‘Fiber optic’ ‘No’ ‘No’ ‘No’ ‘No’<br>  ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Electronic check’<br>  95.8100172795924 135.30996333735123</p><p> ‘Female’ ‘0’ ‘No’ ‘No’ 12.89970293412554 ‘Yes’ ‘No’ ‘Fiber optic’ ‘No’ ‘No’ ‘No’ ‘No’<br>  ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Bank transfer (automatic)’<br>   90.24851621598897 1131.933374934577</p><p> ‘Male’ ‘0’ ‘No’ ‘No’ 15.0 ‘Yes’ ‘Yes’ ‘Fiber optic’ ‘No’ ‘Yes’ ‘No’ ‘No’<br>  ‘No’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Credit card (automatic)’<br>  89.23206588556003 1370.882200227259</p><p> ‘Female’ ‘1’ ‘No’ ‘No’ 1.0 ‘Yes’ ‘Yes’ ‘Fiber optic’ ‘No’ ‘No’ ‘No’ ‘No’<br>  ‘No’ ‘No’ ‘Month-to-month’ ‘Yes’ ‘Electronic check’<br>  75.70813933778831 75.53547210781328</p><p>SMOTE：<br>‘Female’ ‘0’ ‘No’ ‘No’ 6.058020806965098 ‘Yes’ ‘No’ ‘Fiber optic’ ‘No’ ‘No’ ‘No’ ‘No’<br>  ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Electronic check’<br>  89.30362630043531 581.5998093801566</p><p> ‘Female’ ‘0’ ‘Yes’ ‘No’ 34.16695916300951 ‘Yes’ ‘Yes’ ‘Fiber optic’ ‘Yes’ ‘No’ ‘Yes’ ‘No’<br>  ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Electronic check’<br>  102.47469287884003 3553.063238271951</p><p> ‘Female’ ‘0’ ‘No’ ‘No’ 10.409424239667828 ‘Yes’ ‘Yes’ ‘DSL’ ‘No’ ‘No’ ‘No’ ‘No’ ‘No’ ‘Yes’<br>  ‘Month-to-month’ ‘No’ ‘Electronic check’<br>  72.89683257375917 749.7780225143397</p><p> ‘Male’ ‘0’ ‘Yes’ ‘No’ 68.0 ‘Yes’ ‘Yes’ ‘Fiber optic’ ‘Yes’ ‘Yes’ ‘Yes’ ‘Yes’<br>  ‘Yes’ ‘Yes’ ‘Two year’ ‘Yes’ ‘Credit card (automatic)’<br>  111.84516691088298 7754.865079775263</p><p> ‘Male’ ‘0’ ‘No’ ‘No’ 57.53490684507468 ‘No’ ‘No phone service’ ‘DSL’ ‘No’ ‘Yes’ ‘Yes’<br>  ‘No’ ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Electronic check’<br>   52.08537000221106 2966.5298068815946</p><p>CTABGAN：<br>‘Female’ ‘1’ ‘Yes’ ‘No’ 25.813646159053306 ‘Yes’ ‘No’ ‘Fiber optic’ ‘No’ ‘Yes’ ‘No’ ‘No’<br>  ‘No’ ‘No’ ‘Month-to-month’ ‘Yes’ ‘Credit card (automatic)’<br>   72.4520499161782 107.12076519599646</p><p> ‘Male’ ‘0’ ‘No’ ‘Yes’ 7.578428442708454 ‘Yes’ ‘No’ ‘DSL’ ‘No’ ‘No’ ‘No’ ‘No’ ‘No’ ‘No’<br>  ‘Month-to-month’ ‘No’ ‘Mailed check’<br>  45.84371280675952 105.69947914250504</p><p> ‘Male’ ‘0’ ‘No’ ‘No’  1.9809866925261472 ‘Yes’ ‘Yes’ ‘Fiber optic’ ‘No’ ‘No’ ‘No’ ‘No’<br>  ‘Yes’ ‘No’ ‘Month-to-month’ ‘Yes’ ‘Bank transfer (automatic)’<br>   81.46474915190095 40.94928790189158</p><p> ‘Female’ ‘1’ ‘No’ ‘Yes’ 26.57383830887195 ‘Yes’ ‘No phone service’ ‘DSL’ ‘Yes’ ‘Yes’<br>  ‘Yes’ ‘No’ ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘No’ ‘Electronic check’<br>   57.69859110911275 781.0754735958174</p><p> ‘Male’ ‘0’ ‘Yes’ ‘No’  28.8168545923753 ‘Yes’ ‘Yes’ ‘DSL’ ‘No’ ‘Yes’ ‘No’ ‘Yes’ ‘Yes’<br>  ‘Yes’ ‘Month-to-month’ ‘No’ ‘Credit card (automatic)’<br>  77.30306219710255 756.2990340865898</p><p>In the field of data mining, there are commonly encountered issues of data imbalance and inadequate protection of user privacy data. These issues can have a detrimental impact on the accuracy of model predictions and the applicability of models in privacy-preserving scenarios. Therefore, the generation of new data has emerged as a prominent solution in addressing these challenges.<br>However, generating high-quality data poses certain challenges in the field of data mining, which primarily deals with structured data characterized by a high number of dimensions and unrelated features.<br>Considering the successful application of diffusion models in tasks such as image generation, this study attempts to apply diffusion models to the task of customer churn prediction.<br>This paper employs Gaussian diffusion models and polynomial diffusion models to generate data for numerical and categorical features in churn data. It also conducts research and analysis on the predictive performance and privacy protection capabilities of these models.<br>We conducted extensive experiments on customer churn data from multiple domains to explore the potential of merging synthetic data with real data for reconstruction.<br>The experimental results indicate that the adoption of the diffusion model enables the generation of high-quality data. Furthermore, the generated data exhibits improvements across various customer churn prediction methods, with a particular advantage observed for weak classifiers. This approach also effectively mitigates the issue of data imbalance.<br>Moreover, the data generated by the diffusion model exhibits a distribution that is closer to real data, thereby possessing potential value in preserving customer privacy.</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>论文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>扩散模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>扩散模型调研</title>
    <link href="/2025/06/20/Notes/%E8%AE%BA%E6%96%87/%E6%89%A9%E6%95%A3%E6%A8%A1%E5%9E%8B%E8%B0%83%E7%A0%94/"/>
    <url>/2025/06/20/Notes/%E8%AE%BA%E6%96%87/%E6%89%A9%E6%95%A3%E6%A8%A1%E5%9E%8B%E8%B0%83%E7%A0%94/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>12.27<br>调研AI发展中的表格类数据研究趋势<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231227125526.png" alt="image.png"></p><p>看扩散模型<a href="https://zhuanlan.zhihu.com/p/624221952">超详细的扩散模型（Diffusion Models）原理+代码 - 知乎</a><br>看TabDDPM<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104173325.png" alt="image.png"></p><p>看Improved DDPM<br>看Generative models for tabular problems、ddpm diffusion model相关检索。</p><h3 id="Accelerating-Diffusion-Models-via-Early-Stop-of-the-Diffusion-Process"><a href="#Accelerating-Diffusion-Models-via-Early-Stop-of-the-Diffusion-Process" class="headerlink" title="Accelerating Diffusion Models via Early Stop of the Diffusion Process"></a>Accelerating Diffusion Models via Early Stop of the Diffusion Process</h3><h4 id="2022-CVPR-2205-12524-pdf"><a href="#2022-CVPR-2205-12524-pdf" class="headerlink" title="2022 CVPR 2205.12524.pdf"></a>2022 CVPR <a href="https://arxiv.org/pdf/2205.12524.pdf">2205.12524.pdf</a></h4><p>在实际应用中，DDPM往往需要数百甚至数千个去噪步骤才能从高斯噪声中获得高质量的样本，从而导致推理效率极低。<br>在这项工作中，我们提出了一种针对 DDPM 的原则性加速策略，称为 Early-Stopped DDPM (ES-DDPM)。关键思想是尽早停止扩散过程，其中仅考虑少数初始扩散步骤，并且反向降噪过程从非高斯分布开始。 ES-DDPM中进一步<strong>采用强大的预训练生成模型，如GAN和VAE，通过扩散从预训练生成模型获得的样本</strong>，可以有效地实现对目标非高斯分布的采样。通过这种方式，所需的去噪步骤数量显着减少。</p><p>为了最大化数据对数似然 log p(x0)，我们需要最小化两个损失项：LDDPM 和LVAE。我们将证明，这意味着我们可以分别训练 ES-DDPM 和变分自动编码器（VAE），然后将它们组合在一起以获得新的生成模型。<br>分别训练ES-DDPM和VAE后，我们可以将它们组合起来形成新的生成模型。我们按照方程 5 生成样本，如图 1 所示：首先从标准高斯分布中采样 z，然后使用 VAE 的解码器生成图像 fφ(z)。接下来，从公式 11 中描述的分布中采样 xT ‘。最后，使用 ES-DDPM 从 pθ(xt−1|xt) 中采样 xt−1，其中 t &#x3D; T ‘, T ‘ − 1, · · · , 1 ，并输出生成的图像x0。注意，在上面的采样过程中，我们只需要使用解码器fφ(z)，而没有使用编码器qψ(z|x0)。这意味着我们不仅可以将 ES-DDPM 与 VAE 结合起来，还可以与任何可以将潜在代码 z 映射到干净图像的生成模型（例如 GAN）结合起来。由于 GAN 训练完成后，它的生成器非常类似于 VAE 的解码器，只是生成器的编码器是未知的，但我们根本不需要编码器从组合模型生成样本。因此，我们也可以将 fφ(z) 视为经过训练的 GAN 的生成器。</p><h3 id="Learning-Fast-Samplers-for-Diffusion-Models-by-Differentiating-Through-Sample-Quality"><a href="#Learning-Fast-Samplers-for-Diffusion-Models-by-Differentiating-Through-Sample-Quality" class="headerlink" title="Learning Fast Samplers for Diffusion Models by Differentiating Through Sample Quality"></a>Learning Fast Samplers for Diffusion Models by Differentiating Through Sample Quality</h3><h3 id="2022-ICLR-Learning-Fast-Samplers-for-Diffusion-Models-by-Differentiating-Through-Sample-Quality-OpenReview"><a href="#2022-ICLR-Learning-Fast-Samplers-for-Diffusion-Models-by-Differentiating-Through-Sample-Quality-OpenReview" class="headerlink" title="2022 ICLR Learning Fast Samplers for Diffusion Models by Differentiating Through Sample Quality | OpenReview"></a>2022 ICLR <a href="https://openreview.net/forum?id=VFBjuF8HEp">Learning Fast Samplers for Diffusion Models by Differentiating Through Sample Quality | OpenReview</a></h3><p><strong>通过区分样本质量进行快速采样</strong><br>我们引入可微扩散采样器搜索（DDSS）：一种通过区分样本质量分数来优化任何预训练扩散模型的快速采样器的方法。我们还提出了广义高斯扩散模型（GGDM），这是一系列用于扩散模型的灵活非马尔可夫采样器。我们表明，通过梯度下降最大化样本质量分数来优化 GGDM 采样器的自由度可以提高样本质量。我们的优化过程使用重参数化技巧和梯度重物化通过采样过程进行反向传播。</p><h3 id="Learning-to-Efﬁciently-Sample-from-Diffusion-Probabilistic-Models"><a href="#Learning-to-Efﬁciently-Sample-from-Diffusion-Probabilistic-Models" class="headerlink" title="Learning to Efﬁciently Sample from Diffusion Probabilistic Models"></a>Learning to Efﬁciently Sample from Diffusion Probabilistic Models</h3><p><strong>引入了一种动态规划算法，减少推理步数，进行快速采样</strong><br>在这项工作中，我们将推理调度路径的选择视为一个独立的优化问题，其中我们尝试学习最佳调度。我们的方法依赖于动态规划算法，在给定 K 个细化步骤的固定预算和预先训练的 DDPM 的情况下，我们找到最大化优化目标 (ELBO) 的时间步集。作为优化目标，ELBO 具有关键的可分解性属性：总 ELBO 是各个 KL 项的总和，对于任何两个推理路径，如果时间步 (s, t) 连续出现在两者中，则它们共享一个共同的 KL 项，因此承认记忆化。<br>引入了一种动态规划算法，该算法基于 ELBO 为 K 细化步骤的所有可能计算预算找到最佳推理路径。该算法搜索 T &gt; K 个时间步长，仅需要 O(T ) 神经网络前向传递。它只需要对预训练的DDPM 应用一次，不需要训练或重新训练DDPM，并且适用于时间离散和时间连续的DDPM。</p><h3 id="Deep-Equilibrium-Approaches-to-Diffusion-Models"><a href="#Deep-Equilibrium-Approaches-to-Diffusion-Models" class="headerlink" title="Deep Equilibrium Approaches to Diffusion Models"></a>Deep Equilibrium Approaches to Diffusion Models</h3><p>从不同的角度（深度）平衡（DEQ）定点模型来研究扩散模型。具体来说，我们扩展了最近的去噪扩散隐式模型（DDIM）[68]，并将整个采样链建模为联合多变量定点系统。该设置提供了扩散和平衡模型的优雅统一，并显示出以下优点：1）单图像采样，因为它用并行采样过程取代了全串行典型采样过程； 2）模型反演，我们可以利用 DEQ 设置中的快速梯度来更快地找到生成给定图像的噪声。该方法也是正交的，因此与用于减少采样时间或改进模型反演的其他方法互补。</p><h3 id="Improved-Denoising-Diffusion-Probabilistic-Models"><a href="#Improved-Denoising-Diffusion-Probabilistic-Models" class="headerlink" title="Improved Denoising Diffusion Probabilistic Models"></a>Improved Denoising Diffusion Probabilistic Models</h3><p>在本文中，我们证明 DDPM 可以实现与其他基于似然的模型竞争的对数似然，即使在 ImageNet 等高多样性数据集上也是如此。为了更紧密地优化变分下界（VLB），我们使用简单的重新参数化和混合学习目标来学习逆向过程方差，该混合学习目标将 VLB 与 Ho 等人的简化目标相结合。我们令人惊讶地发现，通过我们的混合目标，我们的模型比直接优化对数似然获得的模型获得了更好的对数似然，并且发现后一个目标在训练过程中具有更多的梯度噪声。我们证明了一种简单的重要性采样技术可以减少这种噪声，并使我们能够比混合目标获得更好的对数似然。在将学习到的方差合并到我们的模型中后，我们惊讶地发现我们可以用很少的时间从我们的模型中<strong>以更少的步骤进行采样</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>论文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>扩散模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文查阅、写作与投稿的综合指南</title>
    <link href="/2025/06/20/Notes/%E8%AE%BA%E6%96%87/%E8%AE%BA%E6%96%87%E6%9F%A5%E9%98%85%E3%80%81%E5%86%99%E4%BD%9C%E4%B8%8E%E6%8A%95%E7%A8%BF%E7%9A%84%E7%BB%BC%E5%90%88%E6%8C%87%E5%8D%97/"/>
    <url>/2025/06/20/Notes/%E8%AE%BA%E6%96%87/%E8%AE%BA%E6%96%87%E6%9F%A5%E9%98%85%E3%80%81%E5%86%99%E4%BD%9C%E4%B8%8E%E6%8A%95%E7%A8%BF%E7%9A%84%E7%BB%BC%E5%90%88%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>学习性阅读：获取知识<br>批判性阅读：创造知识<br>论文中的研究内容得到的检验少，需要更多批判<br>正题<br>反题<br>合题：结合正题和反题</p><p>问题是完成任务时出现某种现象的内在原因<br>批判性阅读帮助发现、提出问题</p><p>如何进行批判性阅读：<br>批：比较（求诸于外） 判：剖析（求诸于内）</p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231115192520.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231115192615.png" alt="image.png"></p><p>论文写作工具：Overleaf &amp; Grammarly</p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231115193425.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231115193727.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231115194316.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231115194647.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231115200808.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231115204202.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231115204413.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231115205611.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>论文</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>专业实习</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E4%B8%93%E4%B8%9A%E5%AE%9E%E4%B9%A0/%E4%B8%93%E4%B8%9A%E5%AE%9E%E4%B9%A0/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E4%B8%93%E4%B8%9A%E5%AE%9E%E4%B9%A0/%E4%B8%93%E4%B8%9A%E5%AE%9E%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/e2ecdf84352b5a5f1fd2a63b3e19c840_.jpg" alt="e2ecdf84352b5a5f1fd2a63b3e19c840_.jpg"></p><p><a href="file:///C:/Users/wang/Documents/WeChat%20Files/wxid_3v4u4g0js7gz22/FileStorage/File/2024-08/9ceb9198bbb4b3df50474a6a8594956c_02ddf5d511aa3195f5837db881d7418d_8.pdf">实验文档</a></p><p>大模型实验 三选一 </p><ul><li>实验1：基于 Stable_diffusion 实现图像生成图像的功能。主要 内容为完成各项基础运算配置、实现在潜在空间的反向过程特征 采样、补全推理阶段的关键步骤以及一系列基 本适配工作，实现由图像&#x2F;文字生成图像。 </li><li>实验2：基于 Llama2实现聊天机器人应用并在 DLP平台上进行 部署。主要内容为完成模型加载和适配、对话模板的应用、文本 生成的基本流程、模型推理的关键步骤，实现 DLP上的机器人聊 天功能。 </li><li>实验3：基于 CodeLlama 实现代码生成并在 DLP平台上进行部 署。主要内容为补全推理模块代码，具体包括模型加载和设置、 文本生成和性能统计、结果处理和打印等步骤，实现 DLP上的代 码生成。</li></ul><p>团队实验：基于pytorch自由选题 l 实验讲师讲解示例并提供文档作为参考 l 不限平台，不限主题，根据小组汇报和完成度来打分 l 在MLU平台上完成大模型移植，可额外获得10%加分</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>专业实习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Blitz软件</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Blitz%E8%BD%AF%E4%BB%B6/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Blitz%E8%BD%AF%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Blitz是一个软件包，内含一个虚拟机，给操作者提供一个建立操作系统内核的功能</p><p>学生将在主机上编辑、编译和链接他们的操作系统内核项目。然后，他们将使用仿真器在虚拟机上执行这些项目。当学生的代码出现错误时，仿真器会显示各种错误信息，学生可以使用仿真器工具进行调试</p><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><p>CPU 采用 RISC 设计，大致仿照 Sun 的 Sparc 架构。 BLITZ 处理器包含 32 个通用整数寄存器，每个寄存器为 32 位。</p><p>处理器有两种执行模式，即 “系统模式 “和 “用户模式”。内核代码在系统模式下运行，而应用程序则在用户模式下运行。</p><p>BLITZ 机器包括两个输入输出设备。第一个是磁盘。仿真器通过主机上的文件来模拟磁盘。第二个 I&#x2F;O 设备是终端，仿真器通常将终端输入&#x2F;输出直接传递到主机的用户界面，这样学生就可以直接与运行中的 BLITZ 代码交互。</p><p>该架构还包括一个 “trap “指令，用户程序可以执行该指令。陷阱指令允许用户进程进入内核。</p><p>调试器内置于模拟器中，并且是模拟器的组成部分。该模拟器可以在命令行模式下运行，学生可以一次键入一个命令。这些命令可用于调试其 BLITZ 内核代码。</p><p>CPU 都在系统模式或用户模式下执行。内核代码在系统模式下执行，而用户级程序在用户模式下执行。任何指令都可以在系统模式下执行，但某些指令是有特权的，因为它们只能在系统模式下执行。特权指令的示例包括更改页表和更改模式本身的指令。</p><p>在 BLITZ 架构中，寄存器“r15”指向执行堆栈，该堆栈从较高的内存地址向较低的地址向下增长。</p><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul><li><strong>blitz：</strong> The BLITZ virtual machine emulator and debugger虚拟机模拟器和调试器</li><li><strong>asm：</strong> The BLITZ assembler汇编器。<blockquote><p>汇编器（Assembler）是将汇编语言翻译为机器语言的程序。一般而言，汇编生成的是目标代码，需要经链接器（Linker）生成可执行代码才可以执行。</p></blockquote></li><li><strong>lddd：</strong> The BLITZ linker链接器</li><li><strong>dumpObj：</strong> A tool to examine BLITZ object and executable files检查blitz对象和可执行文件</li><li><strong>diskUtil：</strong> A tool to manipulate the initial file system on the emulated BLITZ disk用于操作模拟 BLITZ 磁盘上的初始文件系统的工具</li><li><strong>kpl：</strong> The KPL compiler编译器</li></ul><h4 id="模拟器Emulator"><a href="#模拟器Emulator" class="headerlink" title="模拟器Emulator"></a>模拟器Emulator</h4><p>在 Unix 下运行时，您可以通过在 Unix 提示符下键入“blitz”来启动模拟器。模拟器首先读入 BLITZ 程序并将其加载到内存中。通常，BLITZ 可执行文件称为“a.out”，但也可以指定其他名称。模拟器首先从“a.out”读取数据并将其加载到其内部存储器中。实际上，模拟器首先使用“a.out”文件中的字节初始化 BLITZ 机器的主内存</p><p>asm 程序是 BLITZ 汇编程序。它以汇编语言程序为输入，生成一个对象文件<br>第二个程序（称为 “ldd”）是 BLITZ 连接器。它输入一个或多个对象文件，生成一个名为 “a.out “的可执行文件。</p><p>quit 命令（可缩写为 “q”）将终止 BLITZ 模拟器。</p><p>go 指令（可缩写为 “g”）用于启动仿真器的执行。一旦开始执行，BLITZ 机器将执行指令，直到检测到错误或 BLITZ 机器执行 “等待 “或 “调试 “指令为止。</p><p>在KPL中，以“.h”结尾的文件称为“头文件”，以“.c”结尾的文件称为“代码文件”。每个包（如HelloWorld）都会有头文件和代码文件。HelloWorld包使用系统包。每当HelloWorld使用的包的头文件发生变化时，HelloWorld必须重新编译。但是，如果系统的代码文件发生变化，则不需要重新编译HelloWorld。</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Deadlock死锁</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Deadlock%E6%AD%BB%E9%94%81/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Deadlock%E6%AD%BB%E9%94%81/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Pi为进程，Rj为资源<br>Pi请求资源Rj：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231025100217.png" alt="image.png"><br>Pi拥有资源Rj：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231025100233.png" alt="image.png"></p><p>不死锁：<br>P3执行完后释放R3，P2就可以申请到R3，P2执行，P2执行完之后释放R1，P1就可以申请到R1执行<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231025100454.png" alt="image.png"></p><p>死锁：<br>P3申请R2，R2被P1持有，P3无法执行，导致P2和P1无法执行<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231025100550.png" alt="image.png"></p><ul><li>图里面没有环则不会死锁</li><li>图里面有环，如果一个资源里只有一个实例，则会死锁；如果一个资源里有多个实例，则不一定会死锁</li></ul><p>Hold and Wait持有等待<br>要么持有全部资源，要么等待</p><p>资源类型</p><ul><li>Available：一个长度为m的向量，表示每种可用资源的数量（m种资源）</li><li>Allocation：一个n×m的矩阵代表每个进程现在持有的资源数量（n个进程）</li><li>Request：一个n×m的矩阵代表每个进程需要的资源数量</li></ul><p>检测算法：</p><ol><li><p><code>Work</code>和<code>Finish</code>为长度为m和n的向量，<br> (a) Work &#x3D; Available<br> (b) For <strong>i &#x3D; 1,2, …, n</strong>,<br>     if <strong>Allocationi !&#x3D; 0</strong>,<br>     then <strong>Finish[i] &#x3D; false</strong>;<br>     otherwise, <strong>Finish[i] &#x3D; true</strong></p></li><li><p>找到一个index <code>i</code>，使得<br> (a) Finish[i] &#x3D;&#x3D; false<br> (b) Request_i &lt;&#x3D; Work</p></li><li><p>Work &#x3D; Work + Allocation_i<br> Finish[i] &#x3D; true<br> go to step 2</p></li><li><p>If Finish[i] &#x3D;&#x3D; false, for some i, 1 &lt;&#x3D; i &lt;&#x3D; n, then the system is in deadlock state. Moreover, if Finish[i] &#x3D;&#x3D; false, then P_i is deadlocked</p></li></ol><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>在并发环境下，各进程因竞争资源而造成的一种互相等待对方手里的资源，导致各进程都阻塞，都无法向前推进的现象，就是“死锁”。</p><h4 id="死锁产生的必要条件"><a href="#死锁产生的必要条件" class="headerlink" title="死锁产生的必要条件"></a>死锁产生的必要条件</h4><ol><li>互斥条件：只有对互斥使用的资源的争抢才会导致死锁</li><li>不剥夺条件：进程所获得的资源未使用完之前，不能由其他进程强行夺走，只能主动释放</li><li>请求和保持条件：进程已经保持了至少一个资源，又提出新的资源请求，而该资源又被其他进程占用，此时请求进程被阻塞，但又对自己已有的资源保持不放</li><li>循环等待条件：存在一种进程资源的循环等待链，链中的每一个进程已获得的资源同时被下一个进程所请求</li></ol><h4 id="产生情况"><a href="#产生情况" class="headerlink" title="产生情况"></a>产生情况</h4><ol><li>对系统资源的竞争</li><li>进程推进顺序非法</li><li>信号量的使用不当也会造成死锁</li></ol><h4 id="预防死锁"><a href="#预防死锁" class="headerlink" title="预防死锁"></a>预防死锁</h4><p>破坏互斥条件：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105150332.png" alt="image.png"><br>破坏不剥夺条件：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105150225.png" alt="image.png"></p><p>破坏请求和保持条件：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105150533.png" alt="image.png"></p><p>破坏循环等待条件：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105150733.png" alt="image.png"></p><h4 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h4><blockquote><p>安全序列：如果按照这种序列分配资源，则每个进程都能顺利完成。</p></blockquote><p>如果分配了资源后，系统中找不出任何一个安全序列，系统就进入了不安全状态。如果系统进入不安全状态，就<strong>有可能发生死锁</strong></p><p>银行家算法：在进程提出资源申请时，先预判此次分配是否会导致系统进入不安全状态，如果会进入不安全状态，就暂时不答应这次请求，让该进程先阻塞等待。</p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105152524.png" alt="image.png"></p><h4 id="死锁的检测"><a href="#死锁的检测" class="headerlink" title="死锁的检测"></a>死锁的检测</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105152801.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105153928.png" alt="image.png"></p><h4 id="死锁的解除"><a href="#死锁的解除" class="headerlink" title="死锁的解除"></a>死锁的解除</h4><ol><li>资源剥夺法：挂起某些死锁进程，并抢占它的资源。但是应防止被挂起的进程长时间得不到资源而饥饿</li><li>撤销进程法：强制撤销部分、甚至全部死锁进程。</li><li>进程回退法：让一个或多个死锁进程回退到足以避免死锁的地步。要求记录历史信息，设置还原点</li></ol>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Memory内存</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Memory%E5%86%85%E5%AD%98/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Memory%E5%86%85%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>程序需要从硬盘读取到内存才能执行<br>CPU可以直接访问的只有内存和寄存器<br>内存单元只看到地址流和读写请求<br>内存访问需要很多周期，导致停顿（stall）<br>Cache（高速缓存）设置在内存和CPU寄存器之间</p><p>指令和数据到内存地址的地址绑定可以发生在三个不同的阶段<br>编译时：如果内存位置先验已知，则可以生成绝对代码；如果起始位置发生变化，则必须重新编译代码<br>加载时间：如果编译时内存位置未知，则必须生成可重定位代码<br>执行时间：如果进程可以在执行期间从一个内存段移动到另一个内存段，则绑定会延迟到运行时 需要硬件支持地址映射（例如基址和限制寄存器）</p><p>调用函数会分配一个调用框架来存储所有局部变量以及返回给被调用者所需的上下文</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Monitor管程</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Monitor%E7%AE%A1%E7%A8%8B/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Monitor%E7%AE%A1%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231018102847.png" alt="image.png"><br>每个monitor都有一个互斥锁，monitor中只能有一个线程处于活动状态</p><h3 id="Condition-variables"><a href="#Condition-variables" class="headerlink" title="Condition variables"></a>Condition variables</h3><p>condition是一个类，实现了以下函数：</p><ul><li>condition.wait()</li><li>condition.signal()</li><li>condition.broadcast()</li></ul><h3 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h3><p>管程是一种特殊的软件模块，有这些部分组成：</p><ol><li>局部于管程的共享数据结构说明</li><li>对该数据结构进行操作的一组过程</li><li>对局部于管程的共享数据设置初始值的语句</li><li>管程有一个名字</li></ol><p>管程的基本特征：</p><ol><li>局部于管程的数据只能被局部于管程的过程所访问</li><li>一个进程只有通过调用管程内的过程才能进入管程访问共享数据</li><li>每次仅允许一个进程在管程内执行某个内部过程</li></ol>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Processes进程</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Processes%E8%BF%9B%E7%A8%8B/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Processes%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>为什么我们需要同时运行多个程序？称为“多道程序设计” 因为它会提高 CPU 利用率<br>I&#x2F;O 密集型程序大部分时间都在等待 I&#x2F;O，因此最好让 CPU 忙于其他任务</p><p>多道程序设计：在一个物理地址空间中容纳多个进程 每个进程可以是 I&#x2F;O 密集型或 CPU 密集型 混合使用 I&#x2F;O 密集型和 CPU 密集型进程会很好 目标是提高 CPU 利用率 调度程序决定哪个进程执行</p><p>分时（或“多任务”）：非常快速地在进程之间来回切换 - 称为“上下文切换”<br>目标是减少用户与计算机交互时的延迟</p><p>程序由静态代码和数据（如磁盘上的数据）组成。 进程是程序的运行实例。在任何时候，一个程序都可能有 0 个或多个运行实例，例如，一个用户可能同时运行多个 shell</p><p>从运行时上下文的角度来看，进程是一个执行流。执行流是​​执行指令的序列（即“控制线程”）。运行时上下文包含执行指令可能影响或受其影响的所有内容（例如，寄存器、地址空间、文件等持久数据）</p><p>进程可访问的一组内存部分称为进程的地址空间 </p><ul><li>文本 — 程序代码（通常是只读） </li><li>数据 — 全局变量和常量 </li><li>栈（Stack） — 每个帧包含参数、局部变量和函数的返回地址 </li><li>堆（Heap）— 动态分配内存，例如，通过在 C 中调用 malloc()</li></ul><p>允许在同一物理地址空间中执行多个程序<br>虚拟化CPU：多个独立进程同时运行在一台物理机上 但实际上，每个CPU上任一时刻最多只能有一个进程处于活动状态。</p><p>程序是磁盘上的应用程序，由代码和数据组成；<br><strong>程序在执行时就成为进程</strong>。<strong>进程是程序的运行实例</strong>。进程以单个执行线程和地址空间开始。一个进程可以在同一地址空间中启动多个执行线程。<strong>每个线程都有自己的堆栈</strong>，但它们<strong>共享全局数据、代码和堆</strong>。</p><p>当用户执行程序时，操作系统会创建一个进程。操作系统在多个进程之间分时共享 CPU。操作系统调度程序选择要运行的可执行进程之一。<br>调度程序必须保留进程列表<br>调度程序必须保留调度策略的元数据</p><p>策略和机制之间的区别可以实现模块化。调度策略独立于上下文切换功能。</p><p>运行（Running）：此进程当前正在执行<br>就绪（Ready）：此进程已准备好执行（并且将在策略决定时进行调度）<br>阻塞（Blocked）：此进程已挂起（例如，等待某些操作；当该操作完成时，操作系统将取消阻止它）<br>New：此进程正在创建（以确保它不会被调度） Dead&#x2F;termination：此进程已终止（例如，如果父进程尚未读出返回值）</p><p>如果所有进程都被阻塞，应该调度什么进程？空闲进程（idle）。现代内核使用低优先级空闲进程，如果没有其他进程准备好，该进程就会被调度并执行。空闲进程从不阻塞或执行任何 I&#x2F;O。空闲进程是解决挑战性问题的简单方法。如果没有空闲进程，调度程序将必须检查是否没有进程准备好运行，并且必须保守地采取行动。空闲进程保证至少有一个进程可以运行</p><p>操作系统维护活动进程的数据结构（数组&#x2F;列表）。每个进程的信息都存储在进程控制块（在 Linux 上，称为 task_struct）中，其中包含：<br>进程标识符 (PID)<br>进程状态（例如，就绪）<br>指向父进程的指针 (cat &#x2F;proc&#x2F;self&#x2F;status)<br>CPU 上下文（如果进程未运行）<br>指向地址空间的指针 (cat &#x2F;proc&#x2F;self&#x2F;maps)<br>指向打开文件列表的指针（文件描述符，cat &#x2F;proc&#x2F;self&#x2F;fdinfo&#x2F;*）</p><p>保存进程的所有状态允许进程暂时挂起并稍后从同一点恢复<br>然后可以通过恢复其保存的状态来恢复另一个进程<br>执行上下文切换所需的时间是我们希望最小化的开销</p><p>程序：由磁盘上的可执行文件组成。包含启动进程的所有信息<br>进程：程序的运行实例；具有数据部分和堆栈初始化<br>线程：一个进程可以在同一地址空间中拥有多个线程（计算相同的数据）</p><p>读取地址0xc0f3的两个进程可能读取到不同的值。而同一进程中的两个线程会读取相同的值</p><p>进程可以通过系统调用API（应用程序编程接口）请求服务<br>进程 API 使进程能够通过一组系统调用来控制自身和其他进程：<br>getpid() 检索进程的 ID，每个进程都有唯一的 PID<br>fork() 创建一个新的子进程（进程的副本）<br>exec () 执行一个新程序<br>exit() 终止当前进程<br>wait() 阻塞父进程，直到子进程终止</p><p>操作系统为新进程（子进程）分配数据结构。操作系统复制调用者（父级）的地址空间。子进程已准备就绪并添加到进程列表中。 fork() 为父&#x2F;子返回不同的值。父级和子级继续在各自的地址空间副本中执行<br>exec() 替换地址空间，从磁盘加载新程序。总是执行同一个程序很无聊。程序可以传递命令行参数和环境。旧的地址空间&#x2F;状态被销毁，除了保留的 STDIN、STDOUT、STDERR 之外，允许父级重定向&#x2F;重新连接子级的输出！<br>假设用户想要启动另一个程序。为此，操作系统需要创建一个新进程并创建一个新的地址空间来加载程序。<br> fork() 使用该地址空间的副本创建一个新进程 exec() 为程序创建一个新的地址空间 clone() 将一个（执行的）线程添加到该地址空间<br> 子进程与其父进程相关联。 exit(int retval) 接受一个返回值参数。父级可以 wait() 终止子级并读取子级的返回值<br>fork() 通过复制调用进程地址空间的内容来创建新进程 新进程有自己的地址空间（内容从父进程复制） 操作系统中的进程控制块</p><p>进程直接在CPU上执行指令</p><p>进程可能会做一些非法的事情（读&#x2F;写不属于该进程的内存，直接访问硬件） 进程可能会永远运行（操作系统必须保持控制） 进程可能会做一些缓慢的事情，例如 I&#x2F;O（操作系统可能想要切换到另一个进程）<br>解决方案：操作系统在硬件的帮助下维持一些控制。例如，操作系统维护定时器以定期拦截执行，并且进程可能不会执行直接访问硬件的特权指令</p><p>在大多数操作系统上，进程是： 相互隔离 与操作系统隔离 隔离是安全的核心要求： 将错误限制在进程中 启用权限隔离 启用分区（将复杂系统分解为独立的故障域)</p><h3 id="进程的组成–PCB"><a href="#进程的组成–PCB" class="headerlink" title="进程的组成–PCB"></a>进程的组成–PCB</h3><p>进程控制块PCB，记录PID、UID<br>进程被创建时创建唯一PCB，进程结束时回收<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231102232517.png" alt="image.png"></p><h3 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231102232654.png" alt="image.png"></p><h3 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231102233236.png" alt="image.png"></p><p>进程的等待队列用指针建立表</p><h3 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h3><h4 id="实现原语的原子性："><a href="#实现原语的原子性：" class="headerlink" title="实现原语的原子性："></a>实现原语的原子性：</h4><p>关中断指令和开中断指令。这两个指令属于特权指令，只能CPU调用<br>CPU执行了关中断指令后就不再检查中断信号，直到执行开中断指令。</p><h4 id="进程控制相关的原语"><a href="#进程控制相关的原语" class="headerlink" title="进程控制相关的原语"></a>进程控制相关的原语</h4><p>创建原语：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231102234319.png" alt="image.png"><br>撤销原语：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231102234559.png" alt="image.png"></p><p>阻塞原语和唤醒原语：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231102234718.png" alt="image.png"></p><p>切换原语：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231102235107.png" alt="image.png"></p><h4 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h4><h5 id="共享存储"><a href="#共享存储" class="headerlink" title="共享存储"></a>共享存储</h5><p>操作系统在内存中划分一块共享存储区<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231103152934.png" alt="image.png"><br>基于储存区的共享：高级通信方式，灵活性高，速度快<br>基于数据结构的共享：低级通信方式，速度慢、限制多</p><h5 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h5><p>进程间的数据交换以格式化的消息为单位，通过发送和接收消息两个原语进行数据交换。<br>直接通信方式<br>间接通信方式<br>管道通信</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Scheduling调度</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Scheduling%E8%B0%83%E5%BA%A6/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Scheduling%E8%B0%83%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>调度有两个方面：<br>1）如何从一个进程切换到另一个进程<br>2）下一个应该运行什么进程<br>机制：上下文切换（如何切换）<br>机制：抢占（保持控制）<br>策略：调度（切换到哪里）</p><p>上下文切换是一种允许操作系统存储当前进程状态并切换到另一个先前存储的上下文的机制。<br>上下文切换的原因：<br>进程完成&#x2F;退出<br>进程执行缓慢的硬件操作（例如，从磁盘加载）并且操作系统切换到另一个就绪任务<br>硬件需要操作系统帮助并发出中断<br>操作系统决定抢占该任务并切换到另一个任务（即该进程已用完其时间片）</p><p>异步返回的函数调用：进程A开始执行上下文切换，但进程B在函数返回后继续执行。<br>该函数将所有寄存器保存在暂存区域（在进程的内核堆栈上或任务结构的预定义区域中）。<br>操作系统切换地址空间。<br>该函数从暂存区恢复所有寄存器。<br>操作系统返回到进程B。</p><p>如果任务从未放弃控制权 (yield())、退出或执行 I&#x2F;O，那么它可以永远运行，并且操作系统无法获得控制权。<br>因此，操作系统在调度进程之前设置一个计时器。如果定时器到期，硬件就会中断进程的执行并切换到内核。然后内核决定该进程是否可以继续。</p><p>上下文切换机制负责​​内核如何从一个进程切换到另一个进程，即通过存储其上下文并恢复另一个进程的上下文。调度策略决定接下来应该运行哪个进程。如果只有一个“就绪”进程，那么答案很简单。如果有更多进程，则策略决定进程的执行顺序。</p><p>在分析调度程序策略时，我们使用以下术语：<br>利用率：CPU 执行程序的时间比例（目标：最大化）<br>周转时间：完成作业所需的总时间，$T_{completion} − T_{arrival}$（目标：最小化）<br>响应时间：从作业到达到第一次调度的时间，$T_{firstrun} - T_{arrival}$（目标：最小化）<br>公平性：所有进程随着时间的推移获得相同数量的 CPU（目标：无饥饿）<br>进度：允许进程向前推进（目标：最小化内核中断）</p><p>让我们逐步了解调度策略。我们从一些简化假设开始<br>每个作业的运行时间相同<br>所有作业在同一时间到达 一旦启动，每个作业都会运行到完成<br>所有作业只使用 CPU（无 I&#x2F;O）<br>作业的运行时间已知 </p><h3 id="调度的三个层次"><a href="#调度的三个层次" class="headerlink" title="调度的三个层次"></a>调度的三个层次</h3><h4 id="高级调度"><a href="#高级调度" class="headerlink" title="高级调度"></a>高级调度</h4><p>按一定原则从外存的作业后备队列中挑选一个作业调入内存，并创建进程。每个作业只调入一次，调出一次。作业调入时会建立PCB，调出时才撤销PCB。</p><h4 id="中级调度"><a href="#中级调度" class="headerlink" title="中级调度"></a>中级调度</h4><p>内存中暂时调到外存等待的进程状态为挂起状态。被挂起的进程PCB会被组织成挂起队列<br>中级调度按照某种策略决定将哪个处于挂起状态的进程重新调入内存。</p><h4 id="低级调度（进程调度）"><a href="#低级调度（进程调度）" class="headerlink" title="低级调度（进程调度）"></a>低级调度（进程调度）</h4><p>按某种策略从就绪队列中选取一个进程，将处理机分配给它。进程调度是操作系统中最基本的一种调度，进程调度的频率很高，一般几十毫秒一次。</p><h3 id="进程调度的时机"><a href="#进程调度的时机" class="headerlink" title="进程调度的时机"></a>进程调度的时机</h3><ul><li>当前进程主动放弃处理机</li><li>当前进程被动放弃处理机<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104113430.png" alt="image.png"></li></ul><p>不能进行进程调度与切换的情况：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104113457.png" alt="image.png"></p><h3 id="进程调度的方式"><a href="#进程调度的方式" class="headerlink" title="进程调度的方式"></a>进程调度的方式</h3><ul><li>非抢占式</li><li>抢占式：优先处理更紧急的进程</li></ul><p>进程切换的过程：</p><ol><li>对原来运行进程各种数据的保存</li><li>对新的进程各种数据的恢复<br>进程切换是有代价的</li></ol><h3 id="调度程序"><a href="#调度程序" class="headerlink" title="调度程序"></a>调度程序</h3><p>决定让谁运行，以及运行多长时间<br>抢占式调度策略在时钟中断时唤醒调度程序</p><p>闲逛进程（idle）：</p><ul><li>优先级最低</li><li>可以是0地址指令，占一个完整的指令周期</li><li>能耗低</li></ul><h3 id="CPU利用率"><a href="#CPU利用率" class="headerlink" title="CPU利用率"></a>CPU利用率</h3><p>利用率&#x3D;忙碌的时间&#x2F;总时间</p><p><strong>周转时间：作业被提交给系统开始，到作业完成为止需要的时间</strong>。包括四个部分：</p><ul><li>作业在外存后备队列上等待作业调度（高级调度）的时间</li><li>进程在就绪队列上等待进程调度的时间</li><li>进程在CPU上执行的时间</li><li>进程等待I&#x2F;O操作完成的时间</li></ul><p>平均周转时间：各作业周转时间之和&#x2F;作业数<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104115312.png" alt="image.png"></p><p>等待时间：进程处于等待处理机状态时间之和</p><p>响应时间：用户从提出请求到首次产生响应所用的时</p><h3 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h3><h4 id="先来先服务（FCFS）"><a href="#先来先服务（FCFS）" class="headerlink" title="先来先服务（FCFS）"></a>先来先服务（FCFS）</h4><p>按照到达的先后顺序，等待时间越久的越先得到服务。<br>例题：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104145306.png" alt="image.png"><br>非抢占式算法<br>优点：公平，算法实现简单<br>缺点：排在长作业（进程）后面的短作业需要等待很长时间，带权周转时间很大。即FCFS算法<strong>对长作业有利，对短作业不利</strong>。</p><p>不会导致饥饿</p><h4 id="短作业优先（SJF）"><a href="#短作业优先（SJF）" class="headerlink" title="短作业优先（SJF）"></a>短作业优先（SJF）</h4><p>每次调度时选择当前已到达且运行时间最短的进程。<br>例题：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104150027.png" alt="image.png"><br>非抢占式算法</p><h5 id="抢占式的短作业优先算法：最短剩余时间优先算法（SRTN-STCF）"><a href="#抢占式的短作业优先算法：最短剩余时间优先算法（SRTN-STCF）" class="headerlink" title="抢占式的短作业优先算法：最短剩余时间优先算法（SRTN&#x2F;STCF）"></a>抢占式的短作业优先算法：最短剩余时间优先算法（SRTN&#x2F;STCF）</h5><p>每当有进程加入，就绪队列改变时就需要调度，如果新到达进程的剩余时间比当前运行的进程剩余时间更短，则由新进程抢占处理机，当前进程回到就绪队列。<br>例题：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104150908.png" alt="image.png"><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104150952.png" alt="image.png"><br>未特别说明，短作业优先算法默认是非抢占式的。<br>在所有进程都几乎同时到达时，采用SJF算法的平均等待时间、平均周转时间最少。<br>抢占式的短作业优先算法的平均等待时间、平均周转时间最少。在所有进程同时到达时，SJF算法等同于抢占式SJF算法。</p><p>缺点：可能产生饥饿现象。<strong>短作业友好，长作业不友好</strong>。</p><h4 id="高相应比优先（HRRN）"><a href="#高相应比优先（HRRN）" class="headerlink" title="高相应比优先（HRRN）"></a>高相应比优先（HRRN）</h4><p>在调度时计算每个进程的相应比，选择相应比最高的进程为其服务。</p><blockquote><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104152027.png" alt="image.png"></p></blockquote><p>非抢占式算法<br>例题：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104152220.png" alt="image.png"><br>综合考虑了等待时间和运行时间<br>避免了长作业饥饿的问题<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104152435.png" alt="image.png"></p><h4 id="时间片轮转（RR）"><a href="#时间片轮转（RR）" class="headerlink" title="时间片轮转（RR）"></a>时间片轮转（RR）</h4><p>按各进程到达就绪队列的顺序，轮流让各个进程执行一个<strong>时间片</strong>（如100ms）。若进程未在一个时间片内执行完，则剥夺处理机，将进程重新放到就绪队列队尾重新排队。</p><p>抢占式算法<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104153525.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104153547.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104153618.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104153635.png" alt="image.png"></p><p>如果时间片太大，使得每个进程都可以在一个时间片内完成，则时间片轮转调度算法退化为先来先服务算法，并且会增大进程相应时间。<br>如果时间片太小，会导致进程切换过于频繁。</p><h4 id="优先级调度算法"><a href="#优先级调度算法" class="headerlink" title="优先级调度算法"></a>优先级调度算法</h4><p>每个进程都有各自的优先级，调度时选择优先级最高的进程。<br>有抢占式和非抢占式。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104154536.png" alt="image.png"></p><p>会导致饥饿</p><h4 id="多级反馈队列调度算法（MLFQ）"><a href="#多级反馈队列调度算法（MLFQ）" class="headerlink" title="多级反馈队列调度算法（MLFQ）"></a>多级反馈队列调度算法（MLFQ）</h4><p><strong>设置多级就绪队列，各级队列优先级从高到低，时间片从小到大。</strong><br><strong>新进程到达时先进入第一级队列，按FCFS原则排队等待被分配时间片</strong>。<strong>若用完时间片进程还没结束，则进程进入下一级队列队尾</strong>。如果此时已经在最下级队列，则重新放回最下级队列队尾。<strong>只有在第k级队列为空时，才会为k+1级队头的进程分配时间片</strong><br>抢占式算法。在k级队列的进程运行过程中，若更上级的队列中进入了一个新进程，则由于新进程处于优先级更高的队列中，因此新进程会抢占处理机，原来运行的进程放回k级队列队尾。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104155638.png" alt="image.png"></p><h4 id="完全公平调度器（CFS）"><a href="#完全公平调度器（CFS）" class="headerlink" title="完全公平调度器（CFS）"></a>完全公平调度器（CFS）</h4><p>对于n个正在运行的任务，当这些任务同时不断地运行时，CPU会尽可能分配给他们1&#x2F;n的处理时间。CFS是一种基于加权公平排队思想的调度算法<br>实现：将所有进程保留在红黑树中，按最大执行时间排序（跟踪其正余额） 调度 调度最左边的进程（余额最高的进程） 如果进程退出，则将其从调度树中删除 中断时（时间片或 I&#x2F;O 结束），将进程重新插入树中的新位置</p><blockquote><p>红黑树是一种特殊的二叉搜索树，也就是左边节点都小于根节点都小于右边节点，递归整个树都满足这一点。也就是说最左边的叶子节点是最小的，最右边的叶子节点是最大的。红黑树相比二叉搜索树多了红色黑色两个颜色的宏定义,红黑树有以下5个性质：<br>每个结点要么是红的要么是黑的。<br>  根结点是黑的。<br>  每个叶结点都是黑的。<br>  如果一个结点是红的，那么它的两个儿子都是黑的。<br>  对于任意结点而言，其到叶结点的每条路径都包含相同数目的黑结点。</p></blockquote><ol><li>CFS使用红黑树结构，来存储要调度的任务队列。</li><li>每个节点代表了一个要调度的任务，节点的key即为虚拟时间（vruntime），虚拟时间由这个人物的运行时间计算而来。</li><li>key越小，也就是vruntime越小的话，红黑树对应的节点就越靠左。<br>4. CFS scheduler每次都挑选最左边的节点作为下一个要运行的任务，这个节点是“缓存的”——由一个特殊的指针指向；不需要进行O（logn）遍历来查找。也因此，CFS搜索的时间是O(1)。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Semaphores信号量</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Semaphores%E4%BF%A1%E5%8F%B7%E9%87%8F/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Semaphores%E4%BF%A1%E5%8F%B7%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>sleep(): 暂停线程，把状态改为BLOCKED<br>weakup(): 唤醒另一个线程，把其状态改为READY</p><p>semaphore（信号量）：<br>一个非负整数，记录过往weakup的次数</p><p>或者一个可负整数</p><h3 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h3><p>信号量是一个变量，用来表示系统中某种资源的数量<br>原语是一种特殊的程序段，其执行只能一气呵成，不可被中断。<br>一对原语：wait(S)和signal(S)，S为信号量，简称为P(S)和V(S)</p><h4 id="整型信号量"><a href="#整型信号量" class="headerlink" title="整型信号量"></a>整型信号量</h4><p>用一个整数型变量作为信号量，用来表示系统中某种资源的数量。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105104439.png" alt="image.png"><br>存在的问题：不满足“让权等待”原则，会发生“忙等”</p><h4 id="记录型信号量"><a href="#记录型信号量" class="headerlink" title="记录型信号量"></a>记录型信号量</h4><p>用记录型数据结构表示的信号量<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105104723.png" alt="image.png"><br>S.value的初值表示系统中某资源的数目。遵循“让权等待”原则</p><h3 id="信号量机制实现进程互斥"><a href="#信号量机制实现进程互斥" class="headerlink" title="信号量机制实现进程互斥"></a>信号量机制实现进程互斥</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105105903.png" alt="image.png"><br>设置互斥信号量mutex，初值为1</p><h3 id="信号量机制实现进程同步"><a href="#信号量机制实现进程同步" class="headerlink" title="信号量机制实现进程同步"></a>信号量机制实现进程同步</h3><p>需要保证“一前一后”执行的两个操作（或两句代码）<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105110323.png" alt="image.png"><br>设置同步信号量S，初值为0<br>在“前操作”之后执行V(S)<br>在“后操作”之前执行P(S)<br>例题：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105110711.png" alt="image.png"></p><h3 id="生产者-消费者问题"><a href="#生产者-消费者问题" class="headerlink" title="生产者-消费者问题"></a>生产者-消费者问题</h3><p>系统中有一组生产者进程和一组消费者进程，生产者进程每次生产一个产品放入缓冲区，消费者进程每次从缓冲区中取出一个产品使用。生产者共享一个初始为空、大小为n的缓冲区。</p><ul><li>只有缓冲区没满时，生产者才能把产品放入缓冲区，否则必须等待</li><li>只有缓冲区不空时，消费者才能从中取出产品，否则必须等待</li><li>缓冲区是临界资源，各进程必须互斥访问。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105112301.png" alt="image.png"></li></ul><p>实现互斥的P操作一定要在实现同步的P操作之后。先上锁再操作缓冲区会产生阻塞。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105112422.png" alt="image.png"><br>两个V操作顺序可以交换。</p><h3 id="读者写者问题"><a href="#读者写者问题" class="headerlink" title="读者写者问题"></a>读者写者问题</h3><ol><li>允许多个读者同时对文件执行读操作</li><li>只允许一个写者往文件中写信息</li><li>任一写者在完成写操作前不允许其他读者或者写者工作</li><li>写者执行写操作前，应让已有的读者和写者全部退出<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105130752.png" alt="image.png"><br>用rw实现互斥访问，用count实现多个读进程访问，用mutex实现count和rw的原子化操作<br>潜在问题：只要有读进程还在读，写进程就要一直阻塞等待，可能饿死。这种算法中，读进程是优先的。<br>实现写优先：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105131045.png" alt="image.png"></li></ol><h3 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h3><p>问题描述：<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105131830.png" alt="image.png"><br>防止死锁发生：</p><ol><li>最多允许四个哲学家同时进餐</li><li>要求奇数号哲学家先拿左边的筷子，然后再拿右边的筷子，而偶数号哲学家刚好相反</li><li>使各哲学家拿筷子的操作互斥进行。<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105132054.png" alt="image.png"></li></ol>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Threads线程</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Threads%E7%BA%BF%E7%A8%8B/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Threads%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>进程是最小资源分配单位<br>线程是最小执行单元</p><p>多线程服务框架<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231009140512.png" alt="image.png"></p><p>单线程与多线程进程：<br>线程共享进程中的数据，进程为每个线程创建栈和寄存器<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231009140611.png" alt="image.png"></p><p>Concurrency并发：在单核系统上<br>Parallelism并行：在多核系统上</p><p>操作系统会为每个内核级线程建立相应的TCB（线程控制块），通过TCB对线程进行管理<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104103658.png" alt="image.png"></p><p>可将多个TCB组织成一张线程表</p><h3 id="Race-Conditions竞争条件"><a href="#Race-Conditions竞争条件" class="headerlink" title="Race Conditions竞争条件"></a>Race Conditions竞争条件</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231009143100.png" alt="image.png"><br>线程分为send和receive</p><ul><li>send：当buffer中有空间，可以写入</li><li>receive：如果buffer中有message，返回message，创建线程<blockquote><p>producer-consumer problem：<br>producer需要把message添加到buffer<br>consumer需要读取buffer中的message来创建线程</p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231009144647.png" alt="image.png"></p><p>当有多个sender时：<br>A和B会产生竞争，导致in的值不正确<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231009144932.png" alt="image.png"></p><p>解决方法：acquire和release<br>当一个线程进行时，需要先执行acquire申请一个lock，在执行期间持有，结束后释放<br>当一个线程持有lock时，其他线程acquire相同的lock会失败<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016082019.png" alt="image.png"></p><p>在两个线程共用一个lock时，也会出现竞争条件<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016080611.png" alt="image.png"></p><p>解决方法：Test and Set Lock（TSL）把参数变为真值，返回它的旧值<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016081529.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016082444.png" alt="image.png"></p><p>Compare-and-swap lock<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016083314.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016083325.png" alt="image.png"><br>当线程A进行比较时，返回true，lck被置为true，线程A得到lock，此时线程B进行比较，返回false，进入循环，直到A进行release</p><h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><p>进程具有异步性的特征，各并发执行的进程以各自独立的、不可预知的速度向前推进</p><h3 id="进程互斥"><a href="#进程互斥" class="headerlink" title="进程互斥"></a>进程互斥</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104223505.png" alt="image.png"><br>一个时间段内只允许一个进程使用的资源称为临界资源。对临界资源的访问，必须<strong>互斥</strong>地进行。<br>进程互斥指当一个进程访问某临界资源时，另一个想要访问该资源的进程必须等待。当前访问临界资源的进程访问结束，释放该资源后，另一个进程才能去访问临界资源。</p><p>对临界资源的互斥访问，分为四部分：</p><ul><li>进入区：检查是否可进入临界区，可以则上锁</li><li>临界区：访问临界资源</li><li>退出区：解锁</li><li>剩余区：做其他处理</li></ul><p>进程互斥的原则：</p><ol><li>空闲让进</li><li>忙则等待</li><li>有限等待</li><li>让权等待</li></ol><h3 id="进程互斥的软件实现方式"><a href="#进程互斥的软件实现方式" class="headerlink" title="进程互斥的软件实现方式"></a>进程互斥的软件实现方式</h3><h4 id="单标志法"><a href="#单标志法" class="headerlink" title="单标志法"></a>单标志法</h4><p>一个进程在访问完临界区后会把使用临界区的权限转交给另一个进程。也就是说<strong>每个进程进入临界区的权限只能被另一个进程赋予</strong></p><p>举例：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104224824.png" alt="image.png"></p><p>如果此时允许P0进入临界区，但P0一直不访问临界区，那么虽然此时临界区空闲，但是并不允许P1访问。<br>因此单标志法<strong>违背”空闲让进“原则</strong></p><h4 id="双标志先检查法"><a href="#双标志先检查法" class="headerlink" title="双标志先检查法"></a>双标志先检查法</h4><p>设置一个布尔型数组flag[]，数组中各个元素用来标记各进程想进入临界区的意愿<br>先检查后上锁<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104230557.png" alt="image.png"><br>如果两个进程同时想要进入临界区，就会出现冲突。<br>因此双标志先检查法的问题是<strong>违背”忙则等待“原则</strong></p><h4 id="双标志后检查法"><a href="#双标志后检查法" class="headerlink" title="双标志后检查法"></a>双标志后检查法</h4><p>先上锁后检查<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104230953.png" alt="image.png"><br>如果两个进程同时想要进入临界区，则它们都将无法进入临界区<br><strong>违背了”空闲让进“和”有限等待“原则</strong>，会让进程产生饥饿现象</p><h4 id="Peterson算法"><a href="#Peterson算法" class="headerlink" title="Peterson算法"></a>Peterson算法</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231104231828.png" alt="image.png"><br>最后一个设置turn的进程会失去优先权</p><h3 id="进程互斥的硬件实现方式"><a href="#进程互斥的硬件实现方式" class="headerlink" title="进程互斥的硬件实现方式"></a>进程互斥的硬件实现方式</h3><h4 id="中断屏蔽方法"><a href="#中断屏蔽方法" class="headerlink" title="中断屏蔽方法"></a>中断屏蔽方法</h4><p>利用“开&#x2F;关中断指令”实现，即某进程开始访问临界区到结束访问为止都不允许被中断<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105102139.png" alt="image.png"></p><h4 id="TestAndSet指令"><a href="#TestAndSet指令" class="headerlink" title="TestAndSet指令"></a>TestAndSet指令</h4><p>简称TS指令或TSL指令<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105102430.png" alt="image.png"></p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><h4 id="互斥锁（mutex-lock）"><a href="#互斥锁（mutex-lock）" class="headerlink" title="互斥锁（mutex lock）"></a>互斥锁（mutex lock）</h4><p>一个进程在进入临界区时获得锁，在退出临界区时释放锁<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231105103037.png" alt="image.png"><br>函数acquire()获得锁，函数release()释放锁<br>每个互斥锁有一个布尔变量available，表示锁是否可用<br>需要连续循环忙等的互斥锁，都可称为自旋锁（spin lock），如TSL指令、swap指令、单标志法</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内存</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240107112118.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240107112152.png" alt="image.png"></p><p>大题：<br>逻辑地址转物理地址</p><p>动态分区分配算法：</p><ol><li>首次适应算法</li><li>临近适应算法</li><li>最佳适应算法</li><li>最坏适应算法</li></ol><p>页面置换算法</p><ol><li>最佳置换算法</li><li>先进先出页面置换算法</li><li>最近最久未使用置换算法</li><li>简单时钟置换算法</li><li>改进型时钟置换算法</li></ol><p>求fat表大小</p><p>磁盘调度算法</p><ol><li>先来先服务算法</li><li>最短寻找时间优先算法</li><li>扫描算法（电梯调度算法）</li><li>循环扫描算法</li></ol>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>老师声音小，需要坐前排</p><p>40分平时作业（gitee），60分期末</p><p>TODO：</p><ul><li><input checked="" disabled="" type="checkbox"> 加入gitee仓库</li></ul><hr><p>虚拟换CPU：<br>操作系统需要以某种方式在看似同时运行的许多程序之间共享物理CPU 基本思想：运行一个程序一小会儿，然后切换到运行另一个程序，依此类推 分时CPU - 虚拟化就实现了！</p><p>都具有用于在内存和寄存器之间移动项目的加载和存储指令 </p><ul><li>将位于内存中某个地址的字加载到寄存器中 </li><li>将寄存器的内容存储到位于内存中某个地址的字 </li><li>许多用于比较和的指令组合寄存器中的值并将结果放入寄存器</li></ul><p>CPU的结构：</p><ul><li>程序计数器（Program Counter，PC）：保存下一条指令的内存地址</li><li>指令寄存器（Instruction Register，IR）：保存当前正在执行的指令</li><li>通用寄存器（General Registers，R1…Rn）：保存执行环境：临时结果</li><li>算术逻辑单元（Arithmetic Logic Unit，ALU）：执行算术函数和逻辑运行</li><li>堆栈指针（The Stack Pointer，SP）：保存堆栈的内存地址，以及每个活动函数的参数和局部变量的帧（frame）</li><li>程序状态字（The Program Status Word，PSW）：包含一些重要的控制位</li></ul><p>CPU 所做的就是获取&#x2F;解码&#x2F;执行获取 PC 指向的下一条指令，对其进行解码以查找其类型，然后操作数重复执行它</p><p>寄存器r15指向执行栈的顶部<br>堆栈从较高的内存地址向较低的内存地址向下增长</p><p>CPU在PSW中有一个模式位，用于定义程序的执行能力</p><p>内核模式：执行任何指令<br>用户模式： 执行指令的子集<br>仅在内核模式下执行的指令称为特权指令</p><p>在用户模式下运行的应用程序要执行系统调用，用户程序需要执行一条称为陷阱<code>trap</code>的指令<br>它所做的只是跳转到内核，同时将特权级别提升到内核模式<br>我们需要返回到进行系统调用的程序，但同时，需要清除模式位（将特权级别降低回用户模式）同样，操作系统依赖于CPU的一些帮助，通过使用另一条指令，我们称之为从陷阱返回<code>return-from-trap</code></p><p>内核在内核模式下启动时会设置一个陷阱表，然后让硬件知道它在哪里。陷阱表也称为中断表&#x2F;向量，因为它也有硬件中断和异常的条目！事实证明，trap 只是陷阱表中的条目之一。系统调用的实际类型称为系统调用号，它可以存储在内核堆栈中的众所周知的位置</p><p>中断是异步的（在任意时间出现） ：</p><ul><li>由硬件事件引起 </li><li>定时器中断 属于外中断</li><li>I&#x2F;O（如键盘或磁盘）中断 属于外中断</li><li>由用户模式程序中的编程错误引起。属于内终端。示例：算术异常（除以零）尝试访问程序无法控制的内存尝试执行特权指令</li></ul><p>中断的示例：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231102223922.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231102224053.png" alt="image.png"></p><p>内中断和外中断：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231102224829.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL中级</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E4%B8%AD%E7%BA%A7/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E4%B8%AD%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016171429.png" alt="image.png"></p><h3 id="4-1-Joined-Expressions"><a href="#4-1-Joined-Expressions" class="headerlink" title="4.1 Joined Expressions"></a>4.1 Joined Expressions</h3><p><code>join</code>是笛卡尔积，它要求两个表中的元组匹配，用于<code>from</code>子句中的子查询表达式。<br>使用 <code>join ... on</code>子句可以指定任意的连接条件。<code>on</code>条件允许在参与连接的关系上设置通用的谓词。该谓词的写法与where子句谓词类似。</p><h4 id="Natural-join-operations自然连接"><a href="#Natural-join-operations自然连接" class="headerlink" title="Natural join operations自然连接"></a>Natural join operations自然连接</h4><p>将表中具有相同名称的列进行匹配</p><p>Natural join特征：</p><ul><li>关联的表具有一对或多对同名的列</li><li>连接时候不需要使用on或者using关键字</li></ul><p>在自然连接中，会产生数据的丢失</p><h4 id="Outer-join外连接"><a href="#Outer-join外连接" class="headerlink" title="Outer join外连接"></a>Outer join外连接</h4><ul><li><p>Left Outer Join左外连接：把左边表的数据全部取出来，而右边表的数据有相等的，显示出来，如果没有，显示NULL<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231009172709.png" alt="image.png"></p></li><li><p>Right Outer Join右外连接：把右边表的数据全部取出来，而左边表的数据有相等的，显示出来，如果没有，显示NULL<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231009172943.png" alt="image.png"></p></li><li><p>Full Outer Join全外连接：兼顾左外连接和右外连接<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231009173144.png" alt="image.png"></p></li></ul><h4 id="Inner-join内连接"><a href="#Inner-join内连接" class="headerlink" title="Inner join内连接"></a>Inner join内连接</h4><p>为了把常规连接和外连接区分开来，在SQL中把常规连接称作内连接。关键字inner是可选的，当join子句中没有使用outer前缀时，缺省的连接是内连接。内连接以<strong>笛卡尔积</strong>的形式表现出来。</p><p>自然连接只显示一列相同名称的列，而内连接显示两列</p><blockquote><p>自然连接和内连接的区别：<br><a href="https://geek-docs.com/sql/sql-ask-answer/the-difference-between-natural-join-and-inner-join.html">自然连接和内连接的区别|极客教程</a></p></blockquote><h3 id="4-2-Views视图"><a href="#4-2-Views视图" class="headerlink" title="4.2 Views视图"></a>4.2 Views视图</h3><p>在 SQL 中，视图是基于 SQL 语句的结果集的可视化的表。<br>视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。<br>视图是虚关系，在数据库中不存在，根据用户需求临时生成，数据库只储存视图定义。</p><h4 id="Create-view创建视图"><a href="#Create-view创建视图" class="headerlink" title="Create view创建视图"></a>Create view创建视图</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231009174818.png" alt="image.png"><br>其中&lt;query expression&gt;为SQL表达式，v是视图的名称</p><h4 id="Views-Defined-Using-Other-Views"><a href="#Views-Defined-Using-Other-Views" class="headerlink" title="Views Defined Using Other Views"></a>Views Defined Using Other Views</h4><p>v1可以直接依赖（depend directly on）v2，即 v2 -&gt;  v1<br>v1也可以依赖（depend on）v2，即 v2 -&gt; v3 -&gt; v2<br>如果视图依赖于自身，则称为递归关系</p><h4 id="Materialized-Views实例化视图"><a href="#Materialized-Views实例化视图" class="headerlink" title="Materialized Views实例化视图"></a>Materialized Views实例化视图</h4><p>创建一个物理表，其中包含查询定义视图的结果中的所有元组<br>如果更新查询中使用的关系，则实例化视图结果将过期</p><h3 id="4-3-Transactions事务"><a href="#4-3-Transactions事务" class="headerlink" title="4.3 Transactions事务"></a>4.3 Transactions事务</h3><p>一个transaction包括一系列的查询和更新<br>特性：原子性、一致性、隔离性、耐用性<br>事务必须以下列语句之一结束：</p><ul><li>Commit work</li><li>Rollback work<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016100923.png" alt="image.png"></li></ul><h3 id="4-4-Integrity-Constraints完整性约束"><a href="#4-4-Integrity-Constraints完整性约束" class="headerlink" title="4.4 Integrity Constraints完整性约束"></a>4.4 Integrity Constraints完整性约束</h3><p>通过对数据的约束防止数据的意外损坏<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016101652.png" alt="image.png"></p><ul><li>E.g. 1   the salary of manager should not be lower than $1000 in Employee</li><li>E.g. 2   table T (x, y, z ), z &#x3D;x+y, z is a derived attributes from x and y.</li><li>E.g. 3   the student# for table student should not be null</li><li>E.g. 4   the age  of students should only be added</li><li>E.g. 5   when  employee tuples is modified,  new.sal &gt; old.sal + 0.5*age</li><li>E.g. 6   statistical  constraints</li></ul><h4 id="Constraints-on-Single-Relation"><a href="#Constraints-on-Single-Relation" class="headerlink" title="Constraints on Single Relation"></a>Constraints on Single Relation</h4><p>完整性约束包括：</p><ul><li>primary key</li><li>not null</li><li>unique</li><li>check(P), where P is a predicate（谓词）</li></ul><h4 id="Referential-Integrity参照完整性"><a href="#Referential-Integrity参照完整性" class="headerlink" title="Referential Integrity参照完整性"></a>Referential Integrity参照完整性</h4><p>确保在一个relation中attribute的值也出现在另一个relation的attribute中<br>参照完整性约束也称为子集依赖关系（subset dependency）<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016104636.png" alt="image.png"><br>table $r_2$的外键$\alpha$参考table $r_1$的主键K1</p><p>Cascading Actions级联操作：对$r_1$的主键K1的删除&#x2F;更新操作将导致$r_2$的外键$\alpha$的删除&#x2F;更新</p><h3 id="4-5-SQL-Data-Types-and-Schemas"><a href="#4-5-SQL-Data-Types-and-Schemas" class="headerlink" title="4.5 SQL Data Types and Schemas"></a>4.5 SQL Data Types and Schemas</h3><p>内置数据类型：</p><ul><li>date: 年月日</li><li>time: 时分秒</li><li>timestamp: date+time</li><li>interval: 时间间隔</li></ul><h4 id="Type-Conversion类型转换"><a href="#Type-Conversion类型转换" class="headerlink" title="Type Conversion类型转换"></a>Type Conversion类型转换</h4><p><code>cast</code> &lt;e&gt; <code>as</code> &lt;t&gt;<br>将字符串e转换为类型t</p><p><code>extract</code> value d <code>from</code> day or time<br>对于日期或时间d，提取其时间或日期字段</p><h4 id="Formatting-Functions格式化函数"><a href="#Formatting-Functions格式化函数" class="headerlink" title="Formatting Functions格式化函数"></a>Formatting Functions格式化函数</h4><p>数据可能需要以不同的类型显示：</p><ul><li>以特定位数显示数字</li><li>以特定格式显示数据</li></ul><p>Data Type Transition: <code>CAST</code> 和 <code>CONVERT</code></p><h4 id="Default-Values"><a href="#Default-Values" class="headerlink" title="Default Values"></a>Default Values</h4><p>在创建table时设置属性的默认值，可以在插入tuple时不设置该属性的值<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016164651.png" alt="image.png"></p><h4 id="Large-Object-Types"><a href="#Large-Object-Types" class="headerlink" title="Large-Object Types"></a>Large-Object Types</h4><p>blob：二进制大对象<br>clob：字符大对象<br>XML数据类型<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016164842.png" alt="image.png"></p><h4 id="User-defined-Types-Domains"><a href="#User-defined-Types-Domains" class="headerlink" title="User-defined Types&#x2F;Domains"></a>User-defined Types&#x2F;Domains</h4><p>子句<code>create type</code>可以用于创建用户自定义类型<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016165050.png" alt="image.png"></p><p><code>create domain</code>可以创建用户定义域类型<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016165114.png" alt="image.png"></p><h4 id="Schemas-Catalogs-and-Environments"><a href="#Schemas-Catalogs-and-Environments" class="headerlink" title="Schemas, Catalogs, and Environments"></a>Schemas, Catalogs, and Environments</h4><p>现代数据库系统的三级层次结构</p><ul><li>cactalogs（全文目录）</li><li>schemas（架构）</li><li>SQL objects</li></ul><h4 id="Check-Conditions-and-Assertions检查和评估"><a href="#Check-Conditions-and-Assertions检查和评估" class="headerlink" title="Check Conditions and Assertions检查和评估"></a>Check Conditions and Assertions检查和评估</h4><p><code>check</code>和<code>assertion</code>可以定义复杂的完整性约束<br>assertion是一个谓词，表示我们希望数据库始终满足的条件<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016165326.png" alt="image.png"></p><h3 id="4-6-Index-Definition-in-SQL"><a href="#4-6-Index-Definition-in-SQL" class="headerlink" title="4.6 Index Definition in SQL"></a>4.6 Index Definition in SQL</h3><p>许多查询只需参考表中的一小部分记录，读取每条记录以查找具有特定值的记录效率低下<br>建立索引，在查找时数据库可以只遍历索引而非遍历所有的值<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016111831.png" alt="image.png"></p><h3 id="4-7-Authorization"><a href="#4-7-Authorization" class="headerlink" title="4.7 Authorization"></a>4.7 Authorization</h3><p>对数据库各部分的授权形式包括：</p><ul><li>Read：允许读取数据，但不允许修改数据</li><li>Insert：允许插入新数据，但不允许修改现有数据</li><li>Update：允许修改，但不允许删除数据</li><li>Delete：允许删除数据<br>对schema的授权：</li><li>resources：允许创建新关系表</li><li>alteration：允许在关系表中添加或删除属性</li><li>drop：允许删除关系表</li><li>index：允许创建索引</li></ul><h4 id="Authorization-Specification授权规范"><a href="#Authorization-Specification授权规范" class="headerlink" title="Authorization Specification授权规范"></a>Authorization Specification授权规范</h4><p><code>grant</code>语句用于授予权限<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016170537.png" alt="image.png"></p><p>授予视图特权并不意味着授予对基础关系的任何特权<br>特权的授予者必须已经拥有指定项的权限（或者是数据库管理员）</p><h4 id="Privileges特权"><a href="#Privileges特权" class="headerlink" title="Privileges特权"></a>Privileges特权</h4><ul><li><p>select：允许对关系表进行读取访问，或使用视图进行查询的能力<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016170318.png" alt="image.png"></p></li><li><p>insert：插入元组的能力</p></li><li><p>update：使用 SQL 更新语句进行更新的能力</p></li><li><p>delete：删除元组的功能</p></li><li><p>all privileges：所有可被允许的特权</p></li><li><p>references：创建外键的权限</p></li></ul><h4 id="Revoking-Authorization撤销授权"><a href="#Revoking-Authorization撤销授权" class="headerlink" title="Revoking Authorization撤销授权"></a>Revoking Authorization撤销授权</h4><p><code>revoke</code>用于撤销授权<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016170604.png" alt="image.png"></p><h4 id="Roles"><a href="#Roles" class="headerlink" title="Roles"></a>Roles</h4><p><code>create role</code> &lt;role name&gt;<br>可以向角色授予权限<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016170845.png" alt="image.png"></p><p>可以向用户以及其他角色授予角色<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231016170853.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL基础</title>
    <link href="/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/06/20/Notes/%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%B8%89%EF%BC%88%E4%B8%8A%EF%BC%89/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231009112654.png" alt="image.png"></p><h3 id="3-1-Overview-of-SQL"><a href="#3-1-Overview-of-SQL" class="headerlink" title="3.1 Overview of SQL"></a>3.1 Overview of SQL</h3><p>Structured Query Language<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925100326.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925100343.png" alt="image.png"></p><table><thead><tr><th>data query</th><th>Select</th></tr></thead><tbody><tr><td>data manipulation</td><td>Insert,  Delete,  Update</td></tr><tr><td>data definition</td><td>Create,  Drop, Alter   (on schema)</td></tr><tr><td>data control</td><td>Grant,  Revoke</td></tr><tr><td>transaction processing</td><td>begin transaction, commit, rollback</td></tr><tr><td>指针&#x2F;游标控制语言(CCL)</td><td>DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT</td></tr></tbody></table><h3 id="3-2-SQL-Data-Definition"><a href="#3-2-SQL-Data-Definition" class="headerlink" title="3.2 SQL Data Definition"></a>3.2 SQL Data Definition</h3><h4 id="Domain-Types-定义域类型"><a href="#Domain-Types-定义域类型" class="headerlink" title="Domain Types 定义域类型"></a>Domain Types 定义域类型</h4><ul><li><p>char(n).固定长度字符串，用户定义</p></li><li><p>varchar(n).可变长度字符串，用户定义</p></li><li><p>int.整数</p></li><li><p>smallint.小整数</p></li><li><p>numeric(p, d):固定小数，用户定义</p></li><li><p>float(n).浮点数，用户定义</p></li><li><p>date:日期包含年月日</p></li><li><p>time:时分秒</p></li><li><p>timestamp:日期加上时间</p></li><li><p>Interval:一段时间</p></li><li><p>Null：空集</p></li><li><p>create domain:自定义类型，不允许是Null</p></li></ul><blockquote><p>关系表属性名最好取英文名，便于应用程序的可移植性</p></blockquote><h4 id="Create-Table"><a href="#Create-Table" class="headerlink" title="Create Table"></a>Create Table</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925101602.png" alt="image.png"></p><ul><li>r是关系表的名称</li><li>A_i是变量名称</li><li>D_i是数据类型（定义域）</li></ul><p>约束：指定主键，外键，非空等。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925101909.png" alt="image.png"></p><p>例：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925102014.png" alt="image.png"></p><h4 id="Updates-to-Schemas"><a href="#Updates-to-Schemas" class="headerlink" title="Updates to Schemas"></a>Updates to Schemas</h4><p>删除表：<br>    drop table r  # 删除表r<br>Alter:<br>    alter table r add A D  # 在表r中添加A属性，D是A的定义域<br>    alter table r drop A  # 把表r中的A属性删去</p><p>tuples逐行存储，添加或删除表产生的数据移动花费很大，大数据表通常逐列存储</p><h3 id="3-3-Basic-Structure-of-SQL-Queries"><a href="#3-3-Basic-Structure-of-SQL-Queries" class="headerlink" title="3.3 Basic Structure of SQL Queries"></a>3.3 Basic Structure of SQL Queries</h3><p>SQL query<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925103324.png" alt="image.png"></p><ul><li>A_i为属性</li><li>r_i为关系表</li><li>P为predicate(谓词)<br>等效于：<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925103521.png" alt="image.png"></li></ul><h4 id="The-select-Clause"><a href="#The-select-Clause" class="headerlink" title="The select Clause"></a>The select Clause</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925103844.png" alt="image.png"></p><p>SQL允许冗余，加入关键字Distinct消除冗余<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925103947.png" alt="image.png"><br>关键字all可以使冗余不被移除</p><p>属性可以是没有<code>from</code>的文本<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925104758.png" alt="image.png"><br>结果为一行一列的表, 内容为437，可以为它加上名字<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925104903.png" alt="image.png"></p><p>select可以包含数学表达式<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925105014.png" alt="image.png"></p><h4 id="The-where-Clause"><a href="#The-where-Clause" class="headerlink" title="The where Clause"></a>The where Clause</h4><p>where为查询添加条件，对应于关系代数的选择代数</p><p>可以包含 and，or，not，比较运算符：&lt;,&gt;,&lt;&#x3D;,&gt;&#x3D;,&#x3D;,&lt;&gt;（不等于）<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925105530.png" alt="image.png"></p><p>between运算符<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925110022.png" alt="image.png"></p><p>元组比较<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925110122.png" alt="image.png"></p><h4 id="natural-join"><a href="#natural-join" class="headerlink" title="natural join"></a>natural join</h4><p><code>natural</code> join in <code>from</code> subclause<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925111025.png" alt="image.png"><br>等于<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925111128.png" alt="image.png"><br>自然连接默认把主键相同作为条件</p><h3 id="3-4-Additional-Basic-Operation"><a href="#3-4-Additional-Basic-Operation" class="headerlink" title="3.4 Additional Basic Operation"></a>3.4 Additional Basic Operation</h3><h4 id="The-Rename-Opration"><a href="#The-Rename-Opration" class="headerlink" title="The Rename Opration"></a>The Rename Opration</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925111544.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925111558.png" alt="image.png"><br>利用T和S区分不同的instructor, 实现对同一属性的不同值比较</p><blockquote><p>字符要加单引号</p></blockquote><h4 id="String-Operations"><a href="#String-Operations" class="headerlink" title="String Operations"></a>String Operations</h4><p>运算符<code>like</code> :</p><ul><li>percent(%):与任何子字符串匹配</li><li>underscore(_):匹配任意字符</li></ul><p>注意转义字符的使用:匹配”100%”<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925113015.png" alt="image.png"></p><h4 id="Ordering-the-Display-of-Tuples"><a href="#Ordering-the-Display-of-Tuples" class="headerlink" title="Ordering the Display of Tuples"></a>Ordering the Display of Tuples</h4><p><code>order by</code>对指定属性进行排序,降序desc,升序asc(默认值)<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925113410.png" alt="image.png"></p><h3 id="3-5-Set-Operations"><a href="#3-5-Set-Operations" class="headerlink" title="3.5 Set Operations"></a>3.5 Set Operations</h3><p><code>union</code>(并),<code>intersect</code>(交),<code>except</code>(差)<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925113554.png" alt="image.png"><br>自动消除重复项,<code>union all</code>可以保留重复项</p><h3 id="3-6-Null-Values"><a href="#3-6-Null-Values" class="headerlink" title="3.6 Null Values"></a>3.6 Null Values</h3><p>Null表示:</p><ul><li>一个未知的值</li><li>一个不存在的值<br>任何涉及Null的算术表达式的结果都是Null</li></ul><p>检查空值<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925114200.png" alt="image.png"></p><p>SQL将涉及Null的比较结果视为unknown<br>where中的谓词可以涉及布尔运算（and，or，not）,因此需要扩展布尔运算来处理unknown<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925114508.png" alt="image.png"><br>如果只有unknown,则视为false</p><h3 id="3-7-Aggregate-Functions"><a href="#3-7-Aggregate-Functions" class="headerlink" title="3.7 Aggregate Functions"></a>3.7 Aggregate Functions</h3><p>聚合函数:输入一列,输出一个值</p><ul><li>avg:平均值</li><li>min:最小值</li><li>max:最大值</li><li>sum:求和</li><li>count:数量</li></ul><p>分组后聚合:<br>group by:<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925115629.png" alt="image.png"><br>先按dept_name分组,然后对每个组内的salary求平均</p><ul><li>聚合函数之外的 select 中的属性必须出现在group by中</li><li>除count之外的所有聚合操作都忽略有Null的tuples</li></ul><h4 id="Having-Clause"><a href="#Having-Clause" class="headerlink" title="Having Clause"></a>Having Clause</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925120755.png" alt="image.png"></p><p>对分组后的数据进行条件筛选<br><code>having</code>用于group形成以后,where用于group形成之前</p><h3 id="3-8-Nested-Subqueries嵌套子查询"><a href="#3-8-Nested-Subqueries嵌套子查询" class="headerlink" title="3.8 Nested Subqueries嵌套子查询"></a>3.8 Nested Subqueries嵌套子查询</h3><p>子查询是嵌套在另一个查询中的“select-from-where”表达式<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230925121043.png" alt="image.png"></p><ul><li>r_i可以替换为任意有效的子查询</li><li>P可以替换为B&lt;operation&gt;(subquery)</li><li>A_i可以替换为生成单个值的子查询</li></ul><h4 id="some-Clause"><a href="#some-Clause" class="headerlink" title="some Clause"></a>some Clause</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231009102217.png" alt="image.png"><br><code>some</code>中只要有一个满足条件即为true</p><h4 id="all-Clause"><a href="#all-Clause" class="headerlink" title="all  Clause"></a>all  Clause</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231009102433.png" alt="image.png"><br>需要<code>some</code>中所有都满足条件才为true</p><h4 id="Empty-Relations空关系（exist，except）"><a href="#Empty-Relations空关系（exist，except）" class="headerlink" title="Empty Relations空关系（exist，except）"></a>Empty Relations空关系（exist，except）</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231009102903.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231009102921.png" alt="image.png"></p><h4 id="Duplicate-Tuples重复元组（unique）"><a href="#Duplicate-Tuples重复元组（unique）" class="headerlink" title="Duplicate Tuples重复元组（unique）"></a>Duplicate Tuples重复元组（unique）</h4><p><code>unique</code>检查子查询中是否有重复元组，如果没有重复项返回true</p><h4 id="With-Clause"><a href="#With-Clause" class="headerlink" title="With Clause"></a>With Clause</h4><p><code>with</code>子句提供了一种定义临时关系的方法，将一个复杂查询分解为若干步，每个视图定义一个各部的中间计算结果，逻辑清晰。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231009105244.png" alt="image.png"></p><h3 id="3-9-Modification-of-Database"><a href="#3-9-Modification-of-Database" class="headerlink" title="3.9 Modification of Database"></a>3.9 Modification of Database</h3><h4 id="Deletion删除"><a href="#Deletion删除" class="headerlink" title="Deletion删除"></a>Deletion删除</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231009110615.png" alt="image.png"></p><h4 id="Insertion插入"><a href="#Insertion插入" class="headerlink" title="Insertion插入"></a>Insertion插入</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231009110654.png" alt="image.png"></p><h4 id="Update更新"><a href="#Update更新" class="headerlink" title="Update更新"></a>Update更新</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231009111812.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>课程</category>
      
      <category>大三（上）</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL配置</title>
    <link href="/2025/06/20/Notes/%E7%BC%96%E7%A8%8B/WSL%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/06/20/Notes/%E7%BC%96%E7%A8%8B/WSL%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>WSL(Windows Subsystem for Linux)，Windows自带的Linux子系统</p><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li><input disabled="" type="checkbox"> 输入bash没反应，重启后正常，待解决</li></ul><h4 id="安装过程及问题"><a href="#安装过程及问题" class="headerlink" title="安装过程及问题"></a>安装过程及问题</h4><p>在Windows中开启该功能然后重启</p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230923234736.png"></p><blockquote><p>可能出现以下问题<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230923234752.png"><br>造成该问题的原因是WSL版本由原来的WSL1升级到WSL2后，内核没有升级，前往<a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-kernel">微软WSL官网</a>下载安装适用于 x64 计算机的最新 WSL2 Linux 内核更新包即可。</p></blockquote><h4 id="迁移到D盘"><a href="#迁移到D盘" class="headerlink" title="迁移到D盘"></a>迁移到D盘</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text"># 查看已经安装的虚拟机<br>wsl -l -v<br># 关闭所有正在运行的虚拟机<br>wsl --shutdown<br># 虚拟机文件导出<br>wsl --export 虚拟机名称 保存路径<br>wsl --export Ubuntu D:\\wsl-Ubuntu.tar<br># 注销原虚拟机<br>wsl --unregister Ubuntu<br># 导入虚拟机文件<br>wsl --import 虚拟机名称 目标路径 虚拟机文件路径 --version 2<br>wsl --import Ubuntu D:\\WSL2\\Ubuntu D:\\wsl-Ubuntu.tar --version 2<br># 最后可以选择删除掉虚拟机文件，因为他已经没用了<br></code></pre></td></tr></table></figure><p><strong>更改默认用户：</strong></p><ul><li>在powershell中输入<code>ubuntu.exe config --default-user 用户名</code>来将root用户改为普通用户</li><li>输入<code>ubuntu config --default-user root</code>将普通用户改为默认用户，可以在忘记root密码时使用</li></ul><h4 id="配置python库环境"><a href="#配置python库环境" class="headerlink" title="配置python库环境"></a>配置python库环境</h4><p>在miniconda官网中找到下载命令，下载miniconda<br>然后新建环境，在环境中下载相关依赖包</p><h4 id="Pycharm中使用WSL"><a href="#Pycharm中使用WSL" class="headerlink" title="Pycharm中使用WSL"></a>Pycharm中使用WSL</h4><p>在Pycharm中添加解释器<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230923234812.png"><br>选择WSL，选择配置好的环境</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>WSL中&#x2F;mnt文件里是Windows文件的映射<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230923234824.png"></p><p>在想转到Windows某目录下时需要cd到其映射后的目录</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言基础</title>
    <link href="/2025/06/20/Notes/%E8%80%83%E7%A0%94/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/06/20/Notes/%E8%80%83%E7%A0%94/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240225150635.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240225150754.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240225150818.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20240225150933.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>考研</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录</title>
    <link href="/2025/06/20/Notes/%E8%80%83%E7%A0%94/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    <url>/2025/06/20/Notes/%E8%80%83%E7%A0%94/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><p>查找有序数组的快速方法（数组中无重复元素）</p><h4 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h4><p><strong>用一个循环实现两个循环嵌套才能实现的任务</strong></p><ul><li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li><li>慢指针：指向更新 新数组下标的位置</li></ul><h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><p>用两个指针分别标志窗口的起始和终止位置，用一个循环控制终止位置的移动，用判别条件控制起始位置的移动</p><h4 id="螺旋矩阵"><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a>螺旋矩阵</h4><p>二维矩阵的每一圈可以拆分为四条边，为了不充分考虑四个角处，每条边左闭右开</p><h4 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h4><p>给定任意数组，求某个区间的和，可以先求该数组的所有前缀和，即从0到每个元素的和。那么某个区间的和就等于该区间末尾元素的前缀和减去起始元素上一个元素的前缀和</p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><h4 id="std-unordered-map"><a href="#std-unordered-map" class="headerlink" title="std::unordered_map"></a>std::unordered_map</h4><p>存储键值对的数据结构，查找的时间复杂度为O(1)<br>创建：unordered_map&lt;datatype,..&gt; map<br>访问：map[key] 如果key不存在，则会插入一个新元素<br>容量：map.empty()  map.size()<br>修改器：map.insert({key,value})插入，map.erase(key)删除<br>查找：map.find(key)，如果不存在则返回map.end()</p><h4 id="两数之和问题"><a href="#两数之和问题" class="headerlink" title="两数之和问题"></a>两数之和问题</h4><p>先在hash表中find另一个匹配的数，然后将该元素加入hash表</p><h3 id="滑动窗口-1"><a href="#滑动窗口-1" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><h4 id="固定滑动窗口"><a href="#固定滑动窗口" class="headerlink" title="固定滑动窗口"></a>固定滑动窗口</h4><p>438.每次窗口移动时，要考虑左侧出窗口的元素的影响和右侧进窗口的值的影响，初始起始索引为0的窗口单独考虑</p><h4 id="可变滑动窗口"><a href="#可变滑动窗口" class="headerlink" title="可变滑动窗口"></a>可变滑动窗口</h4><p>3.用hash表判断是否可以向右移动指针，左指针用一个for循环枚举</p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h4 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h4><p>用来找数组中每个元素后面第一个比它大的元素.<br>用栈维护递减元素的位置，当遇到更大的元素时，小元素出栈同时更新结果，然后大的入栈</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>考研</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>复试准备</title>
    <link href="/2025/06/20/Notes/%E8%80%83%E7%A0%94/%E5%A4%8D%E8%AF%95%E5%87%86%E5%A4%87/"/>
    <url>/2025/06/20/Notes/%E8%80%83%E7%A0%94/%E5%A4%8D%E8%AF%95%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="复试流程"><a href="#复试流程" class="headerlink" title="复试流程"></a>复试流程</h4><ul><li>笔试：两道代码题，一道简答题<br>（30min）</li></ul><p>中间有10min休息时间，可以拿手机查笔试题</p><ul><li>面试：<ol><li>讲解ppt（3页，3min）</li><li>英文提问（ppt上的项目、本科经历、日常对话）</li><li>三选一专业题目</li><li>专业课知识提问（PPT、项目、笔试题、随机）<br>（15min）</li></ol></li></ul><p>笔试：每天做几道算法题（贪心、排序、动态规划）<br>专业课复习：编程语言类（c++、python），软件工程（定义、原型、开发模型），软件测试（方法、分类），面向对象（定义），人工智能类（pytorch，机器学习、深度学习）<br>英语听说能力：</p><h4 id="项目准备："><a href="#项目准备：" class="headerlink" title="项目准备："></a>项目准备：</h4><p>数据处理-&gt;模型结构（原理，优势）-&gt;训练方式（损失函数，优化器，参数更新）-&gt;评测指标，效果</p><p><strong>论文</strong><br>数据处理：对数值型特征进行归一化处理，对类别型特征进行one-hot<br>模型结构：对连续性数据（数值）进行高斯扩散，对离散型数据（类别）进行多项式扩散，用MLP进行噪声的估计<br>损失函数：连续数据的均分误差MSE和类别数据的KL散度<br>通过实验发现，DDPM生成的数据在弱分类器（决策树、SVM、贝叶斯、逻辑回归的平均值）和强分类器Catboost上表现接近或超越真实数据，增大样本规模可以提升效果（70、100倍），同时具有更好的隐私保护能力（DCR，NNDR）<br>关键方法：DDPM、SMOTE、CTAB-GAN、弱分类器、Catboost<br>关键指标：相关性矩阵、F1、AUC、ACC、DCR、NNDR、shapley<br>特征相关性矩阵的计算：计算特征的皮尔逊相关系数，协方差&#x2F;标准差<br>AUC：以假阳率为横轴，真阳率为纵轴，通过改变分类阈值形成的ROC曲线下的面积，取值0.5-1越大越好<br>SMOTE：选择一个少数类样本，然后选择其最邻近样本，进行线性插值，形成新的样本<br>DCR：最邻近&#x2F;所有点距离<br>NNDR：最邻近&#x2F;次临近<br>shapley值：用于衡量每个特征对预测结果的影响，shapley值和真实数据近似，说明生成数据的可解释性好。<br>调参过程：利用网格调参，对学习率、batch size、扩散的timestep、MLP的层数：1024、512、512、512四层mlp，模型的扩散步数为1000步<br>实验设计：我们分别设计了数据重构实验和扩大数据规模实验，其中数据重构实验我们分别替换真实数据的正、负样本，或对真实数据的数据不平衡进行填充样本，分别测试效果，可以取得与真实数据相似的效果。以及我们设计了10到100倍规模的扩大数据规模实验，在某些特定规模上可以增强分类器的效果。</p><p><strong>基于扩散模型的手绘跨域图像匹配算法（毕业设计）</strong></p><p>利用扩散模型提取图像特征，进行手绘图像的稀疏匹配，用于患者精神疾病的诊断<br>模型：stable diffusion（SD），该模型主要分为三个部分，分别为CLIP text encoder，VAE，U-net。其中CLIP是将文本转化为embedding，然后通过cross attention机制将其与图像的latent一起送入Unet。VAE负责将原始的图像进行encoding和decoding，实现从原始图像到latent的转化。Unet则负责学习每个时间步的误差，然后根据一个随机噪声的latent、文本的embedding、时间步t来预测该时间步的噪声，然后从latent上减去这个噪声。<br>在本项目中，我们将将时间步长t的噪声添加到真实图像，然后将其与t一起送入U-net，提取U-net上采样层的特征。总时间步为1000，t越小越能捕捉几何特征，t越大越能捕捉语义特征<br>数据集：来自 ROCF（Rey-Osterrieth Complex Figure Test，雷-奥斯特列斯复杂图形测验）的实验数据集，一种经典的神经心理学测验，广泛用于评估个体的视觉-空间能力、记忆力以及执行功能。该测验通常要求被试者在没有时间限制的情况下临摹一幅复杂图形，以此评估其基本的视觉-空间能力和绘图策略。<br>评价指标：BQSS评分系统，BQSS（Boston Qualitative Scoring System，波士顿定性评分系统）进行评分。BQSS 通过分析绘图的完整性、空间组织性、结构性错误等多方面指标，给出打分<br>创新点：首次将扩散模型特征提取方法用于手绘图像的匹配工作<br>调参过程：由于是在sd的上采样层提取特征，因此从哪一层提取很重要，越低的层包括越多的语义信息，越高则包括越多的几何信息，这里的sd共有三层上采样层。同时扩散的时间步也很重要，t越小越能捕捉几何特征，t越大越能捕捉语义特征。由于数据类型固定，通过人工调参，发现在第二个上采样层、timestep为120左右时效果最好</p><p><strong>kaggle竞赛 Plant Pathology 2021 - FGVC8 取得排名140&#x2F;625</strong><br>根据植物叶判断疾病的多标签分类任务，利用深度神经网络和一些训练方法，提升准确率<br>模型：efficient-b4：通过复合缩放扩展的模型，按一定规则同时扩展网络的层数、通道数、图像分辨率。<br>创新点：基于上述模型，利用自蒸馏、余弦退火学习率、测试时增强等方法提高准确率<br>评价指标：F1值 &#x3D; Precision和Recall的调和平均值<br>模型调用：使用timm库创建模型<br>使用sigmoid激活函数，每个类别的概率独立计算，适用于多标签分类问题。而softmax通常用于二分类问题，因为每个概率互相依赖<br>自蒸馏技术：通过训练一个教师模型，生成教师模型的预测软标签，然后将软标签和硬标签进行加权平均，用于学生模型的训练。这种训练方式可以使标签包含更深层的数据特征，学生模型可以在教师模型学到的基础上继续学习，同时软标签的使用可以避免模型过分依赖groundtruth，降低过拟合的风险。<br>TTA：在测试时，对每个数据进行三次测试，每次随机使用一种数据增强方法，如裁切、旋转、亮度对比度变化等，取平均值作为该样本的最终预测结果。这种方法可以减少模型预测的随机性、提高准确率</p><p><strong>基于Swin Transformer的医学图像分割网络</strong><br>从传统transformer到vit到swin transformer到本文的u-net型swin transformer：<br>    - 传统transformer用于语言生成，输入为token序列，<br>    - vit将图片划分为patch，代替token，拼接出patch序列作为输入，但是图片的分辨率高时，会带来巨大的计算量，需要很多数据训练。<br>    - swin transformer将encoding过程中的patch进行下采样，每层都减小特征的维度，并在decoding时上采样复原，减少很多计算量<br>      另外，swin transformer不计算全局注意力，只计算一个窗口的注意力（W-MSA），然后在下一个block中移动窗口（SW-MSA）<br>      swin transformer使用patch merging层在encoding过程中逐渐合并patch，并增大通道数C，最后进行图片分类，没有decoding过程。<strong>不计算全局注意力，而是在移位窗口中计算注意力，</strong><br>    - 基于u-net的swin transformer借鉴u-net的上采样和下采样过程，在原模型的基础上，在decoding时通过patch expanding一个线性层增加通道数，然后展开patch，最后输出对图像中器官分类的图片<br>    <img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20250307173907.png" alt="image.png"><br>上述就是本项目的模型，u-net型swig transformer<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20250323164929.png" alt="image.png"></p><p>数据处理：synapse多器官分割数据集，3779张腹部临床CT图像，通过旋转和翻转等方式进行数据增强，构建pytorch的datasets类，重写__getitem__<br>训练方式：对模型预测的输出和label（这里的label是掩码，用于标注感兴趣区域，预测出的结果也是mask）计算交叉熵损失和dice损失（用于语义分割的经典损失函数），多项式衰减策略调整学习率，SGD优化器（加速收敛，添加L2范数防止过拟合，添加动量，减少梯度震荡）<br>评测指标：average Dice-Similarity coefficient (DSC) and average Hausdorff Distance (HD)平均 Dice 相似度系数 (DSC) 用来评估整体重叠区域，平均 Hausdorff 距离 (HD)用来衡量边界误差</p><p>回答时先感谢老师的问题，结束时说我的回答完毕</p><ul><li><input checked="" disabled="" type="checkbox"> 自我介绍需要准备一份稿子 3min</li><li><input checked="" disabled="" type="checkbox"> ppt需要补充图片，以及内容的完善</li><li><input checked="" disabled="" type="checkbox"> 英语需要多准备几份通用模板</li><li><input checked="" disabled="" type="checkbox"> 不会的问题需要一个模板</li><li><input disabled="" type="checkbox"> 复习408基础</li><li><input disabled="" type="checkbox"> 复习ppt上的课程的内容</li><li><input disabled="" type="checkbox"> 继续准备英语问题回答</li><li><input disabled="" type="checkbox"> 往年的抽题了解</li><li><input disabled="" type="checkbox"> 项目的模型结构和参数</li></ul><h4 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h4><p>各位老师好，我叫xx，本科就读于xx大学xx专业，很荣幸能够来到北大软微参加这次面试，希望各位老师多多指教。本科期间我主要围绕人工智能相关的课程进行学习，如模式识别与机器学习，神经网络与深度学习，自然语言处理，计算机视觉等，另外也学习了如操作系统，数据库系统原理，计算机网络，软件工程，数据结构与算法等与计算机相关的课程。这些课程为我未来更深入的学习打下了坚实的基础。<br>接下来我将从综合素养和项目经历两方面详细介绍。<br>首先是综合素养。在科研方面，我积极参与科研工作，以第二作者发表了论文《基于扩散模型生成数据的客户流失预测》，在这篇论文中，我们利用扩散模型的数据生成能力对表格数据进行增强，通过扩散模型生成的数据对原始数据进行重构，可以提升分类器的预测效果，如F1值，并且提升数据的隐私保护能力。在发表论文期间，通过设计与进行实验，以及数据的分析、论文的撰写，使我的科研能力得到提高。<br>然后是本科期间的个人奖项，xx。</p><p>下面是项目经历。在本科期间，我主要围绕人工智能相关方向进行项目实践。下面介绍三个项目。首先是基于扩散模型的手绘跨域图像匹配算法，也是我的毕业设计，在这个项目中，我利用扩散模型提取图像特征，具体方法如下图所示，对特征点进行稀疏匹配，用于患者精神疾病的诊断。<br>另外，我还尝试参与了kaggle的竞赛，这是一个根据植物叶图片判断疾病的多标签分类任务，我利用深度神经网络和自蒸馏、TTA，提升准确率，也取得了前25%的成绩。<br>最后是一个大模型的下游任务，基于Swin Transformer的医学图像分割网络，在Synapse 多器官分割数据集上进行微调，最终可以实现精准分割内脏器官。<br>在学习生活中，我一直对未知事物充满向往，未来我希望能够在人工智能领域继续深耕，探索更多的未知和可能。<br>我的自我介绍到此结束，感谢各位老师的倾听。</p><p>我是北京邮电大学<strong>人工智能专业</strong>的本科生王正阳，在思想政治方面，我是一名共青团员，积极学习<strong>马克思主义基本原理、习近平新时代中国特色社会主义思想</strong>，积极拥护党的领导。在外语方面，我通过了CET-6，有良好的英文文献阅读能力。本科阶段，我系统学习了<strong>人工智能及计算机科学</strong>相关的核心课程，熟练使用**Python、C&#x2F;C++**等编程语言，负责或参与过许多项目，具备扎实的理论基础和实践能力。在科研方面，我有一段科研经历，参与发表一篇学术论文，具备一定的科研能力。</p><p>thanks for your question，professor<br>Those are all of my answers，thank you<br>I’m sorry, I didn’t hear the question clearly. Could you please repeat it？</p><p>感谢老师的提问。对于xx，我在之前的学习中接触的比较少，因此对此不太了解。根据我自己的理解，xx。我的理解可能有误，下去之后我会再系统学习这方面的知识。</p><p>adam优化、u-net、DDPM、项目3的评价指标、<br>adam是一种优化方法，在模型训练时，可以根据反向传播的梯度计算其一阶矩和二阶矩，动态调整学习率，可以达到更高效的收敛<br>为什么选择我们学校</p><p>二零二四年三月，我正式开始复习考研，至今已有一年。通过这一年的努力，有幸争取到踏入北京大学复试的机会，复试在即，内心始终无法平静，如同今晚北京的风，呼啸着裹挟空气而去。<br>回顾这一年的经历，只记得自己日复一日坐在图书馆的实木桌椅上，却想不起来到底看了哪些书，做了哪些事，就如同那时的自己无法想到复试前自己的心情一样。刚开始时雄心壮志、浑身干劲，也被时间渐渐抹去，如今只盼望复试早点过去，希望自己能完成这段任务，心中的那团热火，渐渐地也烧干成一堆灰烬。图书馆前的玉兰花再次盛开，和往年开的同样热烈，却没有心情再拿出相机摄下。回顾这一年，其实和以往的任何一年没有什么不同，可我为何如此看重这次复试？也许它能决定我的未来，真的如此吗？或许只是因为它标志着一个阶段的结束······我的美好的学生阶段结束了。又或许，这天确实别的一天没什么不同，还是每天做了自己应当做的事罢了。<br>那可能是晴空万里的一天，可能是狂风呼啸的一天，可能是阴雨连绵的一天，只消走入那间屋子，写一些想写的、说一些想说的，这天便结束了。过程是如此的简单，波澜不惊，事实也正是如此。走出那扇门时，我的心情是怎样？断然比此前都好些吧，不论如何，内心总会晴空万里。也许这就是这一年的意义。</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>考研</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>初试</title>
    <link href="/2025/06/20/Notes/%E8%80%83%E7%A0%94/%E5%88%9D%E8%AF%95/"/>
    <url>/2025/06/20/Notes/%E8%80%83%E7%A0%94/%E5%88%9D%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h3><p>从3月开始，到12月初试结束，早八晚十一，看情况每周可能休息一天。</p><ul><li>3-6月，用四个月过完数学的基础部分，以及英语单词，以及第一轮专业课。这个学期仍有一些课需要上，我就在课上刷题或背单词，能翘的课尽量翘，在图书馆学习。</li><li>7-9月，三个月数学强化，同时英语开始每天两篇真题，保持复习单词，专业课进行第二轮复习。此时正值暑假，选择留校，每天在图书馆，手机留在寝室，保证最高效率的学习。</li><li>9月底至十月初，临近报名，数学和专业课开始穿插刷模拟卷和真题，摸清自己的复习情况，然后报名。</li><li>10月，数学和专业课高强度刷模拟卷和真题，及时复盘，对薄弱的地方进行专题强化。基本上是每天上午刷一套数学，中午吃完饭就复盘，下午刷一套专业课，晚饭后复盘，剩下时间做英语真题。</li><li>11月开始加入政治的复习，看网课、小程序刷题即可，英语开始进行作文模板准备，此时政治英语占比上升，但大头依然是数学和专业课。</li><li>12月进入冲刺阶段，数学每天刷卷保持手感即可，冷门考点着重回顾，此时需要英语政治大量背诵，占用更多精力。各科都穿插真题练习，直到考试。</li></ul><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>在基础和强化阶段，想把数学学扎实，看网课，刷习题集（如880、1000）即可，认真把一本习题集刷好，做到对基础知识没有死角，此时数学考及格就没问题了。<br>然后是冲刺阶段，此时的训练需要80%的试卷+20%的查漏补缺，因为做卷的体验和做习题册完全不同，做试卷时限时且知识点涉猎广泛，扎实的基础和敏捷的思维缺一不可。在基础和强化阶段打好基础，然后通过试卷提升思维，最终考试才能拿到高分。</p><h4 id="基础阶段"><a href="#基础阶段" class="headerlink" title="基础阶段"></a>基础阶段</h4><p>高数跟着武忠祥看完了基础课，刷的第一本题是660，对于基础阶段的我来说很艰难，正确率大概50%，因此基础不好不推荐刷这本。然后做了1000题的基础篇，正确率提高到80%左右，这时又二刷了660的错题。武忠祥的数二部分讲的很好，数一部分差一些，660也是一样，这是一本为数二同学准备的练习册，数一部分几乎没有，因此在基础阶段留下了一个隐患，就是我的数一部分比较薄弱。<br>线代跟张宇的基础课，同步做了1000题的基础篇，但张宇的线代讲的一般，辅导讲义内容很简略，不太好理解。李永乐和李林的线代辅导讲义我认为比较好，配合880刷题是一个不错的选择。<br>概率也是跟着张宇，做了1000题的基础篇，感觉还不错。<br>上面是基础阶段的所有工作，图书馆门口的玉兰花开了又谢，暑假即将来临，这将是考研学习最黄金的时间。</p><h4 id="强化阶段"><a href="#强化阶段" class="headerlink" title="强化阶段"></a>强化阶段</h4><p>高数继续跟武忠祥的强化课，内容不多但很有用，非常推荐，但是数一部分需要再看张宇的强化讲义，因为武忠祥的数一部分讲的很草率。<br>线代跟最初仍是跟张宇，踩大坑，后来转李永乐，其实线代的基础和强化重合度很高，有些经验帖建议线代直接开强化的方法也是可以的。<br>概率部分强烈建议跟方浩，他的强化课是讲题，跳跃性较强，需要一个扎实的基础听起来才不那么吃力。<br>强化阶段需要把做题量提高，最好是30%的听课+70%的做题。我在强化的三个月期间做了1000题以及880的强化部分。但是我在大量做题时有一个弊端，就是没有重视复盘，经常刷完一对答案就过了，没有停下来总结方法，导致有些题没有消化，后面刷卷时遇到还是不会。</p><h4 id="冲刺阶段"><a href="#冲刺阶段" class="headerlink" title="冲刺阶段"></a>冲刺阶段</h4><p>一到两天刷一套卷，真题和模拟穿插进行。我当时用的是李艳芳的历年真题解析、近两年的合工大超越模拟卷以及近三年的李艳芳三套卷，做了15年的真题以及大概30套模拟题。刚开始刷卷时水平很差，很简单的卷子分也不高，当时对我的打击很大，但随着量的增长，逐渐适应了做试卷的节奏，分数也快速提高，这得益于强化阶段的大量做题。<br>后面的押题卷，我用的是张8+张4，张8主要是进行压力训练，太难了，做了两套放弃了，还是选择了李艳芳三套卷。张4则接近25难度，也压中了一些冷门知识点。</p><h4 id="经验贴"><a href="#经验贴" class="headerlink" title="经验贴"></a>经验贴</h4><p><a href="https://zhuanlan.zhihu.com/p/491196569">邂逅遗憾</a>邂逅哥的经验贴，考研数学百科全书，数学经验贴看这一个就够了</p><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>英语的复习分为三个部分，单词、阅读、作文。<br>单词是英语的重中之重，至少要经过两轮背诵，我用的是不背单词app，词书是红宝书，单词需要认识至少70%以上。前期每天晚上花1-2小时在背单词上，200小时基本能达到不错的效果。<br>单词过完一轮后，根据自己的掌握程度判断是否能开始做阅读，如果词汇量差的太多，建议还是先把单词背好。阅读我用的是黄皮书，做近20年真题，每天1-2篇即可。<br>到11月开始准备作文，如果时间紧张，每天不能给英语太多时间，那么推荐直接背模板，拿平均分即可。我当时背了monkey的模板，考场上直接默写了。</p><h3 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h3><p>政治建议11月开就好。最开始我每天看一节徐涛的强化课，他讲课很有意思，所以我就饭后当放松看，只看马原即可。然后吃饭时或晚上用微信小程序苍盾考研刷题，巩固一下知识点，但其实没刷太多。以上是前期的预热工作。<br>肖秀荣的带背手册面世后，我才开始真正背政治。每天早上吃完饭，站在图书馆楼下背诵一个章节的内容，尤其是史纲、新思想，有很多知识点需要背诵，北京的冬天寒风彻骨，在楼下吹一吹风能让我上午精神饱满。把这些背完，就开始肖8肖4的选择题，正确率很低，边做边学，有些做题技巧和套路也很重要。肖4出来后，各大考研博主会陆续更新带背视频，我当时跟的是b站的up主大牙，背肖4大题不只是背内容，这点在25考研已经有体现，命题会避开押题的，所以要注重答题的方向，学会举一反三。</p><h3 id="一些经验贴"><a href="#一些经验贴" class="headerlink" title="一些经验贴"></a>一些经验贴</h3><p>在学习没有动力时，刷刷经验贴可以让自己重燃斗志。<br><a href="https://zhuanlan.zhihu.com/p/684253427">蓝狗哥-430+战神</a><br><a href="https://zhuanlan.zhihu.com/p/705642547">Site Unreachable</a><br><a href="https://zhuanlan.zhihu.com/p/702492811">Site Unreachable</a><br><a href="https://zhuanlan.zhihu.com/p/609004723">Site Unreachable</a></p><p>失败的经验更加珍贵<br><a href="https://zhuanlan.zhihu.com/p/692327658">Site Unreachable</a><br><a href="https://zhuanlan.zhihu.com/p/692448349">Site Unreachable</a></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>考研</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>择校</title>
    <link href="/2025/06/20/Notes/%E8%80%83%E7%A0%94/%E6%8B%A9%E6%A0%A1/"/>
    <url>/2025/06/20/Notes/%E8%80%83%E7%A0%94/%E6%8B%A9%E6%A0%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>人大高瓴</li><li>南大</li><li>北航</li><li>上交</li><li>自动化所</li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>考研</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数学</title>
    <link href="/2025/06/20/Notes/%E8%80%83%E7%A0%94/%E6%95%B0%E5%AD%A6/"/>
    <url>/2025/06/20/Notes/%E8%80%83%E7%A0%94/%E6%95%B0%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>基础阶段（3-6月）：<br>660A组<br>1000题A组<br>张宇真题大全解1987-2012</p><p>强化阶段（7-9月）：<br>880</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>考研</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PowellShell美化</title>
    <link href="/2025/06/20/Notes/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/PowerShell%E7%BE%8E%E5%8C%96/"/>
    <url>/2025/06/20/Notes/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/PowerShell%E7%BE%8E%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>下载最新的PowerShell7.x.x</p><p>根据oh my posh官网安装，结合网上的博客配置<br><a href="https://ohmyposh.dev/docs/installation/windows">Windows | Oh My Posh</a><br><a href="https://blog.csdn.net/qq_21689457/article/details/129345662">oh-my-posh - 终端个性化工具 - 美化PowerShell &#x2F; cmd - 好物分享，真香~_小码农场-小码农的博客-CSDN博客</a></p><p>安装字体<br>先是按官方的指令下载不了，后来又成功了，然后根据给的config配置文件更改setting<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230923234327.png"></p><p>根据官网安装主题,修改profile中的代码<br><a href="https://ohmyposh.dev/docs/themes">Themes | Oh My Posh</a>这里有所有主题，更换时把profile的id改一下就行</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>花里胡哨</category>
      
    </categories>
    
    
    <tags>
      
      <tag>powershell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUPT抢课脚本</title>
    <link href="/2025/06/20/Notes/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/BUPT%E6%8A%A2%E8%AF%BE%E8%84%9A%E6%9C%AC/"/>
    <url>/2025/06/20/Notes/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/BUPT%E6%8A%A2%E8%AF%BE%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>浏览器f12打开控制台运行</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// ----- 需要配置的参数 -----</span><br><span class="hljs-comment">/* 需要抢的课程名称, 必修、选修、公选通用, 需要和教务系统上的课程名称完全一致 */</span><br>let COURSES = [<br>  <span class="hljs-string">&quot;蛙泳[男]&quot;</span>,<br>];<br><span class="hljs-comment">/* 需要抢的课程分组名称, 必修、选修、公选通用, 可以用于体育专项的抢课, 需要完全一致 */</span><br>let COURSE_GROUPS = [<br>];<br><span class="hljs-comment">/* 抢课间隔, 单位毫秒. 推荐数值: 抢课 100ms, 捡漏 500ms */</span><br>let INTERVAL_MS = <span class="hljs-number">1000</span>;<br><span class="hljs-comment">/* 是否开启公选课抢课, 默认关闭, 以防止抢到课程名一样的公选课 */</span><br>let ENABLE_GGXXK = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// ------------------------</span><br><br><span class="hljs-comment">// 以下不需要修改</span><br><br>let mainInterval;<br>let targetCourses = [];<br><br>const start = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  mainInterval = setInterval(handler, INTERVAL_MS);<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;--- start grabbing courses ---&quot;</span>);<br>&#125;;<br><br>const stop = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  clearInterval(mainInterval);<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;--- stop grabbing courses ---&quot;</span>);<br>&#125;;<br><br>const handler = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (targetCourses.<span class="hljs-built_in">length</span> === <span class="hljs-number">0</span>) &#123;<br>    getCourses();<br>  &#125;<br><br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<br>    <span class="hljs-string">`--- found <span class="hljs-subst">$&#123;targetCourses.<span class="hljs-built_in">length</span>&#125;</span> courses ---`</span><br>  );<br><br>  let paths = [<br>    <span class="hljs-string">&quot;/jsxsd/xsxkkc/xxxkOper&quot;</span>, <span class="hljs-comment">// 选修</span><br>    <span class="hljs-string">&quot;/jsxsd/xsxkkc/bxxkOper&quot;</span>, <span class="hljs-comment">// 必修</span><br>  ];<br>  <span class="hljs-keyword">if</span> (ENABLE_GGXXK) &#123;<br>    paths.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;/jsxsd/xsxkkc/ggxxkxkOper&quot;</span>); <span class="hljs-comment">// 公选</span><br>  &#125;<br>  <span class="hljs-keyword">for</span> (let course of targetCourses) &#123;<br>    <span class="hljs-keyword">for</span> (let path of paths) &#123;<br>      $.get(path, course, <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>);<br>    &#125;<br>  &#125;<br>&#125;;<br><br>const getCourses = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  let params = &#123;<br>    <span class="hljs-attr">sEcho</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">iColumns</span>: <span class="hljs-number">11</span>,<br>    <span class="hljs-attr">iDisplayStart</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">iDisplayLength</span>: <span class="hljs-number">999</span>,<br>  &#125;;<br>  let paths = [<br>    <span class="hljs-string">&quot;/jsxsd/xsxkkc/xsxkBxxk&quot;</span>, <span class="hljs-comment">// 必修</span><br>    <span class="hljs-string">&quot;/jsxsd/xsxkkc/xsxkXxxk&quot;</span>, <span class="hljs-comment">// 选修</span><br>  ];<br>  <span class="hljs-keyword">if</span> (ENABLE_GGXXK) &#123;<br>    paths.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;/jsxsd/xsxkkc/xsxkGgxxkxk&quot;</span>); <span class="hljs-comment">// 公选</span><br>  &#125;<br>  <span class="hljs-keyword">for</span> (let path of paths) &#123;<br>    $.post(path, params, (data) =&gt; &#123;<br>      let aaData = $.parseJSON(data).aaData;<br>      <span class="hljs-keyword">for</span> (let course of aaData) &#123;<br>        <span class="hljs-keyword">if</span> (COURSES.<span class="hljs-built_in">includes</span>(course.kcmc)) &#123;<br>          targetCourses.<span class="hljs-built_in">push</span>(course);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (COURSE_GROUPS.<span class="hljs-built_in">includes</span>(course.fzmc)) &#123;<br>          targetCourses.<span class="hljs-built_in">push</span>(course);<br>        &#125;<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;;<br><br>start();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>花里胡哨</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>提高免疫力</title>
    <link href="/2025/06/20/Notes/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E6%8F%90%E9%AB%98%E5%85%8D%E7%96%AB%E5%8A%9B/"/>
    <url>/2025/06/20/Notes/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E6%8F%90%E9%AB%98%E5%85%8D%E7%96%AB%E5%8A%9B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>多吃水果</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>花里胡哨</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo+Obsidian+github笔记博客</title>
    <link href="/2025/06/20/Notes/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/hexo+Obsidian+github%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/06/20/Notes/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/hexo+Obsidian+github%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前的Obsidian笔记都存在本地仓库，github page业已荒废，遂着手将ob笔记同步到blog上并实现自动更新</p><p><a href="https://zhuanlan.zhihu.com/p/60578464">使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎</a><br><a href="https://zhuanlan.zhihu.com/p/554333805">Obsidian+Git完美维护Hexo博客 - 知乎</a></p><h3 id="安装hexo并建立博客"><a href="#安装hexo并建立博客" class="headerlink" title="安装hexo并建立博客"></a>安装hexo并建立博客</h3><p>之前的网页源代码已经丢失，于是重新搭建网页</p><h4 id="本地建站"><a href="#本地建站" class="headerlink" title="本地建站"></a>本地建站</h4><p>首先新建一个本地文件夹（D:\myweb），在文件夹内打开git bash，安装hexo</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>然后便可以新建一个网页了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">hexo init      # 初始化<br>npm install    # 安装组件<br>hexo g   # 生成页面<br>hexo s   # 启动预览，在本地<br></code></pre></td></tr></table></figure><h4 id="部署到Github-Page"><a href="#部署到Github-Page" class="headerlink" title="部署到Github Page"></a>部署到Github Page</h4><p><strong>安装 hexo-deployer-git</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>然后<strong>修改  _ config.yml</strong>  文件末尾的 Deployment 部分</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">deploy:<br>  type: git<br>  repository: git@github.com:用户名/用户名.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure><p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages</p><h3 id="Obsidian实现笔记与博客同步"><a href="#Obsidian实现笔记与博客同步" class="headerlink" title="Obsidian实现笔记与博客同步"></a>Obsidian实现笔记与博客同步</h3><p><a href="https://segmentfault.com/a/1190000040767893">javascript - hexo配合github action 自动构建（多种形式） - 前端与算法 - SegmentFault 思否</a><br><a href="https://zhuanlan.zhihu.com/p/626270948">github action 部署 hexo踩坑记录 - 知乎</a><br><a href="https://zhuanlan.zhihu.com/p/441558922">GitHub自动部署HEXO个人博客 - 知乎</a><br>参考了很多文章，解决了无数bug</p><h4 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h4><p>首先需要两个GitHub仓库，一个(Obsidian-Notes)用来和Obsidian Git远程连接，同步文章内容，然后在push时使用Github Action执行hexo deploy来将部署好的网页传输到另一个仓库。另一个(zhengyangWang1)用来接受第一个仓库部署好的内容，作为Github Page的仓库。</p><p>首先先把本地存放博客框架的文件夹（D:\myweb\web）用git连接到第一个仓库,将内容同步。</p><h4 id="给两个仓库配置密钥"><a href="#给两个仓库配置密钥" class="headerlink" title="给两个仓库配置密钥"></a>给两个仓库配置密钥</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">ssh-keygen -f github-deploy-<span class="hljs-built_in">key</span> <span class="hljs-meta"># 在git Bash中执行，生成秘钥</span><br></code></pre></td></tr></table></figure><p>会在当前目录中生成两个文件：</p><ul><li>私钥文件 <code>github-deploy-key</code></li><li>公钥文件 <code>github-deploy-key.pub</code></li></ul><p>复制私钥文件中<strong>所有内容</strong>，在第一个项目仓库， Settings -&gt; Secrets and variables -&gt; Actions页面上点击New repository secret 添加。<br>在 Name 输入框填写 HEXO_DEPLOY_PRI。<br>在 Value 输入框填写 github-deploy-key文件<strong>所有内容</strong><br><strong>注</strong>：所有内容包括第一行和最后一行不太像私钥内容的东西，曾在此踩坑</p><p>在第二个仓库Setting-&gt; deploy key中配置公钥。在 Title 输入框填写 HEXO_DEPLOY_PUB，在 Key 输入框填写 github-deploy-key.pub 文件内容，勾选 Allow write access 选项。</p><h4 id="配置第一个仓库的Github-Actions"><a href="#配置第一个仓库的Github-Actions" class="headerlink" title="配置第一个仓库的Github Actions"></a>配置第一个仓库的Github Actions</h4><p>在第一个仓库的本地文件夹找到.github文件，在文件夹下创建workflows&#x2F;deploy.yml，文件夹名称必须是workflows，这个是github action的文件夹，下面的yml名称可以任意，为执行文件。</p><p>yml中的内容如下（改了无数bug）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">deploy</span>  <span class="hljs-comment"># name任意</span><br><br><span class="hljs-attr">on:</span>  <span class="hljs-comment"># 当执行push操作时，触发该action</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">GIT_USER:</span> <span class="hljs-string">zhengyangWang1</span>  <span class="hljs-comment"># git的用户名</span><br>  <span class="hljs-attr">GIT_EMAIL:</span> <span class="hljs-string">wangzhengyang@bupt.edu.cn</span>  <span class="hljs-comment"># git的邮箱</span><br>  <span class="hljs-attr">THEME_REPO:</span> <span class="hljs-string">fluid-dev/hexo-theme-fluid</span>  <span class="hljs-comment"># 主题</span><br>  <span class="hljs-attr">THEME_BRANCH:</span> <span class="hljs-string">main</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>  <span class="hljs-comment"># 环境，使用Ubuntu</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">ref:</span> <span class="hljs-string">main</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">安装</span> <span class="hljs-string">Node</span>  <span class="hljs-comment"># 这个格式是正确的，使用build那个会报错</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;20.x&quot;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">配置</span> <span class="hljs-string">环境变量</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">HEXO_DEPLOY_PRI:</span> <span class="hljs-string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          mkdir -p ~/.ssh/</span><br><span class="hljs-string">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span><br><span class="hljs-string">          chmod 600 ~/.ssh/id_rsa</span><br><span class="hljs-string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string">          git config --global user.name $GIT_USER</span><br><span class="hljs-string">          git config --global user.email $GIT_EMAIL</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">安装</span> <span class="hljs-string">Hexo</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm install hexo-cli -g</span><br><span class="hljs-string">          npm install</span><br><span class="hljs-string"></span>      <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">生成静态文件</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          rm -rf .deploy_git  # .deploy_git报错遂添加此行和下一行</span><br><span class="hljs-string">          npm install hexo-deployer-git --save</span><br><span class="hljs-string">          hexo clean</span><br><span class="hljs-string">          hexo generate</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">部署到Github</span> <span class="hljs-string">page</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">hexo</span> <span class="hljs-string">deploy</span><br></code></pre></td></tr></table></figure><p>本来还有部署主题文件的代码，但因为deploy时报错所以暂时删去，以后搞清楚作用在处理</p><p>配置好后push一下，看到deploy成功方可。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><a href="https://juejin.cn/post/7120189614660255781">Hexo + Obsidian + Git 完美的博客部署与编辑方案 - 掘金</a><br><a href="https://zhuanlan.zhihu.com/p/554333805">Obsidian+Git完美维护Hexo博客 - 知乎</a></p><h4 id="插件Folder-foucs-mode"><a href="#插件Folder-foucs-mode" class="headerlink" title="插件Folder foucs mode"></a>插件Folder foucs mode</h4><p>在ob中打开hexo博客的文件夹，发现文件太多，都是些平时不会浏览的配置文件，所以下载ob插件Folder foucs mode，可以将左侧文件列表聚焦到想要的地方（_posts文件夹下）</p><h4 id="适配hexo格式"><a href="#适配hexo格式" class="headerlink" title="适配hexo格式"></a>适配hexo格式</h4><p>使用hexo new创建笔记会在文件头加入一段模板，这样才会在部署时部署到网页。在ob中，打开核心插件中的模板功能，并将模板文件夹位置设为Template。新建一个Template文件夹，存放一个hexo文件头模板文件。当创建文件时，点击左侧功能栏中的插入模板即可插入文件头。</p><h4 id="自动生成分类"><a href="#自动生成分类" class="headerlink" title="自动生成分类"></a>自动生成分类</h4><p>Hexo写日志，通常我们都需要维护一个front-matter信息，包括<code>title</code>、<code>date</code>。博客多了，为了方便日志分类，一般还需要设置<code>categories</code>。<br><a href="https://github.com/xu-song/hexo-auto-category">GitHub - xu-song&#x2F;hexo-auto-category: Generate categories automatically for each post in Hexo</a>自动生成categories<br>安装：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">npm install hexo-auto-category <span class="hljs-attr">--save</span><br></code></pre></td></tr></table></figure><p>在站点根目录下的<code>_config.yml</code>添加:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">auto_category:</span>  <br> <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <br> <span class="hljs-attr">depth:</span><br></code></pre></td></tr></table></figure><p><strong>利用Git钩子函数触发更新:</strong><br>这个插件只有执行<code>hexo generate</code>时才会去读取文件夹并更新所有文章的Front-matter分类信息，所以我们可以利用<a href="https://link.zhihu.com/?target=https://git-scm.com/book/zh/v2/%25E8%2587%25AA%25E5%25AE%259A%25E4%25B9%2589-Git-Git-%25E9%2592%25A9%25E5%25AD%2590%23_git_hooks">Git的钩子函数</a>，在commit的时候先执行下<code>hexo generate</code>，这样就能实现自动更新了。<br>在<code>.git/hooks</code>目录下新建一个<code>pre-commit</code>文件，也可以执行<code>touch pre-commit</code>命令新建该文件,将如下命令写到文件里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>hexo generate &amp;&amp; git add .<br></code></pre></td></tr></table></figure><h4 id="PicGo-Github图床"><a href="#PicGo-Github图床" class="headerlink" title="PicGo+Github图床"></a>PicGo+Github图床</h4><p><a href="https://zhuanlan.zhihu.com/p/489236769">使用Github+picGo搭建图床，保姆级教程来了 - 知乎</a></p><h4 id="博客时间问题"><a href="#博客时间问题" class="headerlink" title="博客时间问题"></a>博客时间问题</h4><ul><li><input disabled="" type="checkbox"> 待解决</li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>花里胡哨</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Obsidian</tag>
      
      <tag>Github</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三分化</title>
    <link href="/2025/06/20/Notes/%E8%AE%AD%E7%BB%83%E8%AE%A1%E5%88%92/%E4%B8%89%E5%88%86%E5%8C%96/"/>
    <url>/2025/06/20/Notes/%E8%AE%AD%E7%BB%83%E8%AE%A1%E5%88%92/%E4%B8%89%E5%88%86%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231024171908.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231024171917.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>训练计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>训练</tag>
      
      <tag>三分化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>减脂</title>
    <link href="/2025/06/20/Notes/%E8%AE%AD%E7%BB%83%E8%AE%A1%E5%88%92/%E5%87%8F%E8%84%82/"/>
    <url>/2025/06/20/Notes/%E8%AE%AD%E7%BB%83%E8%AE%A1%E5%88%92/%E5%87%8F%E8%84%82/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="基础代谢"><a href="#基础代谢" class="headerlink" title="基础代谢"></a>基础代谢</h3><p>基本在1600-2200之间</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>训练计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Django基础</title>
    <link href="/2025/06/20/Notes/%E7%BC%96%E7%A8%8B/Django/Django%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/06/20/Notes/%E7%BC%96%E7%A8%8B/Django/Django%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="创建第一个项目"><a href="#创建第一个项目" class="headerlink" title="创建第一个项目"></a>创建第一个项目</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">django-admin startprojct HelloWorld</span><br></code></pre></td></tr></table></figure><p>创建一个Django项目名为HelloWorld，目录结构如下</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">$ cd HelloWorld/<br>$ tree<br>.<br>|<span class="hljs-string">-- HelloWorld</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- __init__.py</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- asgi.py</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- settings.py</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- urls.py</span><br><span class="hljs-string"></span>|<span class="hljs-string">   `-- wsgi.py</span><br><span class="hljs-string">`-- manage.py</span><br></code></pre></td></tr></table></figure><p>目录说明：</p><ul><li><strong>HelloWorld:</strong> 项目的容器。</li><li><strong>manage.py:</strong> 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。</li><li><strong>HelloWorld&#x2F;<strong>init</strong>.py:</strong> 一个空文件，告诉 Python 该目录是一个 Python 包。</li><li><strong>HelloWorld&#x2F;asgi.py:</strong> 一个 ASGI 兼容的 Web 服务器的入口，以便运行你的项目。</li><li><strong>HelloWorld&#x2F;settings.py:</strong> 该 Django 项目的设置&#x2F;配置。</li><li><strong>HelloWorld&#x2F;urls.py:</strong> 该 Django 项目的 URL 声明; 一份由 Django 驱动的网站”目录”。</li><li><strong>HelloWorld&#x2F;wsgi.py:</strong> 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。</li></ul><h4 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">python3</span> manage.py runserver <span class="hljs-number">0.0.0.0:8000</span><br></code></pre></td></tr></table></figure><p>0.0.0.0 让其它电脑可连接到开发服务器，8000 为端口号。如果不说明，那么端口号默认为 8000</p><blockquote><p>第一次打开网页出现报错：DisallowedHost at Invaild HTTP_HOST header： ‘0.0.0.0:8000’. You may need to add ‘0.0.0.0’ to ALLOWED_HOSTS.<br>解决：在配置文件settings.py中找到<code>ALLOWED_HOSTS</code>，将‘0.0.0.0’添加到其中</p></blockquote><h4 id="视图和URL配置"><a href="#视图和URL配置" class="headerlink" title="视图和URL配置"></a>视图和URL配置</h4><p>在<code>HelloWorld/HelloWorld/</code>目录下新建一个<code>views.py</code>文件，输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Hello world ! &quot;</span>)<br></code></pre></td></tr></table></figure><p>在urls.py文件中写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> re_path <span class="hljs-keyword">as</span> url  <br><span class="hljs-comment"># from django.conf.urls import url 这段代码已经过时，上面的re_path取代了之前版本的url  </span><br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views  <br>  <br>urlpatterns = [  <br>    url(<span class="hljs-string">r&#x27;^$&#x27;</span>, views.hello),  <br>]<br></code></pre></td></tr></table></figure><p>可在网页中看到“Hello world！”的输出</p><p><strong>path（）函数</strong>:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">path(route, <span class="hljs-keyword">view</span>, kwargs=<span class="hljs-keyword">None</span>, <span class="hljs-type">name</span>=<span class="hljs-keyword">None</span>)<br></code></pre></td></tr></table></figure><h3 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">python3</span> manage.py startapp app1  <span class="hljs-comment"># 创建app1</span><br></code></pre></td></tr></table></figure><p>目录结构如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vim">.<br>├── HelloWorld<br>│   ├── __init__.<span class="hljs-keyword">py</span><br>│   ├── __pycache__<br>│   │   ├── __init__.cpython-<span class="hljs-number">38</span>.pyc<br>│   │   ├── settings.cpython-<span class="hljs-number">38</span>.pyc<br>│   │   ├── urls.cpython-<span class="hljs-number">38</span>.pyc<br>│   │   ├── views.cpython-<span class="hljs-number">38</span>.pyc<br>│   │   └── wsgi.cpython-<span class="hljs-number">38</span>.pyc<br>│   ├── asgi.<span class="hljs-keyword">py</span><br>│   ├── settings.<span class="hljs-keyword">py</span><br>│   ├── urls.<span class="hljs-keyword">py</span>  # 配置app用的url<br>│   ├── views.<span class="hljs-keyword">py</span><br>│   └── wsgi.<span class="hljs-keyword">py</span><br>├── app1<br>│   ├── __init__.<span class="hljs-keyword">py</span><br>│   ├── admin.<span class="hljs-keyword">py</span><br>│   ├── apps.<span class="hljs-keyword">py</span><br>│   ├── migrations<br>│   │   └── __init__.<span class="hljs-keyword">py</span><br>│   ├── models.<span class="hljs-keyword">py</span>  # 对数据库进行操作<br>│   ├── tests.<span class="hljs-keyword">py</span><br>│   └── views.<span class="hljs-keyword">py</span>  # 视图函数<br>├── db.sqlite3<br>└── manage.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p><strong>编写URL和视图函数的对应关系</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">urlpatterns</span> = [  <br>    path(<span class="hljs-string">&#x27;something/&#x27;</span>, views.something)  <br>]<br></code></pre></td></tr></table></figure><p><strong>编写视图函数</strong></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">def</span> <span class="hljs-function"><span class="hljs-title">something</span>(<span class="hljs-variable">request</span>)</span><br><span class="hljs-variable">return</span> <span class="hljs-function"><span class="hljs-title">HttpResponse</span>(<span class="hljs-string">&quot;xxxxx&quot;</span>)</span><br></code></pre></td></tr></table></figure><p><strong>启动django项目</strong></p><ul><li>命令行启动<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> runserver<br></code></pre></td></tr></table></figure></li></ul><p>在app1下新建一个templates目录,写入HTML模板,可以在views中用<code>render</code>函数直接获取</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;something.html&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>编程</category>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工程</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django操作MySQL</title>
    <link href="/2025/06/20/Notes/%E7%BC%96%E7%A8%8B/Django/Django%E6%93%8D%E4%BD%9CMySQL/"/>
    <url>/2025/06/20/Notes/%E7%BC%96%E7%A8%8B/Django/Django%E6%93%8D%E4%BD%9CMySQL/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> mysqlclient<br></code></pre></td></tr></table></figure><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><p>ORM全称是：Object Relational Mapping(对象关系映射)，其主要作用是在编程中，把面向对象的概念跟数据库中表的概念对应起来。<br>在Django中的应用</p><ul><li>创建、修改、删除数据库中的表</li><li>操作表中的数据</li></ul><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul><li>启动MySQL服务</li><li>自带工具创建数据库<figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">create</span> datebase 数据库名;  <span class="hljs-meta"># 创建数据库</span><br><span class="hljs-keyword">show</span> databases;  <span class="hljs-meta"># 显示数据库列表</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Django连接数据库"><a href="#Django连接数据库" class="headerlink" title="Django连接数据库"></a>Django连接数据库</h3><p>在setting中修改默认的数据库<code>DATABASES</code>，Django默认的数据库是sqlite，将其改为mysql</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 1c">DATABASES = &#123;  <br>    &#x27;default&#x27;: &#123;  <br>        <span class="hljs-string">&quot;ENGINE&quot;</span>: <span class="hljs-string">&quot;django.db.backends.mysql&quot;</span>,  <br>        <span class="hljs-string">&quot;NAME&quot;</span>: <span class="hljs-string">&quot;table1&quot;</span>,  <span class="hljs-meta"># 数据库名字  </span><br>        <span class="hljs-string">&quot;USER&quot;</span>: &#x27;root&#x27;,  <span class="hljs-meta"># 用户名  </span><br>        &#x27;PASSWORD&#x27;: &#x27;Wzy<span class="hljs-number">030530</span>&#x27;,  <br>        &#x27;HOST&#x27;: &#x27;127.0.0.1&#x27;,  <span class="hljs-meta"># 主机  </span><br>        &#x27;PORT&#x27;: &#x27;<span class="hljs-number">3306</span>&#x27;,  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>注：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">SELECT <span class="hljs-keyword">User</span> <span class="hljs-title">FROM</span> mysql.user;  <span class="hljs-comment"># 查看mysql的用户名列表</span><br></code></pre></td></tr></table></figure><h3 id="创建删除和修改表"><a href="#创建删除和修改表" class="headerlink" title="创建删除和修改表"></a>创建删除和修改表</h3><p>在app的models文件下写入类 文件结构见[[Django基础]]</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">class User(models.Model):  <br>    # 用户身份证号 主键  <br>    user_id = models.CharField(<span class="hljs-string">&#x27;user_id&#x27;</span>, <span class="hljs-attribute">primary_key</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">max_length</span>=30)  <br>    # 用户姓名  <br>    user_name = models.CharField(<span class="hljs-string">&#x27;user_name&#x27;</span>, <span class="hljs-attribute">max_length</span>=20, <span class="hljs-attribute">null</span>=<span class="hljs-literal">False</span>)  <br>    <br>    class Meta:  <br>        db_table = <span class="hljs-string">&#x27;User&#x27;</span><br></code></pre></td></tr></table></figure><p>models修改完后，在终端中执行</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate<br></code></pre></td></tr></table></figure><p>即可在数据库中看到表</p><p>修改和删除表，只需要修改models中的类，然后执行上面两条命令即可</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>编程</category>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django模板</title>
    <link href="/2025/06/20/Notes/%E7%BC%96%E7%A8%8B/Django/Django%E6%A8%A1%E6%9D%BF/"/>
    <url>/2025/06/20/Notes/%E7%BC%96%E7%A8%8B/Django/Django%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="加载静态文件"><a href="#加载静态文件" class="headerlink" title="加载静态文件"></a>加载静态文件</h3><p><a href="https://docs.djangoproject.com/zh-hans/4.2/howto/static-files/">如何管理静态文件（如图片、JavaScript、CSS） | Django 文档 | Django</a><br><a href="https://blog.csdn.net/weixin_41529093/article/details/115653070">django在html中显示图片【实测成功】_django 显示图片-CSDN博客</a><br><a href="https://cloud.tencent.com/developer/article/1465931">Django基础篇-模板加载静态文件-腾讯云开发者社区-腾讯云</a><br>在Django的templates中，我们可以存放html文件，但<strong>静态文件</strong>如图片、CSS和Javascript不能与html放在同一目录下。需要在app目录下新建一个static文件夹，用来存放静态文件。</p><h4 id="修改settings文件"><a href="#修改settings文件" class="headerlink" title="修改settings文件"></a>修改settings文件</h4><p>确保<code>settings</code>文件中<code>INSTALLED_APPS</code>包含了<code>django.contrib.staticfiles</code>，并需要在<code>settings</code>中添加<code>STATIC_URL = &quot;static/&quot;</code>来定义静态文件的链接。<br>除了在 apps 中使用 <code>static/</code> 目录，你可以在配置文件中定义一个目录列表 (<a href="https://docs.djangoproject.com/zh-hans/4.2/ref/settings/#std-setting-STATICFILES_DIRS"><code>STATICFILES_DIRS</code></a>) ，Django 会从中寻找静态文件：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">STATICFILES_DIRS</span> = [<br>    BASE_DIR / <span class="hljs-string">&quot;static&quot;</span>,<br>    <span class="hljs-string">&quot;/var/www/static/&quot;</span>,<br>]<br></code></pre></td></tr></table></figure><h4 id="修改html文件"><a href="#修改html文件" class="headerlink" title="修改html文件"></a>修改html文件</h4><p>在html中需要添加一行<code>&#123;% load static %&#125;</code>在调用静态文件之前。<br>然后在调用静态文件时，使用<code>&#123;% static '文件路径' %&#125;</code></p><h3 id="前后端通信"><a href="#前后端通信" class="headerlink" title="前后端通信"></a>前后端通信</h3><h4 id="表单传参"><a href="#表单传参" class="headerlink" title="表单传参"></a>表单传参</h4><p><a href="https://docs.djangoproject.com/zh-hans/4.2/topics/forms/">使用表单 | Django 文档 | Django</a><br>前端可以使用表单将参数传递给后端接收</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;表单名&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">url</span></span> &#x27;接收表单的函数&#x27; %&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> &gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">csrf_token</span></span> %&#125;</span><span class="language-xml"> </span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- ... 其他表单字段 ... --&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>url中的函数需要在views中定义，用来接受表单中的信息并进行处理，接收方式常用<code>get</code>和<code>post</code></p><p>Django使用CSRF令牌保护机制，用于防止恶意网站利用用户的登录状态进行伪造请求。在表单中需要添加<code>&#123;% csrf_token %&#125;</code>标签，它会生成一个包含 CSRF 令牌的隐藏字段。</p><p>使用javascript函数返回布尔值，可以控制表单是否被提交：</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">button</span> type=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-keyword">onclick</span>=<span class="hljs-string">&quot;return submitForm()&quot;</span>&gt;提交&lt;/<span class="hljs-keyword">button</span>&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>编程</category>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工程</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL基本使用</title>
    <link href="/2025/06/20/Notes/%E7%BC%96%E7%A8%8B/MySQL/MySQL%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/06/20/Notes/%E7%BC%96%E7%A8%8B/MySQL/MySQL%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[[SQL基础]]<br><a href="https://blog.csdn.net/qq_43323867/article/details/107433570">mysql入门教程——基本操作_mysql使用教程-CSDN博客</a></p><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><h4 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 查询所有数据库</span><br><span class="hljs-keyword">SHOW</span> DATABASES;<br><span class="hljs-comment">-- 查询某个数据库的编码</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> test;<br></code></pre></td></tr></table></figure><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 创建库</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> demo1;<br><span class="hljs-comment">-- 创建数据库的时候指定编码表</span><br><span class="hljs-comment">-- GB2312、GBK、GB18030、UTF-8(unicode)、ISO-8859-1(拉丁文)</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> demo2 <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> gbk;<br><span class="hljs-comment">-- 修改库的校对规则</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> demo3 <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_bin;<br></code></pre></td></tr></table></figure><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 删除数据库</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span> demo4;<br></code></pre></td></tr></table></figure><p>修改数据库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 修改数据库编码表</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">DATABASE</span> demo3 <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> gbk;<br></code></pre></td></tr></table></figure><h3 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h3><p>在操作数据表之前，一定要记住切换到某个库下</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">-- 切换数据</span><br><span class="hljs-keyword">use</span> 库名;<br></code></pre></td></tr></table></figure><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb_user(<br>  id <span class="hljs-type">INT</span>,<br>  username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>),<br>  age <span class="hljs-type">INT</span><br>);<br></code></pre></td></tr></table></figure><h4 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除表</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> 表名;<br></code></pre></td></tr></table></figure><h4 id="查询表结构"><a href="#查询表结构" class="headerlink" title="查询表结构"></a>查询表结构</h4><p><code>desc</code> 表名; 查看表结构<br><code>show tables</code> ; 查看当前库内所有表名<br><code>show create table</code> 表名; 查看建表语句和字符集</p><h4 id="表中插入数据"><a href="#表中插入数据" class="headerlink" title="表中插入数据"></a>表中插入数据</h4><p>语法：insert into 表名 (列名，列名，列名…) values (值，值，值…);</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>编程</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装MySQL</title>
    <link href="/2025/06/20/Notes/%E7%BC%96%E7%A8%8B/MySQL/%E5%AE%89%E8%A3%85MySQL/"/>
    <url>/2025/06/20/Notes/%E7%BC%96%E7%A8%8B/MySQL/%E5%AE%89%E8%A3%85MySQL/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p><a href="https://blog.csdn.net/m0_52559040/article/details/121843945">2023 年 MySQL 8.0 安装配置 最简易（保姆级）_mysql8.0安装配置教程_mobeicanyue的博客-CSDN博客</a><br>安装时需要输入一个密码作为mysql的root权限密码，需要牢记</p><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>在Power Shell中输入：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -u root -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p>然后输入密码进入mysql<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230927202531.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>编程</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过MySQL Workbench操作</title>
    <link href="/2025/06/20/Notes/%E7%BC%96%E7%A8%8B/MySQL/%E9%80%9A%E8%BF%87MySQL%20Workbench%E6%93%8D%E4%BD%9C/"/>
    <url>/2025/06/20/Notes/%E7%BC%96%E7%A8%8B/MySQL/%E9%80%9A%E8%BF%87MySQL%20Workbench%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="创建数据库以及表"><a href="#创建数据库以及表" class="headerlink" title="创建数据库以及表"></a>创建数据库以及表</h3><h4 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h4><p>点击button栏的“create a new schema in the connected server”<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231006125516.png" alt="image.png"></p><p>在视图中间区域出现的标签页中，填写新建数据库的名字同时可以选择数据库的字符集和校对规则。点击“Apply”。<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231006125554.png" alt="image.png"></p><p>工具会给出一个提示窗口，该窗口中可看到刚才通过视图创建数据库的动作对应的SQL 语句。点击“Apply”。<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231006125652.png" alt="image.png"><br>执行完创建数据库操作后，工具会给出执行结果。看到如下图①所示的提示，表示创建数据库成功。点击“Finish”<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231006125738.png" alt="image.png"><br>此时可看到左侧数据库导航窗口中出现了刚刚新建的数据库。展开数据库名字左侧的箭头，可看到如下图所示的数据库“testdb”<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231006125801.png" alt="image.png"></p><h4 id="新建表"><a href="#新建表" class="headerlink" title="新建表"></a>新建表</h4><p>在上图中选中“testdb”的Table，右键选择“Create Table”。在中间工作区域新出现的标签窗口中填写表以及字段的相关信息。①填写表的名字及字符集和校对规则。②填写所有的字段名字以及字段的数据类型和相关约束。此处的约束缩写与③处的全称对应。<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231006125857.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231006125950.png" alt="image.png"></p><p>填好信息后，点击“Apply”，工具会弹出提示窗口，在该窗口中可看到刚才通过视图创建表的动作对应的SQL 语句。点击“Apply”。<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231006130449.png" alt="image.png"><br>执行完创建表操作后，工具会给出执行结果。看到如下图①所示的提示，表示创建数据库表成功。点击“Finish”。<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231006130508.png" alt="image.png"><br>此时可看到左侧数据库导航窗口中出现了刚刚新建的数据库表。展开表名字左侧的箭头，可看到如下图所示的字段<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231006130524.png" alt="image.png"></p><h3 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h3><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231006143655.png" alt="image.png"><br>点击想查看的表<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231006144930.png" alt="image.png"></p><p>可以在此修改表的内容</p><h3 id="导出和导入sql脚本"><a href="#导出和导入sql脚本" class="headerlink" title="导出和导入sql脚本"></a>导出和导入sql脚本</h3><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231006145032.png" alt="image.png"></p><p>进入如下界面，勾选想要导出的数据表，并选择适当的选项<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231006145328.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231006145437.png" alt="image.png"></p><p>点击上方的<code>Export Progress</code>，进入导出界面开始导出，完成后可以在指定路径下看到sql脚本生成。</p><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p>新建一个数据库，双击选中（名称会加粗）<img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231006145753.png" alt="image.png"><br>在<code>File</code>中点击<code>Open SQL Script</code>,打开指定sql脚本<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231006145846.png" alt="image.png"><br>点击框中的按钮执行<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20231006150022.png" alt="image.png"></p><p>执行结束后，返回home界面重新进入数据库（更新一下数据，否则导入的数据显示不出来），可以看到导入的数据。</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>编程</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI绘画</title>
    <link href="/2025/06/20/Notes/AI/AI%E7%BB%98%E7%94%BB/"/>
    <url>/2025/06/20/Notes/AI/AI%E7%BB%98%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="stable-diffusion-模型画任意要求"><a href="#stable-diffusion-模型画任意要求" class="headerlink" title="stable diffusion 模型画任意要求"></a>stable diffusion 模型画任意要求</h2><p>飞桨： <a href="https://aistudio.baidu.com/projectdetail/6665563">文生图[多loRA,ControlNet预处理,高清v2,视频生成]v11_副本</a><br>kaggle：<a href="https://zhuanlan.zhihu.com/p/643442494">免费部署stable diffusion，白嫖32G GPU - 知乎 (zhihu.com)</a></p><h2 id="ai-二维码美化"><a href="#ai-二维码美化" class="headerlink" title="ai 二维码美化"></a>ai 二维码美化</h2><p>飞桨：[AI艺术二维码生成器](<a href="https://aistudio.baidu.com/projectdetail/6452331">【创意应用】AI艺术二维码生成 - 飞桨AI Studio (baidu.com)</a>)</p><hr><h4 id="Stable-Diffusion使用"><a href="#Stable-Diffusion使用" class="headerlink" title="Stable Diffusion使用"></a>Stable Diffusion使用</h4><p><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">GitHub - AUTOMATIC1111&#x2F;stable-diffusion-webui: Stable Diffusion web UI</a>在Github上下载压缩包并按照说明安装<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230923234607.png"></p><p><strong>添加模型：</strong> 在<a href="https://civitai.com/">Civitai | Stable Diffusion models, embeddings, LoRAs and more</a>上下载模型，添加到相应文件夹。</p><ul><li>Checkpoint:基本模型，下载到webui\models\Stable-diffusion</li><li>Lora:微调模型，下载到webui\models\Lora</li><li>其他（待补充）</li></ul><p><strong>插件下载：</strong></p><ul><li>中文汉化：<a href="https://github.com/VinsonLaro/stable-diffusion-webui-chinese">GitHub - VinsonLaro&#x2F;stable-diffusion-webui-chinese: stable-diffusion-webui 的汉化扩展</a>作者写了非常详细的下载和使用教程</li><li>controlnet：<a href="https://github.com/lllyasviel/ControlNet-v1-1-nightly">GitHub - lllyasviel&#x2F;ControlNet-v1-1-nightly: Nightly release of ControlNet 1.1</a>同上的下载方式<br><strong>注意：</strong> 下载时可能会因为网络问题下载失败，挂梯子多尝试几次。下载失败后需要到webui\tmp中删除文件夹，否则无法再次下载。</li></ul><p><strong>Controlnet使用：</strong> 下载controlnet插件后，按照<a href="https://github.com/Mikubill/sd-webui-controlnet">GitHub - Mikubill&#x2F;sd-webui-controlnet: WebUI extension for ControlNet</a>提供的地址下载controlnet模型（14个），放到webui\extensions\sd-webui-controlnet\models目录下<br>此时在WebUI中即可看到controlnet界面，有许多参数可选项可调<br>可参考b站教程：<a href="https://www.bilibili.com/video/BV1gX4y1J7ei/?spm_id_from=333.788.recommend_more_video.-1&vd_source=7d4ddbfe6a66f2fbe94075935b693c57">“牛逼”的教程来了！一次学会AI二维码+艺术字+光影光效+创意Logo生成，绝对是B站最详细的Stable Diffusion特效设计流程教学！AI绘画进阶应用_哔哩哔哩_bilibili</a></p><p><strong>模型配置方案：</strong><br>SD提供了太多的模型组合，在此记录一下模型搭配及其效果</p><p><strong>提示词：</strong><br>一些通用的提示词可以提高图像质量，特定的提示词可以指定生成内容</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>StableDiffusion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OBsidian Git使用</title>
    <link href="/2025/06/20/Notes/Git/Obsidian%20Git%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/06/20/Notes/Git/Obsidian%20Git%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h3><p>第一次使用需要配置用户名和邮箱，这个数据是全局的，不需要重复配置</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-built_in">--global</span> <span class="hljs-string">user</span>.<span class="hljs-string">name</span> 用户名  <span class="hljs-comment"># 配置用户名</span><br><span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-built_in">--global</span> <span class="hljs-string">user</span>.<span class="hljs-string">email</span>  <span class="hljs-comment"># 配置邮箱</span><br><span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-built_in">--global</span> <span class="hljs-built_in">--list</span>  <span class="hljs-comment"># 检查是否配置成功</span><br></code></pre></td></tr></table></figure><h3 id="在Github上配置SSH-key"><a href="#在Github上配置SSH-key" class="headerlink" title="在Github上配置SSH key"></a>在Github上配置SSH key</h3><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><blockquote><p>SSH登录安全性由非对称加密保证，产生密钥时，一次产生两个密钥，一个公钥，一个私钥，在git中一般命名为id_rsa.pub, id_rsa。<br>  本地生成一个密钥对，其中公钥放到远程主机，私钥保存在本地<br>  当本地主机需要登录远程主机时，本地主机向远程主机发送一个登录请求，远程收到消息后，随机生成一个字符串并用公钥加密，发回给本地。本地拿到该字符串，用存放在本地的私钥进行解密，再次发送到远程，远程比对该解密后的字符串与源字符串是否等同，如果等同则认证成功。<br>  <strong>ssh key的配置是针对每台主机的</strong>。<br>  目的是在Github上实现免密登录</p></blockquote><p><strong>第一步：检查本地主机是否已经存在ssh key</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> ~<span class="hljs-string">/.ssh</span> <br>   <span class="hljs-keyword">ls</span> <br>   <span class="hljs-string">//</span>看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key<br></code></pre></td></tr></table></figure><p><strong>第二步：如果不存在，生成ssh key</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">ssh-keygen -t rsa -C <span class="hljs-string">&quot;xxx@xxx.com&quot;</span><br><span class="hljs-regexp">//</span>执行后一直回车即可<br></code></pre></td></tr></table></figure><p><strong>第三步：获取ssh key公钥内容（id_rsa.pub）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.ssh<br><span class="hljs-built_in">cat</span> id_rsa.pub<br></code></pre></td></tr></table></figure><p><strong>第四步：在Github的Setting中添加key</strong><br><strong>第五步：验证是否成功</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><h3 id="添加Github远程仓库："><a href="#添加Github远程仓库：" class="headerlink" title="添加Github远程仓库："></a>添加Github远程仓库：</h3><p>创建一个Github仓库用于存放笔记</p><h3 id="配置本地-Obsidian-仓库"><a href="#配置本地-Obsidian-仓库" class="headerlink" title="配置本地 Obsidian 仓库"></a>配置本地 Obsidian 仓库</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">touch README.md<br>git init<br>git <span class="hljs-keyword">add </span>README.md<br>git commit -m <span class="hljs-string">&quot;first commit&quot;</span><br>git <span class="hljs-keyword">branch </span>-M main<br>git remote <span class="hljs-keyword">add </span><span class="hljs-keyword">origin </span><span class="hljs-string">&quot;替换为上图中本条命令位置提示的远端地址（形如 git@gitee.com:user/repo.git）&quot;</span><br>git push -u <span class="hljs-keyword">origin </span>main<br></code></pre></td></tr></table></figure><p>然后Obsidian Git成功同步笔记：）</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Obsidian</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git操作</title>
    <link href="/2025/06/20/Notes/Git/Git%E6%93%8D%E4%BD%9C/"/>
    <url>/2025/06/20/Notes/Git/Git%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.runoob.com/git/git-tutorial.html">Git 教程 | 菜鸟教程</a></p><h3 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h3><p>Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。<br>这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p><ul><li><code>/etc/gitconfig</code> 文件：系统中对所有用户都普遍适用的配置。若使用 <code>git config</code> 时用 <code>--system</code> 选项，读写的就是这个文件。</li><li><code>~/.gitconfig</code> 文件：用户目录下的配置文件只适用于该用户。若使用 <code>git config</code> 时用 <code>--global</code> 选项，读写的就是这个文件。</li><li>当前项目的 Git 目录中的配置文件（也就是工作目录中的 <code>.git/config</code> 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量。</li></ul><h3 id="Git创建仓库"><a href="#Git创建仓库" class="headerlink" title="Git创建仓库"></a>Git创建仓库</h3><h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h4><p>Git 使用 <strong>git init</strong> 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 <strong>git init</strong> 是使用 Git 的第一个命令。</p><p>在执行完成 <strong>git init</strong> 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变。</p><p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ git <span class="hljs-built_in">add</span> *.c<br>$ git <span class="hljs-built_in">add</span> README<br>$ git commit -m <span class="hljs-string">&#x27;初始化项目版本&#x27;</span><br></code></pre></td></tr></table></figure><p>以上命令将目录下以 .c 结尾及 README 文件提交到仓库中。</p><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><p>我们使用 <strong>git clone</strong> 从现有 Git 仓库中拷贝项目<br>克隆仓库的命令格式为：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">&lt;repo</span>&gt;<br></code></pre></td></tr></table></figure><p>如果我们需要克隆到指定的目录，可以使用以下命令格式：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">&lt;repo</span>&gt; <span class="hljs-tag">&lt;directory&gt;</span><br></code></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><strong>repo:</strong> Git 仓库。</li><li><strong>directory:</strong> 本地目录。</li></ul><h3 id="Git-基本操作"><a href="#Git-基本操作" class="headerlink" title="Git 基本操作"></a>Git 基本操作</h3><p>Git 常用的是以下 6 个命令：<strong>git clone</strong>、<strong>git push</strong>、<strong>git add</strong> 、<strong>git commit</strong>、<strong>git checkout</strong>、<strong>git pull</strong><br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230923234622.png"></p><h4 id="Git工作区、暂存库和版本库"><a href="#Git工作区、暂存库和版本库" class="headerlink" title="Git工作区、暂存库和版本库"></a>Git工作区、暂存库和版本库</h4><ul><li><strong>工作区：</strong> 电脑中的文件目录</li><li><strong>暂存区：</strong> 英文叫 stage 或 index。一般存放在 .git 目录下的 index 文件（.git&#x2F;index）中，所以我们把暂存区有时也叫作索引（index）。</li><li><strong>版本库：</strong> 工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库。</li></ul><p>User在工作区修改文件，通过<code>git add</code>添加到暂存区，再通过<code>git commit</code>添加到版本库，再通过<code>git push</code>添加到远程仓库</p><p><strong>说明：</strong></p><ul><li>workspace：工作区</li><li>staging area：暂存区&#x2F;缓存区</li><li>local repository：版本库或本地仓库</li><li>remote repository：远程仓库</li></ul><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git add</code></td><td>添加文件到暂存区</td></tr><tr><td><code>git status</code></td><td>查看仓库当前的状态，显示有变更的文件。</td></tr><tr><td><code>git diff</code></td><td>比较文件的不同，即暂存区和工作区的差异。</td></tr><tr><td><code>git commit</code></td><td>提交暂存区到本地仓库。</td></tr><tr><td><code>git reset</code></td><td>回退版本。</td></tr><tr><td><code>git rm</code></td><td>将文件从暂存区和工作区中删除。</td></tr><tr><td><code>git mv</code></td><td>移动或重命名工作区文件。</td></tr><tr><td><code>git remote</code></td><td>远程仓库操作</td></tr><tr><td><code>git fetch</code></td><td>从远程获取代码库</td></tr><tr><td><code>git pull</code></td><td>下载远程代码并合并</td></tr><tr><td><code>git push</code></td><td>上传远程代码并合并</td></tr></tbody></table><h3 id="Git-分支管理"><a href="#Git-分支管理" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h3><p>创建分支命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">git <span class="hljs-title function_">branch</span> <span class="hljs-params">(branchname)</span><br></code></pre></td></tr></table></figure><p>切换分支命令:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">git checkout <span class="hljs-comment">(branchname)</span><br></code></pre></td></tr></table></figure><p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。<br>合并分支命令:</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230923234633.png"></p><p>合并后删除无用分支：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch -d newtest</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>连接Github</title>
    <link href="/2025/06/20/Notes/Git/%E8%BF%9E%E6%8E%A5Github/"/>
    <url>/2025/06/20/Notes/Git/%E8%BF%9E%E6%8E%A5Github/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="git连接远程仓库"><a href="#git连接远程仓库" class="headerlink" title="git连接远程仓库"></a>git连接远程仓库</h3><p>从github克隆仓库到本地</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">ssh</span><br></code></pre></td></tr></table></figure><p>连接远程仓库</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git remote <span class="hljs-keyword">add </span><span class="hljs-keyword">origin </span>ssh<br></code></pre></td></tr></table></figure><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><p>本地新建分支后push到github</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">branch </span>-v  <span class="hljs-comment"># 查看分支列表</span><br>git <span class="hljs-keyword">branch </span>分支名  <span class="hljs-comment"># 新建分支</span><br>git checkout 分支名  <span class="hljs-comment"># 转到该分支</span><br></code></pre></td></tr></table></figure><p>删除本地分支</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">branch </span>-d 分支名  <span class="hljs-comment"># 删除本地分支</span><br>git <span class="hljs-keyword">branch </span>-D 分支名  <span class="hljs-comment"># 强制删除本地分支</span><br></code></pre></td></tr></table></figure><p>删除远程分支</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">git <span class="hljs-keyword">push</span> origin --<span class="hljs-keyword">delete</span> 分支名  <span class="hljs-meta"># 删除远程分支</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell编程</title>
    <link href="/2025/06/20/Notes/Linux%E5%AD%A6%E4%B9%A0/Shell%E7%BC%96%E7%A8%8B/"/>
    <url>/2025/06/20/Notes/Linux%E5%AD%A6%E4%B9%A0/Shell%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>打开文本编辑器(可以使用 vi&#x2F;vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell）<br><code>#!</code> 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell<br>保存为 test.sh，并 cd 到相应目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x ./test.sh  <span class="hljs-comment">#使脚本具有执行权限</span><br>./test.sh  <span class="hljs-comment">#执行脚本</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本命令</title>
    <link href="/2025/06/20/Notes/Linux%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/06/20/Notes/Linux%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>命令的一般语法：命令 [-选项] [参数列表]</p><p>ls：列出当前目录下所有文件和文件夹<br>    ls -a：显示所有文件夹（隐藏文件夹）<br>    ls -l：显示文件属性<br>    ls -la：结合前两个<br>help：查看内建命令的作用及使用方法<br>            外部命令：命令 –help<br>type：查看指定命令是否为内建指令<br>man：查阅操作手册（manual）</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件系统</title>
    <link href="/2025/06/20/Notes/Linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <url>/2025/06/20/Notes/Linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="目录与路径"><a href="#目录与路径" class="headerlink" title="目录与路径"></a>目录与路径</h3><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>&#x2F;</td><td>根目录</td></tr><tr><td>&#x2F;bin</td><td>可执行文件</td></tr><tr><td>&#x2F;home</td><td>用户的主目录</td></tr></tbody></table><p><strong>特殊目录符号：</strong></p><table><thead><tr><th>目录</th><th>释义</th></tr></thead><tbody><tr><td>.</td><td>代表当前目录</td></tr><tr><td>..</td><td>代表上层目录</td></tr><tr><td>-</td><td>代表上一个工作目录</td></tr><tr><td>~</td><td>代表当前用户的主目录</td></tr><tr><td>~accountname</td><td>代表该name账户的主目录</td></tr></tbody></table><h3 id="PATH环境变量"><a href="#PATH环境变量" class="headerlink" title="PATH环境变量"></a>PATH环境变量</h3><p>当前工作目录下的命令和程序可以直接在bash中执行，其他目录下的命令和程序无法执行。而PATH中的目录下的命令和程序可以在任何目录下执行。当执行命令时，会先在当前目录中寻找，如果存在即执行命令，如果不存在，则会在PATH中寻找并执行第一个相匹配的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示环境变量中的内容，每个路径用：隔开</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span>      <span class="hljs-comment"># $与PATH间没有空格</span><br><br><span class="hljs-comment"># 添加路径到PATH环境变量</span><br><span class="hljs-built_in">export</span> PATH=命令行路径:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><p><strong>显示当前工作目录：</strong></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mel"># <span class="hljs-keyword">pwd</span>显示当前工作目录（<span class="hljs-keyword">print</span> working directory）<br><span class="hljs-keyword">pwd</span><br><br># 用<span class="hljs-keyword">help</span>查看<span class="hljs-keyword">pwd</span>命令的帮助信息<br><span class="hljs-keyword">help</span> <span class="hljs-keyword">pwd</span><br></code></pre></td></tr></table></figure><p><strong>查看目录与文件：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -l查看文件属性</span><br><span class="hljs-built_in">ls</span> -l<br><br><span class="hljs-comment"># -h以方便阅读的单位显示文件尺寸</span><br><span class="hljs-built_in">ls</span> -lh<br><br><span class="hljs-comment"># -S按照文件大小降序排列</span><br><span class="hljs-built_in">ls</span> -lS<br><br><span class="hljs-comment"># -R可以递归地显示所有路径</span><br><span class="hljs-built_in">ls</span> -R<br></code></pre></td></tr></table></figure><p><strong>常用目录操作：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 新建目录</span><br><span class="hljs-built_in">mkdir</span> 文件名<br><br><span class="hljs-comment"># 用-p创建多级目录</span><br><span class="hljs-built_in">mkdir</span> -p 路径<br><br><span class="hljs-comment"># 复制目录</span><br><span class="hljs-built_in">cp</span> -r 源路径 目标路径<br><br><span class="hljs-comment"># 移动目录</span><br><span class="hljs-built_in">mv</span> 源路径 目标路径<br><br><span class="hljs-comment"># 删除目录，加-r递归删除目录中的内容</span><br><span class="hljs-built_in">rm</span> -r 路径<br></code></pre></td></tr></table></figure><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h4 id="文件类型："><a href="#文件类型：" class="headerlink" title="文件类型："></a>文件类型：</h4><p><strong>普通文件类型</strong>：<br>Linux中最多的一种文件类型, 包括 纯文本文件(ASCII)；二进制文件(binary)；数据格式的文件(data);各种压缩文件.第一个属性为 [-]<br><strong>目录文件</strong>：<br>就是目录， 能用 # cd 命令进入的。第一个属性为 [d]，例如 [drwxrwxrwx]<br><strong>块设备文件</strong>：<br>块设备文件 ： 就是存储数据以供系统存取的接口设备，简单而言就是硬盘。例如一号硬盘的代码是 &#x2F;dev&#x2F;hda1等文件。第一个属性为 [b]<br><strong>字符设备</strong>：<br>字符设备文件：即串行端口的接口设备，例如键盘、鼠标等等。第一个属性为 [c]<br><strong>套接字文件</strong>：<br>这类文件通常用在网络数据连接。可以启动一个程序来监听客户端的要求，客户端就可以通过套接字来进行数据通信。第一个属性为 [s]，最常在 &#x2F;var&#x2F;run目录中看到这种文件类型<br><strong>管道文件</strong>：<br>FIFO也是一种特殊的文件类型，它主要的目的是，解决多个程序同时存取一个文件所造成的错误。FIFO是first-in-first-out(先进先出)的缩写。第一个属性为 [p]<br><strong>链接文件</strong>：<br>类似Windows下面的快捷方式。第一个属性为 [l]，例如 [lrwxrwxrwx]</p><h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><p>管道是一系列将标准输入输出连接起来的进程</p><p><strong>匿名管道：</strong> 用符号“|”表示，用来连接多个命令，将前一个命令的输出导入第二个命令作为输入</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"># 查看<span class="hljs-keyword">ls</span>中包含某个关键词的文件<br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> | <span class="hljs-keyword">grep</span> 关键词<br></code></pre></td></tr></table></figure><p><strong>命名管道：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 用mkfifo命令创建命名管道（FIFO）</span><br><span class="hljs-built_in">mkfifo</span> 管道文件名<br></code></pre></td></tr></table></figure><h4 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h4><ul><li>touch：文件存在时，修改文件访问时间为当前时间，否则创建该文件</li><li>用文本编辑器创建文件</li><li>重定向方式创建文件：1）“&gt;”操作符：覆盖源文件中已有内容  2）“&gt;&gt;”操作符：将新内容追加到源文件内容的后面</li></ul><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>command &gt; file</td><td>将输出重定向到 file。</td></tr><tr><td>command &lt; file</td><td>将输入重定向到 file。</td></tr><tr><td>command &gt;&gt; file</td><td>将输出以追加的方式重定向到 file。</td></tr><tr><td>n &gt; file</td><td>将文件描述符为 n 的文件重定向到 file。</td></tr><tr><td>n &gt;&gt; file</td><td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td></tr><tr><td>n &gt;&amp; m</td><td>将输出文件 m 和 n 合并。</td></tr><tr><td>n &lt;&amp; m</td><td>将输入文件 m 和 n 合并。</td></tr><tr><td>&lt;&lt; tag</td><td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td></tr></tbody></table><h4 id="复制、移动、删除文件"><a href="#复制、移动、删除文件" class="headerlink" title="复制、移动、删除文件"></a>复制、移动、删除文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用cp命令复制文件</span><br><span class="hljs-built_in">cp</span> 文件名 新文件名<br><br><span class="hljs-comment"># 用cp命令创建快捷方式（符号链接）</span><br><span class="hljs-built_in">cp</span> -s 文件名 快捷方式名<br><br><span class="hljs-comment"># 使用cp命令-p选项复制文件的完整属性</span><br><span class="hljs-built_in">cp</span> -p 文件名 新文件名<br><br><span class="hljs-comment"># 使用mv命令移动文件</span><br><span class="hljs-built_in">mv</span> 文件名 指定路径<br><br><span class="hljs-comment"># 使用mv命令-i选项移动文件时会提示是否覆盖</span><br><span class="hljs-built_in">mv</span> -i 文件名 指定路径<br><br><span class="hljs-comment"># 使用 mv命令-b选项移动文件时会自动备份重名文件之后直接移动</span><br><span class="hljs-built_in">mv</span> -b 文件名 指定路径  <span class="hljs-comment"># 备份</span><br><br></code></pre></td></tr></table></figure><h4 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 使用which命令搜索PATH环境变量中包含的命令的具体路径</span><br>which ls<br><br><span class="hljs-comment"># 使用locate命令查找文件路径，会显示含该关键词的所有文件</span><br>locate 关键词<br><br><span class="hljs-comment"># locate -c输出查找到的文件的个数</span><br>locate -c 关键词<br><br><span class="hljs-comment"># locate -l输出查找到的前n个文档</span><br>locate -l n 关键词<br><br><span class="hljs-comment"># find查找最近三天修改过的文件</span><br><span class="hljs-built_in">find</span> ~ -mtime -3<br><br><span class="hljs-comment"># find查找某路径下属于某用户的所有文件</span><br><span class="hljs-built_in">find</span> 路径 -user 用户名<br><br><span class="hljs-comment"># 根据文件名查找文件路径</span><br><span class="hljs-built_in">find</span> -name 文件名 # 需要输入完整文件名<br><br><span class="hljs-comment"># 查找当前目录下所有管道类型文件</span><br><span class="hljs-built_in">find</span> -type p<br></code></pre></td></tr></table></figure><h4 id="显示文件内容"><a href="#显示文件内容" class="headerlink" title="显示文件内容"></a>显示文件内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># cat拼接两个文件</span><br><span class="hljs-built_in">cat</span> 第一个文件 第二个文件 &gt; 输出的文件  <span class="hljs-comment"># 用重定向输出到指定文件，默认是输出到终端</span><br><br><span class="hljs-comment"># 当cat一个文件时，则会输出文件内容</span><br> <span class="hljs-built_in">cat</span> 文件名<br> <br><span class="hljs-comment"># cat -n显示文件行号</span><br><span class="hljs-built_in">cat</span> -n 文件名<br><br><span class="hljs-comment"># more命令</span><br>more 文件名<br><br><span class="hljs-comment"># head命令</span><br><span class="hljs-built_in">head</span> -n 5 文件名  <span class="hljs-comment"># 输出文件前5行</span><br>more -c 100 文件名  <span class="hljs-comment"># 输出文件前100个字符</span><br><br><span class="hljs-comment"># tail命令</span><br><span class="hljs-built_in">tail</span> -n 5 文件名  <span class="hljs-comment"># 输出后5行</span><br><span class="hljs-built_in">tail</span> -c +115 文件名  <span class="hljs-comment"># 输出115行至最后</span><br><br><span class="hljs-comment"># less命令</span><br>less 文件名<br><br><span class="hljs-comment"># grep命令可以实现关键词匹配</span><br>grep <span class="hljs-string">&quot;关键词&quot;</span> 文件名<br></code></pre></td></tr></table></figure><h4 id="文件压缩与备份"><a href="#文件压缩与备份" class="headerlink" title="文件压缩与备份"></a>文件压缩与备份</h4><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-comment"># 使用gzip进行文件压缩</span><br>gzip 文件名<br><br><span class="hljs-comment"># gzip -c：将压缩的内容输出到屏幕上，源文件不变，可以通过重定向处理输出的内容</span><br><br><span class="hljs-comment"># 使用gzip解压缩</span><br>gzip -d 文件名<br><br><span class="hljs-comment"># bzip2 同gzip</span><br><br><span class="hljs-comment"># tar命令可以将多个文件合并为一个压缩包</span><br><span class="hljs-literal">-</span>c:新建打包文件<br><span class="hljs-literal">-</span>t：查看打包文件中包含哪些文件<br><span class="hljs-literal">-</span>x：解包文件包<br><span class="hljs-literal">-</span>j：通过bzip2的支持进行压缩/解压缩<br><span class="hljs-literal">-</span>z：通过gzip的支持进行压缩/解压缩<br><span class="hljs-literal">-</span>C：指定解包目标路径<br><span class="hljs-literal">-</span>p：打包过程中保留源文件的属性和权限<br><span class="hljs-literal">-</span>v：输出打包过程中正在处理的文件名<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文本编辑器</title>
    <link href="/2025/06/20/Notes/Linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <url>/2025/06/20/Notes/Linux%E5%AD%A6%E4%B9%A0/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Nano"><a href="#Nano" class="headerlink" title="Nano"></a>Nano</h2><h3 id="打开文件："><a href="#打开文件：" class="headerlink" title="打开文件："></a>打开文件：</h3><p>在终端直接输入</p><blockquote><p>nano 文件名<br>如：nano test</p></blockquote><p>如果当前目录不存在该文件，则会创建并打开</p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p>直接在光标处输入</p><h3 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h3><p>Ctrl+X退出，然后输入Y保存，新文件需要确认文件名，输入N则不保存直接退出</p><hr><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p><a href="https://zhuanlan.zhihu.com/p/68111471">精通 VIM ，此文就够了 - 知乎</a><br><a href="https://www.runoob.com/linux/linux-vim.html">Linux vi&#x2F;vim | 菜鸟教程</a></p><p>基本上 vi&#x2F;vim 共分为三种模式，<strong>命令模式（Command Mode）、输入模式（Insert Mode）和命令行模式（Command-Line Mode）</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20230923234707.png"></p><h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p><strong>像在文本文档中打字一样输入</strong></p><p>在命令模式下按下 i 就进入了输入模式，使用 Esc 键可以返回到普通模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及Shift组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>&#x2F;<strong>END</strong>，移动光标到行首&#x2F;行尾</li><li><strong>Page Up</strong>&#x2F;<strong>Page Down</strong>，上&#x2F;下翻页</li><li><strong>Insert</strong>，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><h3 id="命令模式（一般模式）"><a href="#命令模式（一般模式）" class="headerlink" title="命令模式（一般模式）"></a>命令模式（一般模式）</h3><p><strong>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</strong></p><p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符，比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令。</p><p>以下是普通模式常用的几个命令：</p><ul><li>i – 切换到输入模式，在光标当前位置开始输入文本。</li><li>x – 删除当前光标所在处的字符。</li><li>: – 切换到底线命令模式，以在最底一行输入命令。</li><li>a – 进入插入模式，在光标下一个位置开始输入文本。</li><li>o：在当前行的下方插入一个新行，并进入插入模式。</li><li>O – 在当前行的上方插入一个新行，并进入插入模式。</li><li>dd – 删除当前行。</li><li>yy – 复制当前行。</li><li>p – 粘贴剪贴板内容到光标下方。</li><li>P – 粘贴剪贴板内容到光标上方。</li><li>u – 撤销上一次操作。</li><li>Ctrl + r – 重做上一次撤销的操作。</li><li>:w – 保存文件。</li><li>:q – 退出 Vim 编辑器。</li><li>:q! – 强制退出Vim 编辑器，不保存修改。</li></ul><p>若想要编辑文本，只需要启动 Vim，进入了命令模式，按下 i 切换到输入模式即可。</p><p>命令模式只有一些最基本的命令，因此仍要依靠<strong>底线命令行模式</strong>输入更多命令。</p><h3 id="底线命令模式（命令行模式）"><a href="#底线命令模式（命令行模式）" class="headerlink" title="底线命令模式（命令行模式）"></a>底线命令模式（命令行模式）</h3><p>在命令模式下按下 :（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li><code>:w</code>：保存文件。</li><li><code>:q</code>：退出 Vim 编辑器。</li><li><code>:wq</code>：保存文件并退出 Vim 编辑器。</li><li><code>:q!</code>：强制退出Vim编辑器，不保存修改。</li></ul><p>按 ESC 键可随时退出底线命令模式。</p><table><thead><tr><th>移动光标的方法</th><th></th></tr></thead><tbody><tr><td>h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td>j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td>k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td>l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr></tbody></table><table><thead><tr><th>搜索替换</th><th></th><th></th></tr></thead><tbody><tr><td>&#x2F;word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 &#x2F;vbird 即可！ (常用)</td><td></td></tr><tr><td>?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td><td></td></tr><tr><td>n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td><td></td></tr><tr><td>N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 &#x2F;vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td><td></td></tr><tr><td>:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：  <br>『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』。(常用)</td><td></td></tr><tr><td>:1,$s&#x2F;word1&#x2F;word2&#x2F;g 或 :%s&#x2F;word1&#x2F;word2&#x2F;g</td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td><td></td></tr><tr><td>:1,$s&#x2F;word1&#x2F;word2&#x2F;gc 或 :%s&#x2F;word1&#x2F;word2&#x2F;gc</td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td><td></td></tr></tbody></table><table><thead><tr><th>vim 环境的变更</th><th></th><th></th></tr></thead><tbody><tr><td>:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td><td></td></tr><tr><td>:set nonu</td><td>与 set nu 相反，为取消行号！</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序与进程管理</title>
    <link href="/2025/06/20/Notes/Linux%E5%AD%A6%E4%B9%A0/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <url>/2025/06/20/Notes/Linux%E5%AD%A6%E4%B9%A0/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>实现在一个终端中执行多个任务</strong></p><h3 id="程序管理"><a href="#程序管理" class="headerlink" title="程序管理"></a>程序管理</h3><p>bash环境中，在命令最后添加 <strong>&amp;</strong> 符号使命令切换到后台执行<br>后台执行的程序的输出会直接输出在终端，干扰我们在终端中的编辑，需要重定向到适当位置</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">命令 &gt; <span class="hljs-regexp">/tmp/</span>name.<span class="hljs-built_in">log</span> &amp;<br></code></pre></td></tr></table></figure><p>输出会保存在name.log中，使用cat可以查看</p><p>Ctrl + z可以将终端中的程序切换到后台，并输出工作号码</p><p>使用jobs查看后台程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">jobs</span><br><br><span class="hljs-comment"># 使用-l选项显示后台程序的PID</span><br><span class="hljs-built_in">jobs</span> -l<br><br><span class="hljs-comment"># 使用-r输出正在后台运行的程序</span><br><span class="hljs-built_in">jobs</span> -r<br><br><span class="hljs-comment"># 使用-s输出所有已停止的后台程序</span><br><span class="hljs-built_in">jobs</span> -s<br></code></pre></td></tr></table></figure><p>使用fg命令将后台程序切换到前台</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">fg</span>  <span class="hljs-comment"># 将最后一个移到后台的程序打开</span><br><br><span class="hljs-built_in">fg</span> n  <span class="hljs-comment"># 将工作号码为n的程序打开</span><br></code></pre></td></tr></table></figure><p>使用bg启动后台程序</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bg</span> <span class="hljs-number">1</span>  # 启动工作号码为<span class="hljs-number">1</span>的程序<br></code></pre></td></tr></table></figure><p>删除后台程序<br>程序在前台，Ctrl + C可以关闭程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -1  <span class="hljs-comment"># 重新读取参数配置</span><br><span class="hljs-built_in">kill</span> -2  <span class="hljs-comment"># 等于Ctrl + C</span><br><span class="hljs-built_in">kill</span> -9  <span class="hljs-comment"># 强制杀死一个程序</span><br><span class="hljs-built_in">kill</span> -15  <span class="hljs-comment"># 默认值，正常删除</span><br></code></pre></td></tr></table></figure><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h4><p>ps命令：显示进程</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">ps</span><br><span class="hljs-built_in">ps</span> <span class="hljs-literal">-l</span>  <span class="hljs-comment"># 显示详细信息</span><br></code></pre></td></tr></table></figure><p>pstree命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">pstree<br>pstree -<span class="hljs-selector-tag">p</span>  # -<span class="hljs-selector-tag">p</span>显示进程对应的PID<br></code></pre></td></tr></table></figure><p>top命令</p><h4 id="系统资源查看"><a href="#系统资源查看" class="headerlink" title="系统资源查看"></a>系统资源查看</h4><p>查看内存使用量</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">free</span> <br><span class="hljs-keyword">free</span> -m   # -m使用MB为单位<br></code></pre></td></tr></table></figure><p>查看系统及内核信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a  <span class="hljs-comment"># 查看所有信息</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Advanced Tables表格绘制</title>
    <link href="/2025/06/20/Notes/Ob%E6%8F%92%E4%BB%B6/Advanced%20Tables%20%E8%A1%A8%E6%A0%BC%E7%BB%98%E5%88%B6/"/>
    <url>/2025/06/20/Notes/Ob%E6%8F%92%E4%BB%B6/Advanced%20Tables%20%E8%A1%A8%E6%A0%BC%E7%BB%98%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>用 | 隔开内容，然后按TAB生成表格，Enter进入下一行</p><p>示例：</p><table><thead><tr><th>Hotkey</th><th>Action</th></tr></thead><tbody><tr><td>Tab</td><td>Next Cell</td></tr><tr><td>Enter</td><td>Next Row</td></tr><tr><td>Shift+Tab</td><td>Previous Cell</td></tr><tr><td>Ctrl+Shift+D</td><td>Open table controls sidebar</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>Ob插件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Obsidian</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>山东</title>
    <link href="/2025/06/20/Notes/%E6%97%85%E6%B8%B8/%E5%B1%B1%E4%B8%9C/"/>
    <url>/2025/06/20/Notes/%E6%97%85%E6%B8%B8/%E5%B1%B1%E4%B8%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>22号下午-26号走<br>24-26都是阴天<br>22</p><h2 id="烟台："><a href="#烟台：" class="headerlink" title="烟台："></a>烟台：</h2><p>金沙滩海滨公园<br>孤独的鲸<br>养马岛–时间<br>朝阳街<br>烟台山<br>月亮湾<br>天马栈桥<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20250620152226.png" alt="image.png"><br>24下午到烟台南站<br>酒店订到烟台站附近</p><ul><li>月亮湾</li><li>晚上烟大小吃街</li><li>所成里</li></ul><p>25号</p><ul><li>养马岛</li><li>滨海中路</li><li>渔人码头</li></ul><p>26号</p><ul><li>烟台山</li><li>金沙滩海滨公园</li><li>天马栈桥</li></ul><h2 id="威海"><a href="#威海" class="headerlink" title="威海"></a>威海</h2><p>猫头山<br>布鲁维斯号沉船<br>国际海水浴场<br>海源公园<br>那香海<br>威海公园<br>火炬八街<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20250620141708.png" alt="image.png"></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>22号下午：<br>住处：海景 影音 </p><ul><li>悦海公园</li><li>威海公园<br>晚上：</li><li>韩乐坊吃饭</li><li>购买防晒衣等<br>23号：<br>猫头山<br>半月湾<br>金海湾栈桥<br>火炬八街<br>国际海水浴场<br>24号：<br>那香海<br>沉船<br>前往烟台</li></ul><p>24 下午出发去烟台</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>旅游</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>景点</title>
    <link href="/2025/06/20/Notes/%E6%97%85%E6%B8%B8/%E6%99%AF%E7%82%B9/"/>
    <url>/2025/06/20/Notes/%E6%97%85%E6%B8%B8/%E6%99%AF%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>远：</p><blockquote><p>兵马俑 华清池 骊山 秦始皇陵</p></blockquote><p>晚上:</p><blockquote><p>大唐不夜城 大唐芙蓉园 钟楼&amp;鼓楼 </p></blockquote><p>城墙<br>大雁塔 小雁塔<br><del>陕西历史博物馆（只能越20号了 8.14 10点、11点、18点）</del><br>碑林博物馆</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>旅游</category>
      
    </categories>
    
    
    <tags>
      
      <tag>西安</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>美食</title>
    <link href="/2025/06/20/Notes/%E6%97%85%E6%B8%B8/%E7%BE%8E%E9%A3%9F/"/>
    <url>/2025/06/20/Notes/%E6%97%85%E6%B8%B8/%E7%BE%8E%E9%A3%9F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>1</strong> 回民街、洒金桥（网红景点）可以去逛逛</p><p><strong>2</strong> 早餐：小南门早市</p><p><strong>3</strong> 泡馍和面馆 路边摊就行 赵记羊杂</p><p><strong>4</strong> 夜市：<br>未央区六号大街<br>凤城六路和未央路交叉口<br>碑林区卧龙巷机关小区</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>旅游</category>
      
    </categories>
    
    
    <tags>
      
      <tag>西安</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>西安8.16-8.20</title>
    <link href="/2025/06/20/Notes/%E6%97%85%E6%B8%B8/%E8%A5%BF%E5%AE%898.16-20/"/>
    <url>/2025/06/20/Notes/%E6%97%85%E6%B8%B8/%E8%A5%BF%E5%AE%898.16-20/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="17号"><a href="#17号" class="headerlink" title="17号"></a>17号</h2><p>早餐 小南门早市</p><p>大雁塔 </p><blockquote><p>音乐喷泉 12:00-12:10</p></blockquote><p>大唐不夜城 晚上去</p><p>晚上 附近夜市 [[美食]]</p><p>大唐芙蓉园 20:00</p><h2 id="18号"><a href="#18号" class="headerlink" title="18号"></a>18号</h2><p>兵马俑 华清池 骊山 <del>秦始皇陵</del></p><p>午晚饭 [[美食]]</p><h2 id="19号"><a href="#19号" class="headerlink" title="19号"></a>19号</h2><p>碑林博物馆</p><p>钟楼&amp;鼓楼 <strong>晚上</strong></p><p>晚上 附近夜市</p><p>大唐芙蓉园 20:00</p><h2 id="20号"><a href="#20号" class="headerlink" title="20号"></a>20号</h2><p>小雁塔 西安博物馆</p><p>野球帝 livehouse</p><p><del>陕西历史博物馆</del></p><p>[[景点]]</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>旅游</category>
      
    </categories>
    
    
    <tags>
      
      <tag>西安</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/06/20/Notes/%E6%AF%95%E8%AE%BE/%E5%AE%9E%E9%AA%8C/"/>
    <url>/2025/06/20/Notes/%E6%AF%95%E8%AE%BE/%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><input checked="" disabled="" type="checkbox"> 通过复现该论文的方法，用扩散模型实现提取特征图 [[论文调研#Emergent Correspondence from Image Diffusion]]</li><li><input checked="" disabled="" type="checkbox"> 实现一个图像匹配算法，用上文得到的特征图进行图像匹配，如[[论文调研#OmniGlue Generalizable Feature Matching with Foundation Model Guidance]]中的方法或[[论文调研#Image Matching from Handcrafted to Deep Features A Survey]]中的方法</li><li><input checked="" disabled="" type="checkbox"> 将手绘图像数据集迁移到该模型上，测试可行性</li><li><input disabled="" type="checkbox"> 做一个图像匹配的项目，给一张原始图像，用户上传自己画的图像，系统对用户的画进行评分（通过匹配程度），还有点对点匹配功能等</li><li><input disabled="" type="checkbox"> 用Sketchy数据集做一个lora微调，是否能提升性能</li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>毕设</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>相关文章</title>
    <link href="/2025/06/20/Notes/%E6%AF%95%E8%AE%BE/%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0/"/>
    <url>/2025/06/20/Notes/%E6%AF%95%E8%AE%BE/%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20250115110842.png" alt="image.png"></p><p><a href="https://zhuanlan.zhihu.com/p/133301967">图像特征提取与匹配技术</a> 计算机视觉中常用的图像特征点匹配技术<br><a href="https://blog.csdn.net/qq_42708183/article/details/109133806">2020最强匹配综述—《Image Matching from Handcrafted to Deep Features: A Survey》阅读总结-CSDN博客</a> 图像匹配综述</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>毕设</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>论文调研</title>
    <link href="/2025/06/20/Notes/%E6%AF%95%E8%AE%BE/%E8%AE%BA%E6%96%87%E8%B0%83%E7%A0%94/"/>
    <url>/2025/06/20/Notes/%E6%AF%95%E8%AE%BE/%E8%AE%BA%E6%96%87%E8%B0%83%E7%A0%94/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Emergent-Correspondence-from-Image-Diffusion"><a href="#Emergent-Correspondence-from-Image-Diffusion" class="headerlink" title="Emergent Correspondence from Image Diffusion"></a>Emergent Correspondence from Image Diffusion</h3><p><a href="https://ar5iv.labs.arxiv.org/html/2306.03881?_immersive_translate_auto_translate=1">[2306.03881] Emergent Correspondence from Image Diffusion</a><br><strong>这篇文章用扩散模型提取图像特征，最终实现跨域匹配，但没有涉及手绘图像领域</strong><br>使用预训练的扩散模型提取真实图像上的特征，找到两幅图共存的某个特征的对应。<br>对于一张噪声图，在训练好的U-Net逐步去噪的过程中，可以在中间某一个时间步的图像作为特征图。<br>而对于真实图像，可以在前向扩散时加噪，得到原图和噪声的混合图像，然后送到U-Net中提取中间层的激活得到扩散特征</p><h3 id="Learning-Dense-Correspondences-between-Photos-and-Sketches"><a href="#Learning-Dense-Correspondences-between-Photos-and-Sketches" class="headerlink" title="Learning Dense Correspondences between Photos and Sketches"></a>Learning Dense Correspondences between Photos and Sketches</h3><p><a href="https://ar5iv.labs.arxiv.org/html/2307.12967?_immersive_translate_auto_translate=1">[2307.12967] Learning Dense Correspondences between Photos and Sketches</a><br><strong>这篇文章通过深度学习方法提取素描图像的特征，建立素描图像和真实图像的关系</strong><br>数据集为PSC6k<a href="https://github.com/cogtoolslab/photo-sketch-correspondence/blob/main/PSC6K_Benchmark_README.md">photo-sketch-correspondence&#x2F;PSC6K_Benchmark_README.md at main · cogtoolslab&#x2F;photo-sketch-correspondence · GitHub</a><br>在原有的Sketchy数据集上进行的扩充<a href="https://github.com/CDOTAD/SketchyDatabase?tab=readme-ov-file">GitHub - CDOTAD&#x2F;SketchyDatabase: This project is a reimplementation of The Sketchy Database: Learning to Retrieve Badly Drawn Bunnies</a><br>用自监督方法来学习草图和照片之间的密集对应关系。构造照片-草图对，用照片中带注释的关键点</p><h3 id="Image-Matching-from-Handcrafted-to-Deep-Features-A-Survey"><a href="#Image-Matching-from-Handcrafted-to-Deep-Features-A-Survey" class="headerlink" title="Image Matching from Handcrafted to Deep Features: A Survey"></a>Image Matching from Handcrafted to Deep Features: A Survey</h3><p><a href="https://link.springer.com/article/10.1007/s11263-020-01359-2">Image Matching from Handcrafted to Deep Features: A Survey | International Journal of Computer Vision</a><br>介绍了计算机视觉中特征检测、特征描述、特征匹配的方法<br>特征检测：角特征、斑点特征、学习特征（机器学习、深度学习）、3D特征<br>特征描述：人工特征描述、机器学习、深度学习方法<br>特征匹配：区域匹配、图匹配、点集匹配</p><h3 id="Unsupervised-Semantic-Correspondence-Using-Stable-Diffusion"><a href="#Unsupervised-Semantic-Correspondence-Using-Stable-Diffusion" class="headerlink" title="Unsupervised Semantic Correspondence Using Stable Diffusion"></a>Unsupervised Semantic Correspondence Using Stable Diffusion</h3><p><a href="https://arxiv.org/html/2305.15581?_immersive_translate_auto_translate=1">Unsupervised Semantic Correspondence Using Stable Diffusion</a><br>本文实现了从文本到特征的语义与图像特征对应<br><img src="https://cdn.jsdelivr.net/gh/zhengyangWang1/image@main/img/20250115195636.png" alt="image.png"><br>用扩散模型提取图像中的语义特征</p><h3 id="OmniGlue-Generalizable-Feature-Matching-with-Foundation-Model-Guidance"><a href="#OmniGlue-Generalizable-Feature-Matching-with-Foundation-Model-Guidance" class="headerlink" title="OmniGlue: Generalizable Feature Matching with Foundation Model Guidance"></a>OmniGlue: Generalizable Feature Matching with Foundation Model Guidance</h3><p><a href="https://arxiv.org/pdf/2405.12979">2405.12979</a><br>一种图像匹配器，引入注意力机制，估计关键点集之间的对应关系</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>毕设</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
